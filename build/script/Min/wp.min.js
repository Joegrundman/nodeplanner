/**
 * Warplanner2 for Node
 * an implementation of
 * Bruce Harper's A World At War
 * by GMT Games
 * Programming provided
 * by Chris Goldfarb,
 * and Joe Grundman
 */
'use strict';

var WP = {


      initialize: function () {

    var filename = 'content/Sample/sample.xml'

    WP.Canvas.initCanvas()
    WP.FileLoader.startGame("euro", filename)
    WP.Eventing.attachEvents()

    if (!hexInfo) { hexInfo = new WP.HexInfo(); }
	  hexInfo.updateFor(game.currentMap.hexes[0], true);

    onWindowResize()

  }
}

var mapCanvas, navigatorCanvas, backgroundCanvas, hexInfoCanvas, forcepoolCanvas, newUnitCanvas, shipsAtSeaCanvas, shipyardCanvas, taskforceCanvas, unitCounterCanvas, hexInfoBackgroundCanvas;
var mapCtx, navigatorCtx, backgroundCtx, hexInfoCtx, forcepoolCtx, hexInfoBackgroundCtx, newUnitCtx, shipsAtSeaCtx, shipyardCtx, taskforceCtx, unitCounterCtx;
var game, mapNav, hexInfo, forcepool, attrition, codebreaking, diplomacy, dieRoller, gameSettings, hexControl, newUnit, phase, researchDisplay, shipsAtSea, shipyard, tables, taskforce, unitCounter;
var keyPress;
var fileName;
var mapHeight = -1;
var mapWidth = -1;
var mapImage;

function Enum() { }
Enum.HexSides = { east: 0, southeast: 1, southwest: 3, west: 4, northwest: 5, northeast: 6 };
Enum.HexPoints = { northeast: 0, southeast: 1, south: 3, southwest: 4, northwest: 5, north: 6 };

function jQueryUIStyling() {
	$('input:button, input:submit').button();
	$('.webgrid-wrapper').addClass('ui-grid ui-widget ui-widget-content ui-corner-all');
	$('.webgrid-title').addClass('ui-grid-header ui-widget-header ui-corner-top');
	$('.webgrid').addClass('ui-grid-content ui-widget-content');
	$('.webgrid-header').addClass('ui-state-default');
}

function onAjaxBegin() {
	$("#divLoading").center();
	$("#divLoading").show();
}
function onAjaxComplete() {
	$("#divLoading").hide();
}
function onAjaxSuccess(context) {
	$("#divLoading").hide("slow");
}

function setRandomWebsiteBackground(divName) {
	var pic = Math.floor(Math.random() * 7) + 1;
	if (divName == null) divName = "main";
	$("#" + divName).attr("style", "background-image: url(/content/pictures/" + pic + ".jpg); background-position: top");
}


var Convert = {
	ascii: "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
	chars: " !\"#$%&amp;'()*+'-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",
	hex: '0123456789ABCDEF', bin: ['0000', '0001', '0010', '0011', '0100', '0101', '0110', '0111', '1000', '1001', '1010', '1011', '1100', '1101', '1110', '1111'],
	decToHex: function (d) {
		return (this.hex.charAt((d - d % 16) / 16) + this.hex.charAt(d % 16));
	},
	toBin: function (ch) {
		var d = this.toDec(ch);
		var l = this.hex.charAt(d % 16);
		var h = this.hex.charAt((d - d % 16) / 16);
		var hhex = "ABCDEF";
		var lown = l < 10 ? l : (10 + hhex.indexOf(l));
		var highn = h < 10 ? h : (10 + hhex.indexOf(h));
		return this.bin[highn] + ' ' + this.bin[lown];
	},
	toHex: function (ch) {
		return this.decToHex(this.toDec(ch));
	},
	toDec: function (ch) {
		var p = this.chars.indexOf(ch);
		return (p <= -1) ? 0 : (p + 32);
	},
	toAscii: function (index) {
		if (index > 25) {
			return this.ascii[index - 26] + this.ascii[index - 26];
		}

		return this.ascii[index];
	},

	toIntArray: function (csv) {
		var ret = new Array();
		var split = csv.split(',');

		for (var i = 0; i < split.length; i++) {
			try { ret[ret.length] = parseInt(split[i]); } catch (e) { }
		}
		return ret;
	}
};

function setCookie(name, value, days)
{
	if (days) {
		var date = new Date();
		date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
		var expires = "; expires=" + date.toGMTString();
	}
	else
		var expires = ""; document.cookie = name + "=" + value + expires + "; path=/";
}

function getCookie(name)
{
	var nameEQ = name + "=";
	var ca = document.cookie.split(';');
	for (var i = 0; i < ca.length; i++)
	{
		var c = ca[i];
		while (c.charAt(0) == ' ') c = c.substring(1, c.length);
		if (c.indexOf(nameEQ) == 0)
			return c.substring(nameEQ.length, c.length);
	}
	return null;
}

function deleteCookie(name)
{
	setCookie(name, "", -1);
}

WP.Misc = {  };

WP.Misc.Ui = {
	closeAllDialogs: function () {
		if ($('#attrition').dialog('isOpen') == true)
			$("#attrition").dialog('close');
		if ($('#codebreaking').dialog('isOpen') == true)
			$("#codebreaking").dialog('close');
        if ($('#diplomacy').dialog('isOpen') == true)
			$("#diplomacy").dialog('close');
		if ($('#forcepoolDialog').dialog('isOpen') == true)
			$("#forcepoolDialog").dialog('close');
		if ($('#hexControl').dialog('isOpen') == true)
			$("#hexControl").dialog('close');
		if ($('#researchDisplay').dialog('isOpen') == true)
			$("#researchDisplay").dialog('close');
		if ($('#newUnit').dialog('isOpen') == true)
			$("#newUnit").dialog('close');
		if ($('#tables').dialog('isOpen') == true)
			$("#tables").dialog('close');
		if ($('#shipsAtSea').dialog('isOpen') == true)
			$("#shipsAtSea").dialog('close');
		if ($('#shipyard').dialog('isOpen') == true)
			$("#shipyard").dialog('close');
		if ($('#taskforce').dialog('isOpen') == true)
			$("#taskforce").dialog('close');
		if ($('#unitCounter').dialog('isOpen') == true)
			$("#unitCounter").dialog('close');

	},

	isiPad: function () {
		var isIpad = false;
		if (navigator.platform.indexOf("iPad") != -1) isIpad = true;
		return isIpad;
	},

	isiPod: function () {
		var isIpod = false;
		if (navigator.platform.indexOf("iPhone") != -1 || navigator.platform.indexOf("iPad") != -1) isIpod = true;
		return isIpod;
	},

	trKeyVal: function (key, val) {
		return "<tr valign='middle'><td>" + key + "</td><td style='white-space: nowrap'>" + val + "</td></tr>";
	},

	trKeyValWidth100: function (key, val) {
		return "<tr valign='middle'><td style='white-space: nowrap'>" + key + "</td><td style='width: 100%'>" + val + "</td></tr>";
	},

	createAnchorWithId: function (id, text) {
		return "<a id='" + id + "'>" + text + "</a>";
	}
};

WP.Color = function(red, green, blue) {
	this.red = red;
	this.green = green;
	this.blue = blue;

	this.toRgb = function() {
		return "rgb(" + this.red + "," + this.green + "," + this.blue + ")";
	};
};

function scrollDivDown(val) {
	$("#mapDiv").scrollTop(val);
	setCookie("downscroll", val);
}

function scrollDivRight(val) {
	$("#mapDiv").scrollLeft(val);
	setCookie("rightscroll", val);
}

function getWindowDimensions() {
  if (typeof (window.innerWidth) === 'number') {
    window.mapWidth = window.innerWidth
    window.mapHeight = window.innerHeight

  } else if (document.documentElement && (document.documentElement.clientWidth ||
                                          document.documentElement.clientHeight)) {
    window.mapWidth = document.documentElement.clientWidth
    window.mapHeight = document.documentElement.clientHeight
  } else {
    window.mapWidth = $(window).width()
    window.mapHeight = $(window).height()
  }


  window.mapHeight = window.mapHeight -80
  window.mapWidth = window.mapWidth - 186

}

function repositionControls(){
  $('#main').removeClass('pageContent')
  $('#main').addClass('gameContent')
  $('footer').hide()

  var mapDiv = $("#mapDiv")
  var menuDiv = $("#menuDiv")
  var splashImgDiv = $("#splashImg");

  mapDiv.height(window.mapHeight);
  splashImgDiv.height($(window).height());
  mapDiv.width(window.mapWidth);
  menuDiv.height(window.mapHeight);

}

function onWindowResize() {
  var map = game.currentMap
  getWindowDimensions()
  repositionControls()
  map.draw()
  mapNav.refresh()
}


function adjust(value) {
	return value * game.zoomLevel;
}

function Point(x, y) {
	this.x = x;
	this.y = y;
}

function getPoint (canvasName, e) {
	if (typeof e == 'undefined') e = mapCanvas.event;
	var obj = document.getElementById(canvasName);
	var relPos = WP.Map.Mouse.Util.getRelativePosition(obj, e.clientX, e.clientY);
	var x = relPos[0];
	var y = relPos[1];
	return new Point(x, y);
}

WP.XmlHelper = function () {
	this.XML = [];
	this.Nodes = [];
	this.State = "";
	this.FormatXML = function (str) {
		if (str && str.replace) {
			str = str.replace(">", "&gt;");
			str = str.replace("<", "&lt;");
			str = str.replace("\"", "&quot;");
			str = str.replace("&", "&amp;");
			return str;
		}
		return "";
	};

	this.BeginNode = function (name) {
		if (!name) return;
		if (this.State == "beg") this.XML.push(">");
		this.State = "beg";
		this.Nodes.push(name);
		this.XML.push("<" + name);
	};

	this.EndNode = function () {
		if (this.State == "beg") {
			this.XML.push("/>");
			this.Nodes.pop();
		}
		else if (this.Nodes.length > 0)
			this.XML.push("</" + this.Nodes.pop() + ">");
		this.State = "";
	};

	this.Attrib = function (name, value) {
		if (this.State != "beg" || !name) return;
		this.XML.push(" " + name + "=\"" + this.FormatXML(value) + "\"");
	};

	this.WriteString = function (value) {
		if (this.State == "beg") this.XML.push(">");
		this.XML.push(this.FormatXML(value));
		this.State = "";
	};

	this.Node = function (name, value) {
		if (!name) return;
		if (this.State == "beg") this.XML.push(">");
		this.XML.push((value == "" || !value) ? "<" + name + "/>" : "<" + name + ">" + this.FormatXML(value) + "</" + name + ">");
		this.State = "";
	};

	this.Close = function () {
		while (this.Nodes.length > 0)
			this.EndNode();
		this.State = "closed";
	};

	this.ToString = function () {
		var result = this.XML.join("");
		return result;
	};
};

'use strict';
WP.Attrition = class {
    constructor () {
        this.units = []
    }
    addUnit (unit) {
        if (!unit) { return }
        if (!unit.canBeCountedInAttrition()) { return }

        var foundUnit = this.units.some(u => u == unit)

                if (!foundUnit) {
            this.units.push(unit)
            unit.highlight = new WP.Color(255, 255, 72).toRgb()
        }
    }
    handleHexClick() { 
        var map = game.currentMap
        var hex = map.currentHex
        var _this = this
        if (!hex) return;
        if (ctrlPressed()) {
            hex.units.forEach(u => _this.addUnit(u))
        } else {
            _this.addUnit(hex.getTopUnit());
        }
        hex.draw();
        this.refreshTotals();
    }


           removeUnit (unit) {
        if (!unit) return;
        var unitFound = false
        var j = 0;
        while (j < this.units.length) {
            if (this.units[j] == unit) {
                    this.units.splice(j, 1);
                    unitFound = true
                }
            else
                j++;
        }

         unit.highlight = null;           


            }


        refreshTotals () {
        var total = 0
        var countries = {}

        this.units.forEach(u => {
            if (countries[u.owner]) { countries[u.owner] += u.strength }
            else countries[u.owner] = u.strength
            total += u.strength
        })

                var details = "<table>"
        for (var cty in countries) {
		details += "<tr><td class='boldKey'>" + countries[cty] +
                 ":</td><td class='value'> " + cty + "</td></tr>";
        }
        details += "</table>";
        $("#attritionDetails").html(details);
        $("#attritionTotal").html(total);
    }



        }

WP.Attrition.UI = {
	handleDialogClose: function () {
		game.state = 0;
	},

	handleMenuButton: function () {
		if (game.state == 1) {
			WP.Misc.Ui.closeAllDialogs();
			return;
		}
		WP.Misc.Ui.closeAllDialogs();
		$("#attrition").dialog('open');
		$("#attrition").dialog("option", "width", 300);
		$("#attritionDetails").html('');
		$("#attritionTotal").html('0');
		game.state = 1;
		attrition = new WP.Attrition();
	}
}





WP.Canvas = {
  initCanvas: function () {
    WP.Canvas.initMapCanvas()
    WP.Canvas.initBackgroundCanvas()
    WP.Canvas.initForcepoolCanvas()
    WP.Canvas.initHexInfoCanvas()
    WP.Canvas.initNavigatorCanvas()
    WP.Canvas.initNewUnitCanvas()
    WP.Canvas.initShipsAtSeaCanvas()
    WP.Canvas.initShipyardCanvas()
    WP.Canvas.initTaskforceCanvas()
    WP.Canvas.initUnitCounterCanvas()
  },

  initBackgroundCanvas: function() {
    backgroundCanvas = $("#backgroundCanvas")[0]
    backgroundCtx = backgroundCanvas.getContext('2d')
  },

  initForcepoolCanvas: function () {
		forcepoolCanvas = $("#forcepoolCanvas")[0];
		forcepoolCtx = forcepoolCanvas.getContext('2d');
	},

  initHexInfoCanvas: function () {
    hexInfoCanvas = $("#hexInfoCanvas")[0];
    hexInfoCtx = hexInfoCanvas.getContext('2d');
    hexInfoBackgroundCanvas = $("#hexInfoBackgroundCanvas")[0];
    hexInfoBackgroundCtx = hexInfoBackgroundCanvas.getContext('2d');
  },

  initMapCanvas: function() {
    mapCanvas = $("#mapCanvas")[0]
    mapCtx = mapCanvas.getContext('2d')
    mapCtx.font = '10px verdana'
  },

  initNavigatorCanvas: function () {
    navigatorCanvas = $("#navigatorCanvas")[0];
    navigatorCtx = navigatorCanvas.getContext('2d');
    navigatorCtx.font = '10px verdana';
  },

  initNewUnitCanvas: function () {
    newUnitCanvas = $("#newUnitCanvas")[0];
    newUnitCtx = newUnitCanvas.getContext('2d');
  },

  initShipsAtSeaCanvas: function () {
    shipsAtSeaCanvas = $("#shipsAtSeaCanvas")[0];
    shipsAtSeaCtx = shipsAtSeaCanvas.getContext('2d');
  },

  initShipyardCanvas: function () {
    shipyardCanvas = $("#shipyardCanvas")[0];
    shipyardCtx = shipyardCanvas.getContext('2d');
  },

  initTaskforceCanvas: function () {
    taskforceCanvas = $("#taskforceCanvas")[0];
    taskforceCtx = taskforceCanvas.getContext('2d');
  },

  initUnitCounterCanvas: function () {
    unitCounterCanvas = $("#unitCounterCanvas")[0];
    unitCounterCtx = unitCounterCanvas.getContext('2d');
  },

  resizeCanvas: function (canvas, image) {
    canvas.width = image.width;
    canvas.height = image.height;
  },

  resizeCanvasToDiv: function (canvas, div) {
    canvas.width = div.scrollWidth;
    canvas.height = div.scrollHeight;
  }
}

CanvasRenderingContext2D.prototype.drawUnits = function (units, x, y) {
	if (game.hideUnits) { return; }
	if (!units || units.length < 1) return;

	var count = units.length;
	var start = 0;
	if (count > 5) {
		start = units.length - 5; 
	}

	var size = units[0].size;
	var stagger = adjust(10);
	var displayed = count - start;
	if (displayed > 1) {
		var height = ((displayed - 1) * stagger) + size;
		while (height > adjust(50)) {
			stagger -= 1;
			height = ((displayed - 1) * stagger) + size;
		}

		x += (stagger / 2);
		y += (stagger / 2);
		if (displayed > 2) y++;
	}

	var i = start;
	while (i < count) {
		units[i++].draw(this, x, y);
		x -= stagger;
		y -= stagger;
	}
}

CanvasRenderingContext2D.prototype.getImageDataSafely = function (x, y, width, height) {
	try {
		return this.getImageData(x, y, width, height);
	}
	catch (e) {
		netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
		return this.getImageData(x, y, width, height);
	}
}

CanvasRenderingContext2D.prototype.roundRect = function (sx, sy, ex, ey, r) {
	var r2d = Math.PI / 180;
	if ((ex - sx) - (2 * r) < 0) { r = ((ex - sx) / 2); } 
	if ((ey - sy) - (2 * r) < 0) { r = ((ey - sy) / 2); } 
	sx = Math.floor(sx);
	sy = Math.floor(sy);
	ex = Math.floor(ex);
	ey = Math.floor(ey);
	r = Math.floor(r);
	if (r < 0) r = 0;
	this.beginPath();
	this.moveTo(sx + r, sy);
	this.lineTo(ex - r, sy);
	this.arc(ex - r, sy + r, r, r2d * 270, r2d * 360, false);
	this.lineTo(ex, ey - r);
	this.arc(ex - r, ey - r, r, r2d * 0, r2d * 90, false);
	this.lineTo(sx + r, ey);
	this.arc(sx + r, ey - r, r, r2d * 90, r2d * 180, false);
	this.lineTo(sx, sy + r);
	this.arc(sx + r, sy + r, r, r2d * 180, r2d * 270, false);
	this.closePath();
}

CanvasRenderingContext2D.prototype.shadow = function (sx, sy, ex, ey, r) {
	var r2d = Math.PI / 180;
	if ((ex - sx) - (2 * r) < 0) { r = ((ex - sx) / 2); } 
	if ((ey - sy) - (2 * r) < 0) { r = ((ey - sy) / 2); } 
	sx = Math.floor(sx);
	sy = Math.floor(sy);
	ex = Math.floor(ex);
	ey = Math.floor(ey);
	r = Math.floor(r);
	this.beginPath();
	this.moveTo(ex - r, sy);
	this.arc(ex - r, sy + r, r, r2d * 270, r2d * 360, false);
	this.lineTo(ex, ey - r);
	this.arc(ex - r, ey - r, r, r2d * 0, r2d * 90, false);
	this.lineTo(sx + r, ey);
	this.arc(sx + r, ey - r, r, r2d * 90, r2d * 180, false);
	this.closePath();
}

'use strict';


WP.Codebreaking = class {
    constructor () {
        this.selected = 6
        this.cards = []
    }
    addCard (card) {
        this.cards.push(card)
    }
    getResultFor (year, season, side) {
        var result = null
        game.codebreakingResults.forEach(res => {
            if ((res.year == year) &&
                (res.season == season) &&
                (res.side == side)) {
                result = res
            }
        })
        return result
    }


    draw () {
        var year = parseInt($('#cbYear').val());
        var season = parseInt($('#cbSeason').val());
        WP.Codebreaking.UI.showResultsFor(year, season, codebreaking.selected);       
    }

    }

'use strict';

WP.CodebreakingResult = class {
    constructor () {
        this.year = 1939
        this.season = 0
        this.side = 0
        this.cards = []
    }

        readFrom (rec) {
        var split = rec.split('~');
        this.year = parseInt(split[0]);
        this.season = parseInt(split[1]);
        this.side = parseInt(split[2]);
        this.cards = Convert.toIntArray(split[3]);
    }
}


WP.Codebreaking.UI = {
	fillCard: function (div, theater, country, type, flag) {
		var html = "<span style='font-size: 16px; font-weight: bold;'>" + theater + "</span><br />";
		html += "<span style='font-size: 12px; font-style: italic;'>" + country + "</span><p></p>";
		html += "<img src='content/flags/" + flag + "-smallest.png' alt='Flag' />";
		html += "<p><span style='font-size: 16px; font-weight: bold; padding-top: 5px'>" + type + "</span></p>";
		$(div).html(html);
	},

	handleDialogClose: function () {
		game.state = 0;
	},

	handleMenuButton: function () {
		if (game.state == 2) {
			WP.Misc.Ui.closeAllDialogs();
			return;
		}
		WP.Misc.Ui.closeAllDialogs();
		$("#codebreaking").dialog('open');
		$("#codebreaking").dialog("option", "width", 510);
		game.state = 2;
		codebreaking = new WP.Codebreaking();
		codebreaking.draw();
	},

	showResultsFor: function (year, season, side) {
		WP.Codebreaking.UI.showTitle(side);

		var result = codebreaking.getResultFor(year, season, side);

		if (!result) {
			$(".codebreakingCard").hide();
			$("#cbDrawCards").show();
			return;
		}

		$(".codebreakingCard").show();
		$("#cbDrawCards").hide();
		var theater = "Ultra";
		if (result.side == 7 || result.side == 9) theater = "Magic";

		var country = "Axis";
		var flag = "germany";
		switch (side) {
			case 8: flag = "britain"; country = "Allies"; break;
			case 7: flag = "japan"; country = "Japan"; break;
			case 9: flag = "us"; country = "United States"; break;
		}

		var card = "Blank";
		for (var i = 0; i < result.cards.length; i++) {
			card = "Blank";
			switch (result.cards[i]) {
				case 1: card = "Sub"; break;
				case 2: card = "ASW"; break;
				case 3: card = "Tactical"; break;
				case 4: card = "Strategic"; break;
				case 5: card = "Wild"; break;
			}
			WP.Codebreaking.UI.fillCard("#cbCard" + (i + 1), theater, country, card, flag);
		}
	},

	showTitle: function (id) {
		var title = "European Axis";
		if (id == 8) title = "European Allies";
		else if (id == 7) title = "Japanese";
		else if (id == 9) title = "United States";
		$("#cbDetails").html(title);
	}
}




'use strict';

WP.Country  = class {
    constructor () {
        this.id = -1;
        this.name = "unknown";
        this.ally = null;
        this.colonyOf = null;
        this.coalition = null;
        this.isOrganization = false;
        this.isMajorPower = false;
        this.partOf = null;
        this.pacific = false;

        this.backColor = null;
        this.foreColor = null;
        this.innerColor = null;
        this.lineColor = null;
        this.shadow = null;
        this.flagImage = null;

        this.forcepoolGroupings = [];
        this.colonies = []
        this.units = []
        this.codebreaking = null;
    }


        static countryBuilder (id, name) {
        var country = new WP.Country();
		country.id = id;
		country.name = name;
		WP.Country.UI.Colors.setColors(country);
		return country;       
    }

    static forcepoolGroupingBuilder (id, name) {
        var grouping = new WP.ForcepoolGrouping();
		grouping.id = id;
		grouping.name = name;
		return grouping;
    }

    static sort (a, b) {
        if (a.name > b.name) return 1;
		else if (a.name < b.name) return -1;
		return 0;
    }
    addColony (colony) {
        colony.colonyOf = this
        this.colonies.push(colony)
        colony.colonyOf = this
    }
    addForcepoolGrouping (grouping) {
        this.forcepoolGroupings.push(grouping)
    }
    addUnit (unit) {
        this.units.push(unit)
        unit.owner = this
    }
    getUnit (id) {
        var res = null
        this.units.forEach(u => {
            if (u.id === id) { res = u}
        })      
        if (res == null) { console.log("Game.getUnit: Unknown unit: " + id); }      
        return res
    }
    removeUnit (unit) {
         this.units = this.units.filter(u => u != unit)
    }

    toString () {
        return this.name + " (" + this.id + ")"
    }

	};




WP.ForcepoolGrouping = class {
    constructor () {
        this.id = -1;
        this.name = "unknown";       
    }
}

WP.Country.UI = {

	getFlagUrl: function (country) {
		var name = country.name.toLowerCase();
        if (name == "germany" && !game.noSwastikas) { 
            return "/content/flags/" + name.replace(" ", "") + "-unsafe.bmp"
        }
		if (country.colonyOf)
			name = country.colonyOf.name.toLowerCase();
		if (country.partOf)
			name = country.partOf.name.toLowerCase();

		if (country.id == 28 || country.id == 29) name = "italy";
		if (country.id == 42) name = "nationalistchina";
		if (country.id == 19) name = "netherlands";
		if (country.id == 17) name = "comchina";
		if (country.id == 24) name = "freefrench";
		if (country.id == 32) name = "indiannat";
		return "/content/flags/" + name.replace(" ", "") + ".bmp";
	},

	loadFlag: function (country) {
		country.flagImage = new Image();
		country.flagImage.src = WP.Country.UI.getFlagUrl(country);
	}
}


WP.Country.UI.Colors = {

	setColors: function (country) {
		switch (country.name.toUpperCase()) {
			case "ARABIA":
				country.backColor = new WP.Color(216, 203, 159);
				country.foreColor = new WP.Color(255, 255, 255);
				country.innerColor = new WP.Color(255, 255, 255);
				break;
			case "AUSTRALIA":
				country.backColor = new WP.Color(209, 188, 140);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(230, 222, 80);
				break;
			case "BELGIUM":
			case "LUXEMBOURG":
				country.backColor = new WP.Color(153, 205, 232);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(238, 233, 3);
				break;
			case "BRITAIN":
				country.backColor = new WP.Color(209, 188, 140);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(230, 220, 168);
				break;
			case "BULGARIA":
				country.backColor = new WP.Color(167, 169, 168);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(238, 88, 67);
				break;
			case "CANADA":
				country.backColor = new WP.Color(209, 188, 140);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(168, 211, 226);
				break;
			case "COMCHINA":
			case "COMMUNIST CHINA":
				country.backColor = new WP.Color(234, 81, 43);
				country.foreColor = new WP.Color(241, 246, 0);
				country.innerColor = new WP.Color(234, 81, 43);
				break;
			case "DENMARK":
				country.backColor = new WP.Color(199, 240, 254);
				country.foreColor = new WP.Color(255, 0, 0);
				break;
			case "FINLAND":
				country.backColor = new WP.Color(137, 171, 206);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(246, 250, 255);
				break;
			case "FINBORDER":
				country.backColor = new WP.Color(147, 191, 216);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(246, 250, 255);
				break;
			case "FRANCE":
				country.backColor = new WP.Color(118, 178, 218); 
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(181, 216, 239);
				break;
			case "FREE FRENCH":
				country.backColor = new WP.Color(118, 178, 218)
				country.foreColor = new WP.Color(0, 0, 0); 
				country.innerColor = new WP.Color(209, 188, 140)
				break;
			case "VICHY":
				country.backColor = new WP.Color(83, 161, 217);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(120, 120, 120)
				break;
			case "GERMANY":
				country.backColor = new WP.Color(73, 73, 73); 
				country.foreColor = new WP.Color(255, 255, 255);
				country.innerColor = new WP.Color(120, 120, 120);
				break;
			case "GREECE":
				country.backColor = new WP.Color(0, 124, 177);
				country.foreColor = new WP.Color(255, 255, 255);
				country.innerColor = new WP.Color(0, 124, 177);
				break;
			case "HUNGARY":
				country.backColor = new WP.Color(167, 169, 168);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(70, 160, 40);
				break;
			case "INDIAN NAT. ARMY":
				country.backColor = new WP.Color(165, 125, 24);
				country.foreColor = new WP.Color(255, 255, 255);
				country.innerColor = new WP.Color(156, 121, 33);
				break;
			case "INDIA":
				country.backColor = new WP.Color(209, 188, 140);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(155, 120, 22);
				break;
			case "IRA":
			case "IRELAND":
				country.backColor = new WP.Color(23, 153, 50);
				country.foreColor = new WP.Color(219, 231, 9);
				country.innerColor = new WP.Color(0, 0, 0);
				break;
			case "IRAQ":
				country.backColor = new WP.Color(247, 219, 115);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(0, 178, 57);
				break;
			case "ITALY":
				country.backColor = new WP.Color(188, 221, 185);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(233, 245, 219);
				break;
			case "ITALIAN SOCIALIST":
				country.backColor = new WP.Color(188, 221, 185);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(234, 81, 43); 
				break;
			case "ITALIAN BELIGERANTE":
				country.backColor = new WP.Color(188, 221, 185);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(151, 172, 108); 
				break;
			case "JAPAN":
			case "FORMOSA":
			case "KOREA":
				country.backColor = new WP.Color(73, 73, 73);
				country.foreColor = new WP.Color(250, 236, 70);
				country.innerColor = new WP.Color(120, 120, 120);
				break;
			case "NATCHINA":
			case "NATIONALIST CHINA":
				country.backColor = new WP.Color(250, 250, 250);
				country.foreColor = new WP.Color(228, 0, 32);
				country.innerColor = new WP.Color(250, 250, 250);
				break;
			case "NETHERLANDS":
			case "DUTCH E. INDIES":
				country.backColor = new WP.Color(153, 205, 232);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(228, 115, 0);
				break;
			case "NORWAY":
				country.backColor = new WP.Color(250, 250, 255);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(42, 168, 218);
				break;
			case "PERSIA":
				country.backColor = new WP.Color(216, 203, 159); 
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(0, 178, 57);
				break;
			case "PHILIPINES":
				country.backColor = new WP.Color(151, 172, 108);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(88, 200, 220);
				break;
			case "EASTPOLAND":
			case "POLAND":
				country.backColor = new WP.Color(0, 120, 108);
				country.foreColor = new WP.Color(255, 255, 255);
				country.innerColor = new WP.Color(0, 120, 108);
				break;
			case "BESSARABIA":
			case "RUMANIA":
				country.backColor = new WP.Color(167, 169, 168);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(3, 140, 205);
				break;
			case "RUSSIA":
				country.backColor = new WP.Color(234, 81, 43);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(235, 202, 75);
				break;
			case "SPAIN":
				country.backColor = new WP.Color(250, 236, 87);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(235, 86, 69);
				break;
			case "SOUTH AFRICA":
				country.backColor = new WP.Color(209, 188, 140);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(225, 158, 0);
				break;
			case "SWEDEN":
				country.backColor = new WP.Color(250, 250, 255);
				country.foreColor = new WP.Color(0, 93, 157);
				country.innerColor = new WP.Color(206, 231, 255);
				break;
			case "THAILAND":
				country.backColor = new WP.Color(146, 6, 104);
				country.foreColor = new WP.Color(235, 241, 145);
				country.innerColor = new WP.Color(146, 6, 104);
				break;
			case "TURKEY":
				country.backColor = new WP.Color(238, 210, 94);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(240, 235, 190);
				break;
			case "UKRAINE":
				country.backColor = new WP.Color(0, 124, 197);
				country.foreColor = new WP.Color(245, 238, 6);
				country.innerColor = new WP.Color(0, 124, 197);
				break;
			case "US":
			case "UNITED STATES":
			case "UNITEDSTATES":
			case "AMERICA":
				country.backColor = new WP.Color(151, 172, 108);
				country.foreColor = new WP.Color(0, 0, 0);
				country.innerColor = new WP.Color(202, 221, 166);
				break;
			case "VLASOV":
			case "VLASLOV":
				country.backColor = new WP.Color(244, 81, 43);
				country.foreColor = new WP.Color(255, 255, 255);
				country.innerColor = new WP.Color(148, 146, 148);
				break;
			case "WAFDIST":
				country.backColor = new WP.Color(241, 219, 114);
				country.foreColor = new WP.Color(0, 0, 0); 
				country.innerColor = new WP.Color(0, 175, 60);
				break;
			case "WANG":
				country.backColor = new WP.Color(244, 81, 43);
				country.foreColor = new WP.Color(255, 255, 0);
				country.innerColor = new WP.Color(255, 89, 66);
				break;
			case "YUGOSLAVIA":
				country.backColor = new WP.Color(167, 169, 168);
				country.foreColor = new WP.Color(0, 0, 0);
				country.lineColor = new WP.Color(250, 250, 250);
				country.innerColor = new WP.Color(3, 140, 205);
				break;
			default:
				country.backColor = new WP.Color(20, 20, 20);
				country.foreColor = new WP.Color(140, 140, 140);
				country.innerColor = new WP.Color(90, 90, 90);
				break;
		}
		if (country.lineColor == null) { country.lineColor = country.foreColor }

		var shadowRed, shadowGreen, shadowBlue;
		if (country.backColor.red > 40)
			shadowRed = country.backColor.red - 40;
		else
			shadowRed = 0;

		if (country.backColor.green > 40)
			shadowGreen = country.backColor.green - 40;
		else
			shadowGreen = 0;

		if (country.backColor.blue > 40)
			shadowBlue = country.backColor.blue - 40;
		else
			shadowBlue = 0;

		country.shadow = new WP.Color(shadowRed, shadowGreen, shadowBlue);
	}
}

WP.Diplomacy = function () {

}

WP.DiplomaticResult = function () {

	var id = null;
	var dipText = null;
	var proAllied = null;
	var proAxis = null;
	var trigger = null;
}

WP.DiplomaticResult.Util = {

	dipResultBuilder: function (id, dipText, trigger, proclivity) {

		var dipResult = new WP.DiplomaticResult();
		dipResult.id = id;
		dipResult.trigger = trigger;
		dipResult.dipText = dipText;
		if (proclivity == "proAxis") {
			dipResult.proAxis = 1;
			dipResult.proAllied = null;
		}
		else if (proclivity == "proAllied") {
			dipResult.proAllied = 1;
			dipResult.proAxis = null;
		}
		else {
			dipResult.proAllied = null;
			dipResult.proAxis = null;
		}
		return dipResult;
	}
}

WP.Diplomacy.Mouse = {}

WP.Diplomacy.prototype.handleCountrySelected = function (id) {
	var cty = game.getCountry(id);
	$("#dipCountryFlag").attr("src", WP.Country.UI.getFlagUrl(cty));
}



WP.DiplomaticResult.Util = {

	dipResultBuilder: function (id, dipText, trigger, proclivity) {

		var dipResult = new WP.DiplomaticResult();
		dipResult.id = id;
		dipResult.trigger = trigger;
		dipResult.dipText = dipText;
		if (proclivity == "proAxis") {
			dipResult.proAxis = 1;
			dipResult.proAllied = null;
		}
		else if (proclivity == "proAllied") {
			dipResult.proAllied = 1;
			dipResult.proAxis = null;
		}
		else {
			dipResult.proAllied = null;
			dipResult.proAxis = null;
		}
		return dipResult;
	}


    }

WP.Diplomacy.Util = {
    handleMenuButton: function() {
        $("#diplomacy").dialog('open');
        $("#diplomacy").dialog("option", "width", 540);

	}
}

WP.Eventing = {
	attachEvents: function () {
		$.ajaxSetup({ cache: false });

		$(document).ajaxError(function (event, request) {
			var start = request.responseText.indexOf("<title>") + 7;
			var end = request.responseText.indexOf("</title>");
			var error = request.responseText.substring(start, end);
			alert(error);
		});

		$("#attrition").dialog({ autoOpen: false, resizable: false, close: function () { WP.Attrition.UI.handleDialogClose(); } });
		$("#codebreaking").dialog({ autoOpen: false, resizable: false, close: function () { WP.Codebreaking.UI.handleDialogClose(); } });
		$("#forcepoolDialog").dialog({ autoOpen: false });
		$("#diplomacy").dialog({ autoOpen: false, resizable: false });
		$("#gameSettings").dialog({ autoOpen: false });
		$("#hexControl").dialog({ autoOpen: false });
		$("#newUnit").dialog({ autoOpen: false });
		$("#tables").dialog({ autoOpen: false, close: function () { WP.Tables.UI.handleDialogClose(); } });
		$("#researchDisplay").dialog({ autoOpen: false });
		$("#shipsAtSea").dialog({ autoOpen: false });
		$("#shipyard").dialog({ autoOpen: false });
		$("#taskforce").dialog({ autoOpen: false });
		$("#unitCounter").dialog({ autoOpen: false });

		WP.Eventing.attachWindowingEvents();
		WP.Eventing.attachMapEvents();
		WP.Eventing.attachNavigatorEvents();
		WP.Eventing.attachDialogWithHolderEvents();
		WP.Eventing.attachToolbarEvents();
	},

	attachDialogWithHolderMouseEvents: function (dialog, dialogCanvas) {
		if (dialogCanvas.addEventListener) {
			dialogCanvas.addEventListener("mousedown", dialog.onMouseDown, false);
		}
		else if (dialogCanvas.attachEvent) {
			dialogCanvas.attachEvent("onmousedown", dialog.onMouseDown);
		}
	},

	attachDialogWithHolderEvents: function () {
		if (!diplomacy) diplomacy = new WP.Diplomacy();
		if (!forcepool) forcepool = new WP.Forcepool();
		WP.Eventing.attachDialogWithHolderMouseEvents(forcepool, forcepoolCanvas);
	    if (!gameSettings) gameSettings = new WP.GameSettings();
		if (!hexControl) hexControl = new WP.HexControl();
		$("#hexControl").dialog({
			beforeClose: function () { hexControl.showUnits(); }
		});
		if (!newUnit) newUnit = new WP.NewUnit();
		if (!researchDisplay) researchDisplay = new WP.ResearchDisplay();
		if (!shipsAtSea) shipsAtSea = new WP.ShipsAtSea();
		WP.Eventing.attachDialogWithHolderMouseEvents(shipsAtSea, shipsAtSeaCanvas);
		if (!shipyard) shipyard = new WP.Shipyard();
		WP.Eventing.attachDialogWithHolderFullMouseEvents(shipyard, shipyardCanvas);
		if (!taskforce) taskforce = new WP.Taskforce();
		WP.Eventing.attachDialogWithHolderFullMouseEvents(taskforce, taskforceCanvas);
		if (!unitCounter) unitCounter = new WP.UnitCounter();
		WP.Eventing.attachDialogWithHolderMouseEvents(unitCounter, unitCounterCanvas);
	},

	attachDialogWithHolderFullMouseEvents: function (dialog, dialogCanvas) {
		if (dialogCanvas.addEventListener) {
			dialogCanvas.addEventListener("mousemove", dialog.onMouseMove, false);
			dialogCanvas.addEventListener("mousedown", dialog.onMouseDown, false);
			dialogCanvas.addEventListener("mouseup", dialog.onMouseUp, false);
			dialogCanvas.addEventListener("dblclick", dialog.onDoubleClick, false);
		}
		else if (dialogCanvas.attachEvent) {
			dialogCanvas.attachEvent("onmousemove", dialog.onMouseMove);
			dialogCanvas.attachEvent("onmousedown", dialog.onMouseDown);
			dialogCanvas.attachEvent("onmouseup", dialog.onMouseUp);
			dialogCanvas.attachEvent("ondblclick", game.dialog.onDoubleClick, false);
		}
	},

	attachWindowingEvents: function () {
		if (window.addEventListener) {
			window.addEventListener("resize", onWindowResize, false);
		}
		else if (window.attachEvent) {
			window.attachEvent("onresize", onWindowResize);
		}

		$(window).keydown(function (event) { WP.Eventing.Keyboard.handleKeyDown(event.keyCode); });
		$(window).keyup(function (event) { WP.Eventing.Keyboard.handleKeyUp(); });
	},

	attachMapEvents: function () {
		if (mapCanvas.addEventListener) {
			mapCanvas.addEventListener("mousemove", game.currentMap.onMouseMove, false);
			mapCanvas.addEventListener("mousedown", game.currentMap.onMouseDown, false);
			mapCanvas.addEventListener("mouseup", game.currentMap.onMouseUp, false);
			mapCanvas.addEventListener("dblclick", game.currentMap.onDoubleClick, false);
		}
		else if (mapCanvas.attachEvent) {
			mapCanvas.attachEvent("onmousemove", game.currentMap.onMouseMove);
			mapCanvas.attachEvent("onmousedown", game.currentMap.onMouseDown);
			mapCanvas.attachEvent("onmouseup", game.currentMap.onMouseUp);
			mapCanvas.attachEvent("ondblclick", game.currentMap.onDoubleClick, false);
		}
	},

	attachNavigatorEvents: function () {
		if (!mapNav) {
			mapNav = new WP.Navigator()
			mapNav.refresh()
		};

		if (navigatorCanvas.addEventListener) {
			navigatorCanvas.addEventListener("mousemove", mapNav.onMouseMove, false);
			navigatorCanvas.addEventListener("mousedown", mapNav.onMouseDown, false);
			navigatorCanvas.addEventListener("mouseup", mapNav.onMouseUp, false);
		}
		else if (navigatorCanvas.attachEvent) {
			navigatorCanvas.attachEvent("onmousemove", mapNav.onMouseMove);
			navigatorCanvas.attachEvent("onmousedown", mapNav.onMouseDown);
			navigatorCanvas.attachEvent("onmouseup", mapNav.onMouseUp);
		}
	},

	attachToolbarEvents: function () {
		$("#buttonAttrition").click(function () { WP.Attrition.UI.handleMenuButton(); });
		$("#buttonCodebreaking").click(function () { WP.Codebreaking.UI.handleMenuButton(); });
		$("#buttonDiplomacy").click(function () { WP.Diplomacy.UI.handleMenuButton(); });
		$("#buttonForcepool").click(function () { WP.Forcepool.UI.handleMenuButton(); });
		$("#buttonHexControl").click(function () { WP.HexControl.UI.handleMenuButton(); });
		$("#buttonNewspaper").click(function () { WP.Tables.UI.handleMenuButton(); });
		$("#buttonNewUnit").click(function () { WP.NewUnit.UI.handleMenuButton(); });
		$("#buttonResearch").click(function () { WP.ResearchDisplay.UI.handleMenuButton(); });
		$("#buttonSettings").click(function () { WP.GameSettings.UI.handleMenuButton(); });
        $("#buttonShipyards").click(function () { WP.Shipyard.UI.handleMenuButton(); });
		$("#buttonShipsAtSea").click(function () { WP.ShipsAtSea.UI.handleMenuButton(); });
		$("#buttonSwitchTheaters").click(function () { game.switchTheaters(); });
		$("#buttonTaskForces").click(function () { WP.Taskforce.UI.handleMenuButton(); });
		$("#buttonUnitCounter").click(function () { WP.UnitCounter.UI.handleMenuButton(); });

	}
}

WP.Eventing.Keyboard = {
	handleKeyDown: function (keyCode) {
		keyPress = keyCode;
		var map = game.currentMap;
		var unit = game.selectedUnit;
		var hex = game.currentMap.currentHex;
		switch (keyPress) {
			case 27: 
				WP.Eventing.Keyboard.handleEsc(unit, map);
				break;
			case 46: 
				WP.Eventing.Keyboard.handleDeleteKey(unit);
				break;
			case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:
				WP.Eventing.Keyboard.handleNumberKey(keyPress, unit, map);
				break;
			case 67: 
				WP.Eventing.Keyboard.handleC(unit, map, hex);
				break;
			case 68: 
				WP.Eventing.Keyboard.handleD(unit, map, hex);
				break;
			case 69: 
				WP.Eventing.Keyboard.handleE(unit, map, hex);
				break;
			case 73: 
				WP.Eventing.Keyboard.handleI(unit, map, hex);
				break;
			case 76: 
				WP.Eventing.Keyboard.handleL(unit, map, hex);
				break;
			case 83: 
				WP.Eventing.Keyboard.handleS(unit, map, hex);
				break;
			case 88: 
				WP.Eventing.Keyboard.handleX(unit, map, hex);
				break;
			default:
				break;
		}
	},

	handleC: function (unit, map, hex) {
		if (!unit) return;
		if (!unit.onMap()) return;
		if (!hex) return;
		hex.combineAllUnits(unit);
		WP.Eventing.Keyboard.handlePostKeyboardAction(unit, map, hex);
	},

	handleD: function (unit, map, hex) {
		if (!unit) return;
		if (unit.canBeDamaged())
			unit.damaged = !unit.damaged;
		WP.Eventing.Keyboard.handlePostKeyboardAction(unit, map, hex);
	},

	handleE: function (unit, map, hex) {
		if (!unit) return;
		unit.eliminated = !unit.eliminated;
		WP.Eventing.Keyboard.handlePostKeyboardAction(unit, map, hex);
	},

	handleI: function (unit, map, hex) {
		if (!unit) return;
		if (unit.canBeInverted())
			unit.inverted = !unit.inverted;
		if (unit.canBeIsolated())
			unit.isolated = !unit.isolated;
		WP.Eventing.Keyboard.handlePostKeyboardAction(unit, map, hex);
	},

	handleL: function (unit, map, hex) {
	},



	handleDeleteKey: function (unit) {
		if (unit && unit.onMap()) {
			if (unit.hex) {
				var hex = unit.hex;
				hex.removeUnit(unit);
			}
			unit.returnToForcepool();
			WP.Eventing.Keyboard.handlePostKeyboardAction(unit, map, hex);
		}
	},

	handleEsc: function (unit, map) {
		WP.Misc.Ui.closeAllDialogs();
		var hex;
		if (unit) hex = unit.hex;

		game.state = 0;
		game.selectedUnit = null;
		WP.Eventing.Keyboard.handlePostKeyboardAction(unit, map, hex);
		map.redrawHexesContainingUnits(game.getAllHighlightedUnits());
	},

	handleNumberKey: function (keyPress, unit, map) {
		if (!unit) return;
		var hex = unit.hex;
		unit = unit.breakdownAndCreate(-(48 - keyPress));
		if (hex)
			hex.addUnit(unit);
		WP.Eventing.Keyboard.handlePostKeyboardAction(unit, map, hex);
	},

	handleKeyUp: function () {
		keyPress = null;
	},

	handlePostKeyboardAction: function (unit, map, hex) {
		game.selectedUnit = null;
		if (hex) {
			hex.clear();
			hex.draw();
			map.displayMapUnitsInHexInfo(true);
			return;
		}
		if (unit) {
			if (forcepool && unit.inForcepool()) {
				forcepool.draw();
				return;
			}
		}
	},

	handleS: function (unit, map, hex) {
		if (!unit) return;
		if (unit.canSink())
			unit.sunk = !unit.sunk;
		WP.Eventing.Keyboard.handlePostKeyboardAction(unit, map, hex);
	},

	handleX: function (unit, map, hex) {
		if (!unit) return;
		if (unit.canExploit())
			unit.exploiting = !unit.exploiting;
		WP.Eventing.Keyboard.handlePostKeyboardAction(unit, map, hex);
	}
}

function ctrlPressed() {
	if (keyPress == 17) return true;
	return false;
}

function shiftPressed() {
	if (keyPress == 16) return true;
	return false;
}

'use strict';

WP.Unit = class {
    constructor () {
        this.id = -1;
        this.fpg = 0;
        this.type = null;
        this.name = null;
        this.size = 41;
        this.factorable = false;

        this.strength = 0;
        this.movement = 0;

        this.location = 0;

        this.hex = null;
        this.image = null;
        this.owner = null;

        this.taskforceOwner = null;
        this.yard = null;
        this.holderX = null;
        this.holderY = null;

        this.damaged = false;
        this.eliminated = false;
        this.highlight = null;
        this.slow = false;
        this.sunk = false;
        this.inverted = false;
        this.exploiting = false;
        this.isolated = false;
    }



        static unitBuilder (id, fpg, type, name, strength, moves, location, slow, sunk, damaged, inverted, exploiting, isolated) {
        var unit = new WP.Unit();
		unit.id = id;
		unit.fpg = fpg;
		unit.type = type;
		unit.name = name;
		unit.strength = strength;
		unit.movement = moves;
		unit.location = location;
		unit.slow = slow;
		unit.sunk = sunk;
		unit.damaged = damaged;
		unit.inverted = inverted;
		unit.exploiting = exploiting;
		unit.isolated = isolated;

		switch (type.toLowerCase()) {
			case "aaf":
			case "aas-attack":
			case "aas-cover":
			case "aas-search":
			case "advsub":
			case "airtransport": case "at":
			case "asw":
			case "avg":
			case "bomber":
			case "pacificbomber":
			case "partialsupply":
			case "cruiser":
			case "cve":
			case "damage":
			case "destroyer": case "dd":
			case "enas": case "elitenas":
			case "flak":
			case "grant":
			case "ic":
			case "interceptor":
			case "isolation":
			case "jet":
			case "kamikaze":
			case "nas":
			case "oil":
			case "oilplant":
			case "sub":
			case "transport": case "tr":
				unit.factorable = true;
				break;
			default:
				unit.factorable = false;
				break;
		}
		return unit;
	}

        canBeCountedInAttrition () {
        if (this.factorable) return false;
        if (this.strength < 1) return false;
        switch (this.type.toLowerCase()) {
            case "airborne":
            case "armor": case "arm":
            case "chindit":
            case "commando":
            case "infantry": case "i":
            case "marine":
            case "mechanized": case "mech":
                return true;
            default: return false;
        }
	return false;
    }


        canBeDamaged () {
        switch (this.type.toLowerCase()) {
            case "battleship": case "bb": case "b": case "bc":
            case "carrier": case "cv": case "cve":
            case "transport": case "tr":
            case "cruiser":
            case "cve":
            case "destroyer": case "dd":
            case "oilplant":
            case "fortress":
            case "ic":
            return true;
		default: return false;
	   }
    }


        canBeInverted () {
        switch (this.type.toLowerCase()) {
            case "battleship": case "bb": case "b": case "bc":
            case "carrier": case "cv": case "cve":
            case "transport": case "tr":
            case "cruiser":
            case "cve":
            case "destroyer": case "dd":
            case "aaf":
            case "nas":
            case "enas":
            case "kamikaze":
            case "sub":
            case "advsub":
            case "aas-cover":
            case "aas-attack":
            case "aas-search":
            case "avg":
            case "bomber":
            case "interceptor":
            case "oil":
            case "jet":
            case "jetsquadron":
            case "taskforce":
			return true;
		default: return false;
	   }
    }
    canBeIsolated () {
        switch (this.type.toLowerCase()) {
            case "infantry": case "i":
            case "mechanized": case "mech":
            case "armor": case "arm":
            case "airborne":
            case "marine":
            case "chindit":
            case "commando":
            case "replacement":case "rep":
                return true;
            default: return false;
        }
    }


        canSink () {
      	switch (this.type.toLowerCase()) {
            case "battleship": case "bb": case "b": case "bc": case "pb":
            case "carrier": case "cv": case "cve":
            case "transport":
            case "cruiser":
            case "cve":
            case "destroyer": case "dd":
                return true;
            default: return false;
        }
        return false;         
    }


               breakdownAndCreate (size) {
        if (size >= this.strength) return;
        var oldUnit = this;
        oldUnit.strength -= size;
        var unit = WP.Unit.unitBuilder(this.id, this.fpg, this.type, this.name, size | 0, this.movement, this.location, this.slow, this.sunk, this.damaged, this.inverted);
        oldUnit.owner.addUnit(unit);
        return unit;
    }

    canCombineWith (unit) {
        if (unit == this) { return false }
        if (!unit.factorable) { return false }
        if (unit.type != this.type) {
            var trans = /^tr$|transport/ 
            if (!(trans.test(unit.type) || !(trans.test(this.type))))
            return false }
        if (unit.type == "ASW" || unit.type == "transport" || unit.type == "tr") {
            var alliesPattern = /US|Britain/
            if (alliesPattern.test(unit.owner.name) && alliesPattern.test(this.owner.name)) {
                return true
            }
        }
        if (unit.owner != this.owner) { return false;}
        return true;
    }


        canExploit (){
       if (this.type == "armor" || "arm") return true;
	   return false;       
    }

    findStackThatMatches (stacks) {
        var res = -1
        var _this = this
        stacks.forEach((stack, i) => {
            if (_this.unitTypeExistsInStack(stack)) { res = i }
         })
        return res
    }


    findStackWithSameAddress (stacks) {
        var res = -1
        var _this = this
        stacks.forEach((stack, i) => {
            if (_this.unitHasSameAddress(stack)) { res = i }
        })
        return res
    }

        inForcepool () {
        if (this.location == 1) { return true }
        return false
    }

    onMap () {
        if (this.location == 2) { return true }
        return false
    }
    returnToForcepool () {
        this.location = 1
        this.fpg = 0

        if (this.factorable) {
            for (var i = 0; i < this.owner.units.length; i++) {
                var unit = this.owner.units[i]
                if (unit == this) continue
                if (unit.location != 1 || unit.fpg != 0) continue
                if (unit.canCombineWith(this)) {
                    unit.strength += this.strength
                    this.owner.removeUnit(this)
                    break
                }
            }
        }
    }

    setShipyardAddress (yard, x, y){
       this.yard = yard
	   this.holderX = x
	   this.holderY = y
    }

    setTaskforceAddress (tfOwner, x, y) {
        this.taskforceOwner = tfOwner
        this.holderX = x
        this.holderY = y
    }
    unitHasSameAddress (stack) {
        var _this = this
        return stack.units.some(unit => (unit.holderX == _this.holderX) && (unit.holderY == _this.holderY))
    }
    unitTypeExistsInStack (stack) {
        var _this = this
        return stack.units.some(unit => (unit.type == _this.type) && (unit.strength = _this.strength))
    }

    }

'use strict';





WP.Unit.UI = {

	drawBase: function (ctx, unit) {
		var arc = Math.floor(unit.size / 14.33);

		ctx.lineWidth = 0;
		ctx.fillStyle = WP.Unit.UI.getShadowColor(unit.owner.backColor).toRgb();
		ctx.strokeStyle = ctx.fillStyle;
		ctx.roundRect(0, 0, unit.size + 1, unit.size + 1, arc);

		ctx.fill();
		ctx.stroke();

		ctx.fillStyle = unit.owner.backColor.toRgb();
		ctx.strokeStyle = ctx.fillStyle;
			ctx.roundRect(1, 1, unit.size - .5, unit.size - .5, arc);

		ctx.fill();
		ctx.stroke();
		var owner = unit.owner.name.toLowerCase()
		if ((owner == "vlasov") || (owner == "wang") || (owner == "indian nat. army")) { WP.Unit.UI.drawGradientBackground(ctx, unit); }
	},

	drawColorRect: function (ctx, x, y, w, h, color) {
        var boxColor
		var blackLineColor = new WP.Color(0, 0, 0);
		var blueBoxColor = new WP.Color(11, 128, 244);
		var yellowBoxColor = new WP.Color(238, 237, 41);
		var darkpurpleBoxColor = new WP.Color(150, 87, 180);
		if (color == "blue") { boxColor = blueBoxColor; }
		else if (color == "yellow") { boxColor = yellowBoxColor; }
		else if (color == "purple") { boxColor = darkpurpleBoxColor; }
		ctx.lineWidth = 1;
		ctx.strokeStyle = blackLineColor.toRgb();
		ctx.strokeRect(x, y, w, h);
		ctx.fillStyle = boxColor.toRgb();
		ctx.fillRect(x, y, w, h);
	},

	drawDamaged: function (ctx, unit) {
		var burningShip = new Image();
		burningShip.src = "content/units/burning_ship.gif";
		ctx.drawImage(burningShip, 0, 11);
	},

	drawEllipse: function (ctx, x, y, w, h, color, linewidth) {
		var kappa = 0.5522848;
        var ox, oy, xe, ye, xm, ym
		ox = (w / 2) * kappa, 		
				oy = (h / 2) * kappa, 
				xe = x + w,           
				ye = y + h,           
				xm = x + w / 2,       
				ym = y + h / 2;       
		ctx.lineWidth = linewidth;
		ctx.strokeStyle = color.toRgb();
		ctx.beginPath();
		ctx.moveTo(x, ym);
		ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
		ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
		ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
		ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
		ctx.closePath();
		ctx.stroke();
	},

	drawExploiting: function (ctx, unit) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1, unit.owner.foreColor, [12.5], [8.5], [24.5, 8.5], [29, 12.5, 24.5, 16.5], [12.5, 16.5], [8, 12.5, 12.5, 8.5]);
	},

	drawEliminated: function (ctx, unit) {
		ctx.lineWidth = 1;
		for (var i = 7; i < 40; i += 7) {
			ctx.strokeStyle = new WP.Color(150, 107, 180).toRgb();
			ctx.beginPath();
			ctx.moveTo(2, 40- i);
			ctx.lineTo(i, 38);
			ctx.closePath();
			ctx.stroke();
			ctx.beginPath();
			ctx.moveTo(38, i);
			ctx.lineTo(40 - i, 2);
			ctx.closePath();
			ctx.stroke();
		}
	},

	drawFlagOutline: function (ctx) {
		ctx.lineWidth = 1;
		ctx.strokeStyle = new WP.Color(10, 10, 10).toRgb();
		ctx.strokeRect(6.5, 3.5, 27, 19);
	},

	drawGradientBackground: function (ctx, unit) {
		var black = new WP.Color(40, 40, 40);
		var backgrad = ctx.createLinearGradient(0, 0, 0, 41);
		backgrad.addColorStop(0, unit.owner.backColor.toRgb())
		backgrad.addColorStop(1, black.toRgb())
		ctx.fillStyle = backgrad;
		ctx.fillRect(0, 0, 41, 41);
	},

	drawHighlight: function (ctx, unit) {
		var arc = Math.floor(unit.size / 14.33);
		ctx.lineWidth = 4;
		if (unit.highlight)
			ctx.strokeStyle = unit.highlight;
		else
			ctx.strokeStyle = new WP.Color(193, 215, 193).toRgb();

		ctx.roundRect(2, 2, unit.size - 1.5, unit.size - 1.5, arc);
		ctx.stroke();
	},

	drawInverted: function (ctx, unit) {
		ctx.lineWidth = 1;
		for (var i = 7; i < 40; i += 7) {
			ctx.strokeStyle = unit.owner.foreColor.toRgb();
			ctx.beginPath();
			ctx.moveTo(2, i);
			ctx.lineTo(i, 2);
			ctx.closePath();
			ctx.stroke();
			ctx.beginPath();
			ctx.moveTo(38, 40 - i);
			ctx.lineTo(40 - i, 38);
			ctx.closePath();
			ctx.stroke();
		}
	},

	drawIsolated: function (ctx, unit) {
		ctx.lineWidth = 1;
		ctx.strokeStyle = unit.owner.foreColor.toRgb();
		ctx.beginPath();
		ctx.moveTo(2, 2);
		ctx.lineTo(38, 38);
		ctx.moveTo(2, 38);
		ctx.lineTo(38, 2);
		ctx.closePath();
		ctx.stroke();
	},

	drawOutline: function (ctx, args) {
		for (var step = 5; step < args.length; step++) {
			var coords = args[step];
			var len = coords.length;
			if (len == 1) { ctx.moveTo(coords[0], args[++step][0]); }
			else if (len == 2) { ctx.lineTo(coords[0], coords[1]) }
			else if (len == 4) { ctx.quadraticCurveTo(coords[0], coords[1], coords[2], coords[3]); }
			else if (len == 6) { ctx.bezierCurveTo(coords[0], coords[1], coords[2], coords[3], coords[4], coords[5]); }
		}
	},

	drawReflection: function (ctx, args, mirror) {
		mirror = mirror * 2
		for (var step = 5; step < args.length; step++) {
			var coords = args[step];
			var len = coords.length;
			if (len == 1) { ctx.moveTo(mirror - coords[0], args[++step][0]); }
			else if (len == 2) { ctx.lineTo(mirror - coords[0], coords[1]); }
			else if (len == 4) { ctx.quadraticCurveTo(mirror - coords[0], coords[1], mirror - coords[2], coords[3]); }
			else if (len == 6) { ctx.bezierCurveTo(mirror - coords[0], coords[1], mirror - coords[2], coords[3], mirror - coords[4], coords[5]); }
		}
	},

	drawSharedAlliedBase: function (ctx, unit) {
		var tan = new WP.Color(151, 172, 108); 
		var olive = new WP.Color(209, 188, 140); 
		ctx.fillStyle = tan.toRgb();
		ctx.fill();
		ctx.lineWidth = 0;
		ctx.beginPath();
		ctx.moveTo(0, 0);
		ctx.lineTo(unit.size, unit.size);
		ctx.lineTo(0, unit.size);
		ctx.lineTo(0, 0);
		ctx.fillStyle = olive.toRgb();
		ctx.fill();
		ctx.stroke();
	},

	drawShield: function (ctx, unit) {
		var start = new Point(adjust(8), adjust(7));
		var width = Math.floor(unit.size / 1.9);
		var height = Math.floor(unit.size / 3.5);
		ctx.lineWidth = 1;
		ctx.strokeStyle = unit.owner.lineColor.toRgb();
		ctx.strokeRect(start.x, start.y, width, height);
		ctx.fillStyle = unit.owner.innerColor.toRgb();
		ctx.fillRect(start.x, start.y, width, height);
	},

	drawSunk: function (ctx, unit) {
		var seaCol = new WP.Color(53, 178, 202);
		var skyCol = new WP.Color(210, 240, 255);
		var seabedCol = new WP.Color(130, 205, 210);
		ctx.fillStyle = seaCol.toRgb();
		ctx.fillRect(0.5, 12, 39, 13);
		ctx.fillStyle = seabedCol.toRgb();
		ctx.fillRect(0.5, 21, 39, 4);
		if (unit.hex.isPort) { ctx.fillStyle = skyCol.toRgb(); ctx.fillRect(1, 12, 40, 4); }
	},

	drawNavalColorBox: function (ctx, color) {
		var useCol
		if (color == "orange") { useCol = new WP.Color(240, 154, 49); }
		else if (color == "purple") { useCol = new WP.Color(180, 147, 190); }
		else if (color == "yellow") { useCol = new WP.Color(238, 237, 41); }
		ctx.fillStyle = useCol.toRgb();
		ctx.fillRect(0.5, 12, 39, 13);
	},

	drawUnitTexture: function (ctx) {


                var dark = "rgba(20, 20, 70, 0.7)"
        var clear = "rgba(10, 10, 10, 0.1)"

                var unitShading = ctx.createRadialGradient(20, 12, 14, 20, 25, 60)

  	    var dark = "rgba(70, 70, 70, 0.7)"
        var clear = "rgba(10, 10, 10, 0)"
        var light = "rgba(220, 220, 220, .2)"

                var unitShading = ctx.createRadialGradient(20, 12, 11, 20, 20, 50)
        unitShading.addColorStop(0, clear)
        unitShading.addColorStop(1, dark)
        ctx.fillStyle = unitShading
        ctx.fillRect(0, 0, 42, 42)

                var highlight = ctx.createRadialGradient(28, 8, 5, 15, 15, 30)
        highlight.addColorStop(0, light)
        highlight.addColorStop(1, clear)
        ctx.fillStyle = highlight
        ctx.fillRect(0, 0, 42, 42)



	},

	drawWhiteBase: function (ctx, unit) {
		var bc = unit.owner.backColor;
		unit.owner.backColor = new WP.Color(245, 245, 245);
		WP.Unit.UI.drawBase(ctx, unit);
		unit.owner.backColor = bc;
	},

	fillEllipse: function (ctx, x, y, w, h, color, linewidth) {
		WP.Unit.UI.drawEllipse(ctx, x, y, w, h, color, linewidth)
		ctx.fillStyle = color.toRgb();
		ctx.fill();
	},

	getHighlightColor: function (color) {
		var mod = 30;

		var r = color.red + mod;
		var g = color.green + mod;
		var b = color.blue + mod;

		if (r > 255) r = 255;
		if (g > 255) g = 255;
		if (b > 255) b = 255;
		return new WP.Color(r, g, b);
	},

	getShadowColor: function (color) {
		var mod = 30;

		var r = color.red - mod;
		var g = color.green - mod;
		var b = color.blue - mod;

		if (r < 0) r = 0;
		if (g < 0) g = 0;
		if (b < 0) b = 0;
		return new WP.Color(r, g, b);
	},

	makeShape: function () {
		var args = arguments
		var ctx = args[0];
		var doFill = args[1];
		var mirror = args[2];
		ctx.lineWidth = args[3];
		var color = args[4];
		ctx.beginPath();
		ctx.strokeStyle = color.toRgb();
		WP.Unit.UI.drawOutline(ctx, args);
		if (mirror) { WP.Unit.UI.drawReflection(ctx, args, mirror); }
		if (doFill) { ctx.fillStyle = color.toRgb(); ctx.fill(); }
		ctx.stroke(); ctx.closePath();
	}
}

WP.Unit.prototype.draw = function (ctx, x, y) {
	ctx.save();
	x = Math.floor(x);
	y = Math.floor(y);
	ctx.translate(x, y);
	WP.Unit.UI.drawBase(ctx, this);
	switch (this.type.toLowerCase()) {
		case "aaf": WP.Unit.UI.Air.drawAaf(ctx, this); break;
		case "aas-attack": WP.Unit.UI.Air.drawAasAttack(ctx, this); break;
		case "aas-cover": WP.Unit.UI.Air.drawAasCover(ctx, this); break;
		case "aas-search": WP.Unit.UI.Air.drawAasSearch(ctx, this); break;
		case "advsub": case "adv sub": WP.Unit.UI.Naval.drawAdvSub(ctx, this); break;
		case "airbase": WP.Unit.UI.Misc.drawAirbase(ctx, this); break;
		case "airborne": WP.Unit.UI.Ground.drawAirborne(ctx, this); break;
		case "airtransport": case "at": case "air trans": WP.Unit.UI.Air.drawAirTransport(ctx, this); break;
		case "alliedpartisan": WP.Unit.UI.Ground.drawAlliedPartisan(ctx, this); break;
		case "armor": case "arm": WP.Unit.UI.Ground.drawArmor(ctx, this); break;
		case "asw": WP.Unit.UI.Naval.drawAsw(ctx, this); break;
		case "atomicattack": case "atomic attack": WP.Unit.UI.Misc.drawAtomicAttack(ctx, this); break;
		case "avg": WP.Unit.UI.Air.drawAvg(ctx, this); break;
		case "axispartisan": WP.Unit.UI.Ground.drawAxisPartisan(ctx, this); break;
		case "battleship": case "b": case "bc": case "pb": WP.Unit.UI.Naval.drawBattleship(ctx, this); break;
		case "beachdefense": WP.Unit.UI.Misc.drawBeachDefense(ctx, this); break;
		case "bomber": WP.Unit.UI.Air.drawBomber(ctx, this); break;
		case "pacificbomber": case "pac bomber": WP.Unit.UI.Air.drawPacificBomber(ctx, this); break;
		case "partialsupply": WP.Unit.UI.Misc.drawPartialSupply(ctx, this); break;
		case "breakthrough": WP.Unit.UI.Misc.drawBreakthrough(ctx, this); break;
		case "bridgehead": WP.Unit.UI.Misc.drawBridgehead(ctx, this); break;
		case "chindit": WP.Unit.UI.Ground.drawChindit(ctx, this); break;
		case "commando": WP.Unit.UI.Ground.drawCommando(ctx, this); break;
		case "communistpartisan": case "compartisan": WP.Unit.UI.Ground.drawCommunistPartisan(ctx, this); break;
		case "cruiser": WP.Unit.UI.Naval.drawCruiser(ctx, this); break;
		case "carrier": case "cv": WP.Unit.UI.Naval.drawCarrier(ctx, this); break;
		case "cve": WP.Unit.UI.Naval.drawCve(ctx, this); break;
		case "damage": WP.Unit.UI.Misc.drawDamage(ctx, this); break;
		case "destroyer": case "dd": WP.Unit.UI.Naval.drawDestroyer(ctx, this); break;
		case "done": WP.Unit.UI.Misc.drawDone(ctx, this); break;
		case "enas": case "elitenas": WP.Unit.UI.Air.drawEnas(ctx, this); break;
		case "exploit": WP.Unit.UI.Misc.drawExploit(ctx, this); break;
		case "firestorm": WP.Unit.UI.Misc.drawFireStorm(ctx, this); break;
		case "flak": WP.Unit.UI.Misc.drawFlak(ctx, this); break;
		case "fortress": case "ft": WP.Unit.UI.Misc.drawFortress(ctx, this); break;
		case "grant": WP.Unit.UI.Misc.drawGrant(ctx, this); break;
		case "ic": case "IC": WP.Unit.UI.Misc.drawIc(ctx, this); break;
		case "infantry": case "i": WP.Unit.UI.Ground.drawInfantry(ctx, this); break;
		case "information": case "inf": WP.Unit.UI.Misc.drawInformation(ctx, this); break;
		case "interceptor": WP.Unit.UI.Air.drawInterceptor(ctx, this); break;
		case "isolation": WP.Unit.UI.Misc.drawIsolation(ctx, this); break;
		case "jet": WP.Unit.UI.Air.drawJet(ctx, this); break;
		case "jetsquadron": WP.Unit.UI.Air.drawJetSquadron(ctx, this); break;
		case "kamikaze": WP.Unit.UI.Air.drawKamikaze(ctx, this); break;
		case "lent": WP.Unit.UI.Misc.drawLent(ctx, this); break;
		case "marine": WP.Unit.UI.Ground.drawMarine(ctx, this); break;
		case "mechanized": case "mech": WP.Unit.UI.Ground.drawMechanized(ctx, this); break;
		case "nas": WP.Unit.UI.Air.drawNas(ctx, this); break;
		case "oil": WP.Unit.UI.Misc.drawOil(ctx, this); break;
		case "oilplant": WP.Unit.UI.Misc.drawOilPlant(ctx, this); break;
		case "partisan": case "pw": case "px": case "pc": WP.Unit.UI.Ground.drawPartisan(ctx, this); break;
		case "port": WP.Unit.UI.Misc.drawPort(ctx, this); break;
		case "railhead": WP.Unit.UI.Misc.drawRailhead(ctx, this); break;
		case "replacement": case "rep": WP.Unit.UI.Ground.drawReplacement(ctx, this); break;
		case "rocket": WP.Unit.UI.Misc.drawRocket(ctx, this); break;
		case "spyring": WP.Unit.UI.Misc.drawSpyRing(ctx, this); break;
		case "sub": WP.Unit.UI.Naval.drawSub(ctx, this); break;
		case "taskforce": WP.Unit.UI.Naval.drawTaskForce(ctx, this); break;
		case "transport": case "tr": WP.Unit.UI.Naval.drawTransport(ctx, this); break;
		case "turn": WP.Unit.UI.Misc.drawTurn(ctx, this); break;
		default: alert("Unknown unit type: " + this.type + ".");
	}

	if (this.eliminated) { WP.Unit.UI.drawEliminated(ctx, this); }
	else if (this.inverted) { WP.Unit.UI.drawInverted(ctx, this); }
	else if (this.isolated) { WP.Unit.UI.drawIsolated(ctx, this); }
	if (this.damaged) { WP.Unit.UI.drawDamaged(ctx, this); }
	if (this.exploiting) { WP.Unit.UI.drawExploiting(ctx, this); }
	if (this.lent) { WP.Unit.UI.Misc.drawLent(ctx, this); }
	if (game.showUnitTexture == true) { WP.Unit.UI.drawUnitTexture(ctx); }
	if (game.selectedUnit == this || this.highlight)
		WP.Unit.UI.drawHighlight(ctx, this);

	ctx.restore();
}

WP.Unit.UI.Air = {

	drawAaf: function (ctx, unit) {
		WP.Unit.UI.drawShield(ctx, unit);
		if (unit.lent) { WP.Unit.UI.Misc.drawLent(ctx, unit); }
		var lc = unit.owner.lineColor
		WP.Unit.UI.drawEllipse(ctx, 10.5, 9.5, 8, 6, lc, 1);
		WP.Unit.UI.drawEllipse(ctx, 18.5, 9.5, 8, 6, lc, 1);
		WP.Unit.UI.Text.writeStrengthAndMovement(ctx, unit);
		WP.Unit.UI.Text.writeDesignation(ctx, unit);
	},

	drawAasAttack: function (ctx, unit) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 0, unit.owner.innerColor, [5], [8], [unit.size - 5, 8], [unit.size / 2, unit.size - 6]);
		WP.Unit.UI.Air.drawAas(ctx, unit);
		WP.Unit.UI.Text.writeAutoGenericText(ctx, unit, "ATTACK", "bold 8px verdana", 21, 10);
		WP.Unit.UI.Text.writeBottomMiddleStrength(ctx, unit);
	},

	drawAasCover: function (ctx, unit) {
		ctx.fillStyle = unit.owner.innerColor.toRgb();
		ctx.fillRect(5, 8, 33, 29);
		WP.Unit.UI.Air.drawAas(ctx, unit);
		WP.Unit.UI.Text.writeAutoGenericText(ctx, unit, "COVER", "bold 8px verdana", 21, 10);
		WP.Unit.UI.Text.writeBottomMiddleStrength(ctx, unit);
	},

	drawAasSearch: function (ctx, unit) {
		ctx.fillStyle = unit.owner.innerColor.toRgb();
		WP.Unit.UI.drawEllipse(ctx, 6.5, 8, 28, 28, unit.owner.innerColor, 1);
		ctx.fill();
		WP.Unit.UI.Air.drawAas(ctx, unit);
		WP.Unit.UI.Text.writeAutoGenericText(ctx, unit, "SEARCH", "bold 8px verdana", 21, 10);
		WP.Unit.UI.Text.writeBottomMiddleStrength(ctx, unit);
	},

	drawAirTransport: function (ctx, unit) {
		var white = new WP.Color(255, 255, 255);
		WP.Unit.UI.drawEllipse(ctx, 9.5, 3, 20, 20, white, 1.3);
		if (unit.owner.name.toLowerCase() == "japan") { WP.Unit.UI.Air.drawTrans(ctx, unit.owner.foreColor); }
		else { WP.Unit.UI.Air.drawTrans(ctx, white); }
		WP.Unit.UI.Text.writeStrengthAndMovement(ctx, unit);
		unit.name = "Air Trans";
		WP.Unit.UI.Text.writeDesignation(ctx, unit);
	},

	drawAvg: function (ctx, unit) {
		var bc = unit.owner.backColor;
		var fc = unit.owner.foreColor;
		var ic = unit.owner.innerColor;
		var lc = unit.owner.lineColor;
		unit.owner.lineColor = new WP.Color(255, 255, 255);
		unit.owner.backColor = new WP.Color(255, 154, 49);
		unit.owner.foreColor = new WP.Color(40, 40, 40);
		unit.owner.innerColor = new WP.Color(0, 154, 206);

		WP.Unit.UI.drawBase(ctx, unit);
		WP.Unit.UI.drawShield(ctx, unit);
		if (unit.lent) { WP.Unit.UI.Misc.drawLent(ctx, unit); }
		WP.Unit.UI.drawEllipse(ctx, 10.5, 9.5, 8, 6, unit.owner.lineColor, 1);
		WP.Unit.UI.drawEllipse(ctx, 18.5, 9.5, 8, 6, unit.owner.lineColor, 1);
		WP.Unit.UI.Text.writeStrengthAndMovement(ctx, unit);
		WP.Unit.UI.Text.writeDesignation(ctx, unit);

		unit.owner.backColor = bc;
		unit.owner.foreColor = fc;
		unit.owner.innerColor = ic;
		unit.owner.lineColor = lc;
	},

	drawPacificBomber: function (ctx, unit) {
		WP.Unit.UI.drawColorRect(ctx, 2, 2, 37, 22, "yellow");
		var color = new WP.Color(245, 245, 235);
		WP.Unit.UI.Text.writeDoubleGenericText(ctx, unit, "B", 'bold 8px verdana', 7, 20)
		WP.Unit.UI.Text.writeDoubleGenericText(ctx, unit, "Pac", 'bold 8px tahoma', 31, 20)
		WP.Unit.UI.Text.writeBottomMiddleStrength(ctx, unit);
		WP.Unit.UI.Air.drawUsB29(ctx, unit, color);
	},

	drawBomber: function (ctx, unit) {
		WP.Unit.UI.drawColorRect(ctx, 2, 2, 37, 22, "blue");
		var color = new WP.Color(245, 245, 235);
		WP.Unit.UI.Text.writeDoubleGenericText(ctx, unit, "B", 'bold 8px verdana', 7, 20, color)
		WP.Unit.UI.Text.writeBottomMiddleStrength(ctx, unit);
		switch (unit.owner.name.toLowerCase()) {
			case "britain": WP.Unit.UI.Air.drawGbBom(ctx, unit, color); break;
			case "america": case "unitedstates": case "united states": case "us": WP.Unit.UI.Air.drawUsB17(ctx, unit, color); break;
			case "russia": WP.Unit.UI.Air.drawRuBom(ctx, unit, color); break;
			default: WP.Unit.UI.Air.drawGeBom(ctx, unit, color); break;
		}
	},

	drawInterceptor: function (ctx, unit) {
		WP.Unit.UI.drawColorRect(ctx, 2, 2, 37, 22, "blue");
		WP.Unit.UI.Text.writeBottomMiddleStrength(ctx, unit);
		var color = new WP.Color(255, 255, 255);
		WP.Unit.UI.Text.writeDoubleGenericText(ctx, unit, "Int", 'bold 8px tahoma', 9, 20, color)
		switch (unit.owner.name.toLowerCase()) {
			case "britain": WP.Unit.UI.Air.drawGbInt(ctx, unit, color); break;
			case "america": case "unitedstates": case "united states": case "us": WP.Unit.UI.Air.drawUsInt(ctx, unit, color); break;
			case "russia": WP.Unit.UI.Air.drawRuInt(ctx, unit, color); break;
			default: WP.Unit.UI.Air.drawGeInt(ctx, unit, color); break;
		}
	},

	drawJet: function (ctx, unit) {
		WP.Unit.UI.Text.writeBottomLeftStrength(ctx, unit);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, "Jet", 'bold 12px arial', 25, 38);
		switch (unit.owner.name.toLowerCase()) {
			case "britain": WP.Unit.UI.Air.drawGbJet(ctx, unit); break;
			case "america": case "unitedstates": case "united states": case "us": WP.Unit.UI.Air.drawUsJet(ctx, unit); break;
			case "germany": case "japan": WP.Unit.UI.Air.drawGeJet(ctx, unit); break;
			default: WP.Unit.UI.Air.drawRuJet(ctx, unit); break;
		}
	},

	drawKamikaze: function (ctx, unit) {
		var fc = unit.owner.foreColor;
		unit.owner.foreColor = new WP.Color(255, 130, 110);
		WP.Unit.UI.drawBase(ctx, unit);
		WP.Unit.UI.Air.drawJaNas(ctx, unit);
		WP.Unit.UI.Text.writeStrengthAndMovement(ctx, unit);
		unit.owner.foreColor = fc;
	},

	drawEnas: function (ctx, unit) {
		var bc = unit.owner.backColor;
		var fc = unit.owner.foreColor;
		var ic = unit.owner.innerColor;
		unit.owner.backColor = new WP.Color(246, 246, 0);
		unit.owner.foreColor = new WP.Color(40, 40, 40);
		WP.Unit.UI.drawBase(ctx, unit);
		WP.Unit.UI.Air.drawJaNas(ctx, unit);
		WP.Unit.UI.Text.writeStrengthAndMovement(ctx, unit);
		unit.owner.backColor = bc;
		unit.owner.foreColor = fc;
		unit.owner.innerColor = ic;
	},

	drawNas: function (ctx, unit) {
		WP.Unit.UI.Text.writeStrengthAndMovement(ctx, unit);
		switch (unit.owner.name.toLowerCase()) {
			case "britain": WP.Unit.UI.Air.drawGbNas(ctx, unit); break;
			case "america": case "unitedstates": case "united states": case "us": WP.Unit.UI.Air.drawUsNas(ctx, unit); break;
			case "germany": WP.Unit.UI.Air.drawGeNas(ctx, unit); break;
			case "japan": WP.Unit.UI.Air.drawJaNas(ctx, unit); break;
			default: WP.Unit.UI.Air.drawItNas(ctx, unit); break;
		}
	},

	drawJetSquadron: function (ctx, unit) {
		switch (unit.owner.name.toLowerCase()) {
			case "britain": WP.Unit.UI.Air.drawGbJsq(ctx, unit); break;
			case "america": case "unitedstates": case "united states": case "us": WP.Unit.UI.Air.drawUsJsq(ctx, unit); break;
			case "germany": case "japan": WP.Unit.UI.Air.drawGeJsq(ctx, unit); break;
			default: WP.Unit.UI.Air.drawRuJsq(ctx, unit); break;
		}
		WP.Unit.UI.Text.writeBottomMiddleStrength(ctx, unit, 0, 1);
		WP.Unit.UI.Text.writeDesignation(ctx, unit);
	},

	drawGbBom: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.8, color, [21], [3], [21, 7.5], [15, 8], [6, 9], [4.5, 9.5, 6, 10], [15, 11], [21, 11], [21, 21], [16, 21], [21, 22]);
		WP.Unit.UI.makeShape(ctx, 0, 21, 1, color, [21], [3], [21, 2], [21], [22], [21, 23.5], [17.5], [9], [17.5, 4.5], [13.5], [9], [13.5, 5]);
	},

	drawGbInt: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.8, color, [21], [3], [20.5, 7.5], [13.5, 7.5], [9, 8, 9.5, 8.5], [13, 11.5, 20.5, 11], [21, 19.5], [18, 20.5], [18, 22, 21, 20.5]);
	},

	drawGbNas: function (ctx, unit) {
		var color = unit.owner.foreColor;
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.8, color, [21], [5], [20, 5], [20, 7], [11, 7], [9.5, 9, 11, 10.5], [17, 10.5], [20, 9], [21, 17.5], [17.5, 18.5], [17, 22, 21, 19]);
		WP.Unit.UI.makeShape(ctx, 0, 21, 1.3, color, [21], [4.5], [18.5, 4.5], [21], [4.5], [21, 3]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.3, unit.owner.backColor, [21], [9], [21, 11.5]);
	},

	drawGbJet: function (ctx, unit) {
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.5, unit.owner.foreColor, [21], [2], [20.2, 5.5], [20, 9.5], [16, 9.5], [11.5, 11], [11.5, 12.5], [20, 15.5], [21, 23.5], [17, 25], [17, 25.5], [21, 26], [16.2], [7.2], [16, 17], [15.8, 7]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.4, unit.owner.backColor, [21], [5.5], [21, 8.5]);
	},

	drawGbJsq: function (ctx, unit) {
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.3, unit.owner.foreColor, [21], [3.5], [20.8, 5.5], [20, 10], [16.5, 10], [12.5, 11], [12.5, 12.5], [20, 14.5], [21, 20.5], [17.5, 22], [17.5, 22.5], [21, 23], [16.5], [7.5], [16.5, 16]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.3, unit.owner.backColor, [21], [5.5], [21, 8.5]);
	},

	drawGeBom: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.8, color, [21], [3], [21, 8], [15, 8], [8, 9], [6.5, 9.5, 8, 10], [15, 11], [21, 11], [21, 19], [16, 20.5], [16, 21], [21, 21.5]);
		WP.Unit.UI.makeShape(ctx, 0, 21, 1.8, color, [17], [10], [17, 4]);
	},

	drawGeInt: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.8, color, [21], [3], [20.3, 8], [10.5, 9], [11, 10], [20.5, 11.5], [21, 19.5], [18, 20], [18, 20.5], [21, 20.5]);
	},

	drawGeNas: function (ctx, unit) {
		var color = unit.owner.foreColor
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.8, color, [21], [3], [20.3, 8], [9.5, 8.5], [9.5, 9], [20.5, 12], [21, 19.5], [21], [19.5], [17, 19.5]);
		WP.Unit.UI.makeShape(ctx, 0, 21, 1, color, [17.5], [8], [17.5, 6.5]);
	},

	drawGeJet: function (ctx, unit) {
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.8, unit.owner.foreColor, [21], [3.5], [20.5, 5], [20, 9], [9.5, 12.2], [9.5, 12.5], [20, 12.5], [21, 20.5], [17, 22], [17, 23, 21, 21.5], [15.5], [7], [15.5, 15]);
	},

	drawGeJsq: function (ctx, unit) {
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.5, unit.owner.foreColor, [21], [5], [20.5, 7], [20, 10], [11.5, 12.2], [11.5, 12.5], [20.5, 12.5], [21, 18.5], [18, 20], [18, 21, 21, 19.5], [16.5], [8], [16.5, 15]);
	},

	drawUsB17: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.8, color, [21], [3], [21, 7.5], [7, 9], [5.5, 9.5, 7, 10], [21, 11.5], [21, 19.5], [15, 20.5], [15, 21], [21, 22]);
		WP.Unit.UI.makeShape(ctx, 0, 21, 1, color, [21], [3], [21, 2], [21], [22], [21, 23.5], [17.5], [9], [17.5, 4.5], [14.5], [9], [14.5, 5]);
	},

	drawUsB29: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.8, color, [21], [3], [21, 8.5], [5, 10.5], [5, 11], [21, 11.5], [21, 20.5], [16, 21.5], [16, 22], [21, 22]);
		WP.Unit.UI.makeShape(ctx, 0, 21, 1, color, [21], [3], [21, 2], [21], [22], [21, 23.5], [17.5], [11], [17.5, 6], [13.5], [11], [13.5, 6.5]);
	},

	drawUsInt: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.3, color, [21], [4], [20, 8.5], [10.5, 9.2], [10.5, 12, 20, 11.9, ], [21, 19.5], [16.5, 21], [18.5, 23, 21, 21]);
		WP.Unit.UI.makeShape(ctx, 0, 21, 0.4, color, [21], [3.5], [18, 3.5]);
	},

	drawUsNas: function (ctx, unit) {
		var color = unit.owner.foreColor
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.8, color, [21], [4], [20.5, 4], [20, 8.2], [10, 9], [10, 10], [20, 12], [21, 19], [17, 20.5], [18, 21.5, 21, 20.5]);
		WP.Unit.UI.makeShape(ctx, 0, 21, 0.5, color, [21], [3.5], [18, 3.5], [21], [4], [21, 2.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.8, unit.owner.backColor, [21], [8.5], [21, 11.5]);
	},

	drawUsJet: function (ctx, unit) {
		var color = unit.owner.foreColor
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.8, color, [21], [3], [21, 5], [19.5, 10], [10, 12.3], [10, 12.5], [20, 14], [21, 20], [17, 22], [17, 22.2], [21, 22.2], [21], [22], [21, 23.5]);
		WP.Unit.UI.makeShape(ctx, 1, 21, 0.7, color, [10], [9.5], [10, 15.5], [10], [15.5], [11, 12.5, 10, 9.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.5, unit.owner.backColor, [21], [7.5], [21, 11.5]);
	},

	drawUsJsq: function (ctx, unit) {
		var color = unit.owner.foreColor
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.5, color, [21], [5], [21, 7], [19.5, 11], [12, 12.3], [12, 12.5], [20, 14], [21, 19], [16, 21], [16, 21.2], [21, 21.2], [21], [21], [21, 22.5]);
		WP.Unit.UI.makeShape(ctx, 1, 21, 0.7, color, [11], [10.5], [11, 14.5], [11], [14.5], [12, 12.5, 11, 10.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.5, unit.owner.backColor, [21], [8.5], [21, 11.5]);
	},

	drawRuBom: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.8, color, [21], [3], [21, 8], [5, 10], [6, 10], [21, 12], [21, 20.5], [17, 20.5], [16.5, 21], [21, 21]);
		WP.Unit.UI.makeShape(ctx, 0, 21, 1.8, color, [16.5], [10], [16.5, 5.5]);
	},

	drawRuInt: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.5, color, [21], [4], [20, 9], [10, 11], [11, 11], [20, 13], [21, 19], [17.5, 20.5], [18, 21.5, 21, 21.2]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.5, new WP.Color(11, 128, 244), [21], [9.5], [21, 13.5]);
	},

	drawRuJet: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.8, unit.owner.foreColor, [21], [4], [20.5, 4], [19.5, 9], [11, 16], [11.5, 17.5], [19.5, 13], [21, 22], [17, 25], [17, 25.2], [21, 23.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.5, unit.owner.backColor, [21], [7.5], [21, 12]);
	},

	drawRuJsq: function (ctx, unit) {
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.5, unit.owner.foreColor, [21], [6], [20.5, 6], [20, 10], [13, 16], [13.2, 17], [20, 13], [21, 20], [17.5, 23], [17.5, 23.2], [21, 21.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.5, unit.owner.backColor, [21], [9], [21, 12]);
	},

	drawJaNas: function (ctx, unit) {
		var color = unit.owner.foreColor
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.8, color, [20.5], [4], [20, 6.7], [10, 7.8], [8.5, 8.8, 10, 9.2], [20, 11], [21, 17.5], [16.5, 19.5], [16.5, 19.7], [21, 20]);
		WP.Unit.UI.makeShape(ctx, 0, 21, 0.5, color, [21], [3.5], [21, 2.5], [21], [3.5], [16.5, 3.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.3, unit.owner.backColor, [21], [6.5], [21, 11.5]);
	},

	drawItNas: function (ctx, unit) {
		var color = unit.owner.foreColor
		WP.Unit.UI.makeShape(ctx, 1, 21, 1.8, color, [21], [4.5], [20.5, 4.5], [20, 9], [20, 7], [19, 7], [19, 8], [11, 8], [8.2, 9, 11, 10.5], [20, 10.5], [21, 18.5], [17.5, 20.5], [17.5, 22, 21, 21]);
		WP.Unit.UI.makeShape(ctx, 0, 21, 0.5, color, [21], [4.5], [21, 3.5], [21], [4.5], [17, 4.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.3, unit.owner.backColor, [21], [10.5], [21, 13]);
	},

	drawTrans: function (ctx, color) {
		WP.Unit.UI.makeShape(ctx, 1, 19.5, 1, color, [19.5], [8.5], [19.5, 11.2], [11.5, 13], [19.5, 14.3], [19.5, 18.5]);
		WP.Unit.UI.makeShape(ctx, 0, 19.5, 1, color, [16.5], [11.5], [16.5, 10.5], [19.5], [18.5], [16, 18.5]);
	},

	drawAas: function (ctx, unit) {
		var color = unit.owner.foreColor
		WP.Unit.UI.makeShape(ctx, 0, 20.5, 1, color, [20.5], [21], [20.5, 13], [20.5], [17.5], [14, 17.5], [20.5], [21.5], [2.5, 20.5], [20.5], [20.5], [10.5, 20.5], [17.5], [22.5], [16.5, 22.5]);
		WP.Unit.UI.makeShape(ctx, 0, 20.5, 0.5, color, [14.5], [22], [11.5, 22]);
		WP.Unit.UI.fillEllipse(ctx, 18, 16.5, 5, 5, color, 1);
	}
}

WP.Unit.UI.Ground = {

	drawAirborne: function (ctx, unit) {
		WP.Unit.UI.Ground.drawInfantry(ctx, unit);
		WP.Unit.UI.makeShape(ctx, 0, 18.5, 0.8, unit.owner.foreColor, [18.5], [17.5], [16, 10, 9, 14]);
	},

	drawArmor: function (ctx, unit) {
		WP.Unit.UI.drawShield(ctx, unit);
		if (unit.lent) { WP.Unit.UI.Misc.drawLent(ctx, unit); }
		WP.Unit.UI.makeShape(ctx, 0, 0, 1, unit.owner.foreColor, [12.5], [8.5], [24.5, 8.5], [29, 12.5, 24.5, 16.5], [12.5, 16.5], [8, 12.5, 12.5, 8.5]);
		WP.Unit.UI.Text.writeStrengthAndMovement(ctx, unit);
		WP.Unit.UI.Text.writeDesignation(ctx, unit);
	},

	drawChindit: function (ctx, unit) {
		WP.Unit.UI.drawShield(ctx, unit);
		WP.Unit.UI.Text.writeStrengthAndMovement(ctx, unit);
		WP.Unit.UI.Text.writeDesignation(ctx, unit);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.8, unit.owner.foreColor, [9.5], [12], [11.5, 12.8], [17.5, 14], [21.5, 14.5], [27, 12.5], [21.5, 14], [19.5, 14], [15.2, 10.2, 9.5, 12]);
	},

	drawCommando: function (ctx, unit) {
		WP.Unit.UI.drawShield(ctx, unit);
		WP.Unit.UI.Text.writeStrengthAndMovement(ctx, unit);
		WP.Unit.UI.Text.writeDesignation(ctx, unit);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1, unit.owner.foreColor, [10], [9], [29, 18], [27], [9], [8, 18], [14], [8.5], [10.5, 8.5], [10.5, 12], [23], [8.5], [26.5, 8.5], [26.5, 12]);
	},

	drawInfantry: function (ctx, unit) {
		var owner = unit.owner.name.toLowerCase()
		WP.Unit.UI.drawShield(ctx, unit);
		if (unit.lent) { WP.Unit.UI.Misc.drawLent(ctx, unit); }
		WP.Unit.UI.Text.writeStrengthAndMovement(ctx, unit);
		WP.Unit.UI.Text.writeDesignation(ctx, unit);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.8, unit.owner.lineColor, [8], [7], [29, 18], [29], [7], [8, 18]);
	},

	drawMarine: function (ctx, unit) {
		WP.Unit.UI.drawShield(ctx, unit);
		WP.Unit.UI.Text.writeStrengthAndMovement(ctx, unit);
		WP.Unit.UI.Text.writeDesignation(ctx, unit);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1, unit.owner.foreColor, [18.5], [16], [18.5, 10]);
		WP.Unit.UI.makeShape(ctx, 0, 18.5, 1, unit.owner.foreColor, [18.5], [11.5], [16, 11.5], [13], [13], [15, 17, 18.5, 16.5], [13], [13], [15, 17, 18.5, 15]);
		WP.Unit.UI.drawEllipse(ctx, 17.5, 8.5, 2, 2, unit.owner.foreColor, 0.8);
	},

	drawMechanized: function (ctx, unit) {
		WP.Unit.UI.Ground.drawInfantry(ctx, unit);
		WP.Unit.UI.fillEllipse(ctx, 11, 19, 3, 3, unit.owner.foreColor, 1);
		WP.Unit.UI.fillEllipse(ctx, 23, 19, 3, 3, unit.owner.foreColor, 1);
	},

	drawPartisan: function (ctx, unit) {
		WP.Unit.UI.drawShield(ctx, unit);
		WP.Unit.UI.Text.writeStrengthAndMovement(ctx, unit);
		WP.Unit.UI.Text.writeDesignation(ctx, unit);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, "P", "bold 10px arial", 19, 16)
	},

	drawCommunistPartisan: function (ctx, unit) {
		var ic = unit.owner.innerColor;
		unit.owner.innerColor = new WP.Color(244, 81, 43); 
		WP.Unit.UI.Ground.drawPartisan(ctx, unit);
		unit.owner.innerColor = ic;
	},

	drawAlliedPartisan: function (ctx, unit) {
		var ic = unit.owner.innerColor;
		if (unit.owner.name.toLowerCase() == "britain") { unit.owner.innerColor = new WP.Color(146, 183, 98) } 
		else { unit.owner.innerColor = new WP.Color(216, 203, 159) }; 
		WP.Unit.UI.Ground.drawPartisan(ctx, unit);
		unit.owner.innerColor = ic;
	},
	drawAxisPartisan: function (ctx, unit) {
		ic = unit.owner.innerColor
		unit.owner.innerColor = new WP.Color(235, 235, 145)
		blackboxColor = new WP.Color(40, 40, 40)
		WP.Unit.UI.Ground.drawPartisan(ctx, unit);
		ctx.fillStyle = blackboxColor.toRgb();
		ctx.fillRect(9, 8, 19, 9);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, "P", "bold 10px arial", 19, 16, unit.owner.innerColor)
		unit.owner.innerColor = ic
	},

	drawReplacement: function (ctx, unit) {
		WP.Unit.UI.drawShield(ctx, unit);
		WP.Unit.UI.Text.writeBottomMiddleStrength(ctx, unit);
		WP.Unit.UI.Text.writeDesignation(ctx, unit);
	}
}

WP.Unit.UI.Misc = {

	drawAirbase: function (ctx, unit) {
		var white = new WP.Color(255, 255, 255);
		var color = unit.owner.foreColor
		var owner = unit.owner.name.toLowerCase()
		if ((owner == "japan") ||
		(owner == "nationalist china") ||
		(owner == "natchina"))
		{ WP.Unit.UI.drawEllipse(ctx, 7, 6.5, 27, 27, color, 1.8); }
		else { WP.Unit.UI.drawEllipse(ctx, 7, 6.5, 27, 27, white, 1.8); }
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.8, color, [10.5], [21], [30.5, 21], [13.5], [25.5], [26.5, 13.5]);
	},

	drawAtomicAttack: function (ctx, unit) {
		WP.Unit.UI.drawWhiteBase(ctx, unit);
		var black = new WP.Color(30, 30, 30);
		var red = new WP.Color(225, 80, 30);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, "Atomic", "bold 8px tahoma", null, 27, black);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, "Attack", "bold 8px tahoma", null, 35, black);
		WP.Unit.UI.makeShape(ctx, 0, 20, 1.5, black, [4], [18], [20, 18], [7], [18], [7, 16], [10], [18], [10, 15], [13], [18], [13, 16]);
		ctx.fillStyle = red.toRgb();
		WP.Unit.UI.fillEllipse(ctx, 10, 3, 20, 8, red, 0);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0, red, [19], [10], [17, 15], [23, 15], [21, 10]);
	},

	drawBeachDefense: function (ctx, unit) {
		var bc = unit.owner.backColor
		unit.owner.backColor = new WP.Color(250, 233, 137);
		var white = new WP.Color(245, 245, 245);
		var darkgray = new WP.Color(68, 81, 130);
		var lightgray = new WP.Color(180, 180, 180);
		var blue = new WP.Color(158, 191, 210);
		WP.Unit.UI.drawBase(ctx, unit);
		WP.Unit.UI.makeShape(ctx, 0, 0, 5, white, [0], [30], [5, 32], [10, 33], [13, 33], [15, 31], [22, 30], [25, 28], [27, 27], [32, 28], [41, 30]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 1, blue, [0], [30], [5, 32], [10, 33], [13, 33], [15, 31], [22, 30], [25, 28], [27, 27], [32, 28], [41, 30], [41, 41], [0, 41], [0, 30]);
		WP.Unit.UI.makeShape(ctx, 0, 20, 1.3, darkgray, [4.5], [14.5], [8.5, 21.5], [4.5], [21.5], [8.5, 14.5], [13.5], [14.5], [17.5, 21.5], [13.5], [21.5], [17.5, 14.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.3, darkgray, [8], [7], [4.5, 12], [20], [7], [20, 13], [32], [7], [35.5, 12]);
		ctx.fillStyle = lightgray.toRgb();
		WP.Unit.UI.fillEllipse(ctx, 5, 4, 6, 6, lightgray, 0.5);
		WP.Unit.UI.fillEllipse(ctx, 17, 4, 6, 6, lightgray, 0.5);
		WP.Unit.UI.fillEllipse(ctx, 29, 4, 6, 6, lightgray, 0.5);
		WP.Unit.UI.drawEllipse(ctx, 5, 4, 6, 6, darkgray, 0.8);
		WP.Unit.UI.drawEllipse(ctx, 17, 4, 6, 6, darkgray, 0.8);
		WP.Unit.UI.drawEllipse(ctx, 29, 4, 6, 6, darkgray, 0.8);
		unit.owner.backColor = bc
	},

	drawBreakthrough: function (ctx, unit) {
		WP.Unit.UI.drawWhiteBase(ctx, unit);
		var black = new WP.Color(30, 30, 30);
		var red = new WP.Color(225, 80, 30);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, "Break", "bold 8px tahoma", 20, 27, black);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, "Through", "bold 8px tahoma", 20, 35, black);
		WP.Unit.UI.makeShape(ctx, 0, 20, 1.5, black, [4], [15], [14, 15], [16, 13, 12, 11]);
		WP.Unit.UI.makeShape(ctx, 1, 20, 0.1, red, [20], [20], [16, 20], [18, 8], [15, 8], [20, 3]);
	},

	drawBridgehead: function (ctx, unit) {
		WP.Unit.UI.drawWhiteBase(ctx, unit);
		var black = new WP.Color(20, 20, 20);
		var blue = new WP.Color(140, 200, 235);
		ctx.lineWidth = 1;
		ctx.beginPath();
		ctx.fillStyle = blue.toRgb();
		ctx.arc(20.5, 20.5, 13, 0, 3.14, 0);
		ctx.fill();
		WP.Unit.UI.drawEllipse(ctx, 7.5, 7.5, 26, 26, black, 1.3);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, "BH", "bold 13px helvetica", null, 26, black);
	},

	drawDamage: function (ctx, unit) {
		WP.Unit.UI.drawWhiteBase(ctx, unit);
		var black = new WP.Color(20, 20, 20);
		var red = new WP.Color(225, 80, 30);
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.4, black, [12], [21], [15, 18.5], [15, 21], [17], [21], [20, 18.5], [20, 21], [22], [21], [25, 18.5], [25, 21], [28], [21], [28, 11], [32], [21], [32, 11]);
		ctx.fillStyle = black.toRgb();
		ctx.fillRect(9, 20, 26, 5);
		WP.Unit.UI.makeShape(ctx, 1, 20, 0.1, red, [5], [14], [11, 14], [8, 8], [5, 14]);
		WP.Unit.UI.makeShape(ctx, 1, 20, 0.1, red, [13], [14], [19, 14], [16, 8], [13, 14]);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, "Damaged", "bold 7px tahoma", null, 35, black);
	},

	drawDone: function (ctx, unit) {
		WP.Unit.UI.drawWhiteBase(ctx, unit);
		var black = new WP.Color(20, 20, 20);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, "DONE", "bold 8px tahoma", null, 21, black);
	},

	drawExploit: function (ctx, unit) {
		WP.Unit.UI.drawWhiteBase(ctx, unit);
		var black = new WP.Color(30, 30, 30);
		var red = new WP.Color(225, 80, 30);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, "Exploit", "bold 8px tahoma", null, 36, black);
		WP.Unit.UI.makeShape(ctx, 0, 20, 1.5, black, [4], [25], [14, 25], [16, 23, 12, 21]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 3, red, [19], [26], [20, 14, 11, 11], [20], [26], [20, 6], [21], [26], [22, 12, 32, 15]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.1, red, [20], [3], [23.5, 9], [16.5, 9], [20, 3]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.1, red, [6], [9.5], [13, 7.5], [11, 14.5], [6, 9.5]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.1, red, [36], [14.5], [30, 18], [30, 11], [36, 14.5]);
	},

	drawFireStorm: function (ctx, unit) {
		WP.Unit.UI.drawWhiteBase(ctx, unit);
		var black = new WP.Color(30, 30, 30);
		var red = new WP.Color(225, 80, 30);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, "Fire", "bold 8px tahoma", null, 27, black);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, "Storm", "bold 8px tahoma", null, 35, black);
		WP.Unit.UI.makeShape(ctx, 0, 20, 1.5, black, [4], [18], [20, 18], [7], [18], [7, 16], [10], [18], [10, 15], [13], [18], [13, 16], [17], [18], [17, 16], [20], [18], [20, 15]);
		WP.Unit.UI.makeShape(ctx, 1, 20, 0.1, red, [5], [14], [11, 14], [8, 8], [5, 14]);
		WP.Unit.UI.makeShape(ctx, 1, 20, 0.1, red, [13], [14], [19, 14], [16, 8], [13, 14]);
	},

	drawFlak: function (ctx, unit) {
		var color = unit.owner.foreColor
		switch (unit.owner.name.toLowerCase()) {
			case "america": case "us": case "united states": case "unitedstates": case "britain": WP.Unit.UI.drawSharedAlliedBase(ctx, unit); break;
			default: break;
		}
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.3, color, [15], [21], [28, 21], [25], [19], [17, 13]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.3, color, [19], [21], [19, 18], [22, 15], [23, 21]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1, color, [25.5], [18.5], [11.6, 7.5]);
		WP.Unit.UI.Text.writeBottomMiddleStrength(ctx, unit);
	},

	drawFortress: function (ctx, unit) {
		WP.Unit.UI.drawWhiteBase(ctx, unit);
		var black = new WP.Color(20, 20, 20);
		ctx.fillStyle = black.toRgb();
		WP.Unit.UI.fillEllipse(ctx, 8.5, 16.5, 7, 7, black, 0.5);
		WP.Unit.UI.fillEllipse(ctx, 13, 8, 7, 7, black, 0.5);
		WP.Unit.UI.fillEllipse(ctx, 13, 24.5, 7, 7, black, 0.5);
		WP.Unit.UI.fillEllipse(ctx, 26.5, 16.5, 7, 7, black, 0.5);
		WP.Unit.UI.fillEllipse(ctx, 22, 8, 7, 7, black, 0.5);
		WP.Unit.UI.fillEllipse(ctx, 22, 24.5, 7, 7, black, 0.5);
		WP.Unit.UI.makeShape(ctx, 0, 21, 1, black, [7.5], [19.5], [4.5, 19.5], [14.5], [9], [12.5, 5], [14.5], [30], [12.5, 34]);
	},

	drawGrant: function (ctx, unit) {
		WP.Unit.UI.drawWhiteBase(ctx, unit);
		var gray = new WP.Color(155, 155, 155);
		var white = new WP.Color(250, 250, 250);
		ctx.fillStyle = gray.toRgb();
		ctx.fillRect(3, 3, 35, 35);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, "Grant", "bold 11px tahoma", null, 15, white);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, unit.strength, "bold 12px tahoma", null, 30, white);
	},

	drawIc: function (ctx, unit) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.4, unit.owner.foreColor, [12], [17], [15, 14.5], [15, 17], [17], [17], [20, 14.5], [20, 17], [22], [17], [25, 14.5], [25, 17], [28], [17], [28, 7], [32], [17], [32, 7]);
		ctx.fillStyle = unit.owner.foreColor.toRgb();
		ctx.fillRect(9, 16, 26, 5);
		WP.Unit.UI.Text.writeBottomMiddleStrength(ctx, unit);
	},

	drawInformation: function (ctx, unit) {
		ctx.lineWidth = 3;
		ctx.strokeStyle = WP.Unit.UI.getHighlightColor(unit.owner.backColor).toRgb();
		ctx.strokeRect(2, 2, unit.size - 6, unit.size - 6);
		ctx.lineWidth = 0;
		ctx.drawImage(unit.owner.flagImage, 6.5, 4);
		WP.Unit.UI.drawFlagOutline(ctx);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, unit.name, "bold 8px verdana", null, 35);
	},

	drawIsolation: function (ctx, unit) {
		WP.Unit.UI.drawWhiteBase(ctx, unit);
		var fc = unit.owner.foreColor
		var black = new WP.Color(30, 30, 30);
		var red = new WP.Color(225, 80, 30);
		unit.owner.foreColor = black
		WP.Unit.UI.makeShape(ctx, 0, 0, 1, black, [14.5], [14.5], [25.5, 14.5], [25.5, 21.5], [14.5, 21.5], [14.5, 14.5], [25.5, 21.5], [14.5], [21.5], [25.5, 14.5]);
		WP.Unit.UI.drawEllipse(ctx, 9, 11.5, 22, 13, red, 1.5);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, "Isolation", "bold 8px tahoma", null, 10);
		WP.Unit.UI.Text.writeBottomMiddleStrength(ctx, unit);
		unit.owner.foreColor = fc
	},

	drawLent: function (ctx, unit) {
		var owner = unit.owner.name.toLowerCase();
		var ic = unit.owner.innerColor;
		if (owner == "spain") { unit.owner.innerColor = new WP.Color(140, 140, 140); }
		else if (owner == "vichy") { unit.owner.innerColor = new WP.Color(100, 100, 100) }
		else { unit.owner.innerColor = new WP.Color(151, 184, 108); }
		WP.Unit.UI.drawShield(ctx, unit);
		unit.owner.innerColor = ic;
	},

	drawOil: function (ctx, unit) {
		WP.Unit.UI.drawWhiteBase(ctx, unit);
		var black = new WP.Color(20, 20, 20);
		var darkGray = new WP.Color(100, 100, 100);
		var midGray = new WP.Color(170, 170, 170);
		var lightGray = new WP.Color(220, 220, 220);
		var white = new WP.Color(250, 250, 250);
		ctx.fillStyle = darkGray.toRgb(); 
		ctx.fillRect(4, 4, 34, 34);
		var oilCanGradient1 = ctx.createLinearGradient(20, 10, 30, 10)
		oilCanGradient1.addColorStop(0, black.toRgb());
		oilCanGradient1.addColorStop(0.7, lightGray.toRgb());
		oilCanGradient1.addColorStop(1, black.toRgb());
		ctx.fillStyle = oilCanGradient1;
		ctx.strokeStyle = black.toRgb();
		ctx.lineWidth = 0.5;
		ctx.beginPath();
		ctx.moveTo(19, 9);
		ctx.lineTo(30, 9);
		ctx.lineTo(30, 24.5);
		ctx.quadraticCurveTo(25, 26, 19, 24.5, 0, 0);
		ctx.lineTo(19, 9);
		ctx.fill();
		ctx.moveTo(30, 12.5);
		ctx.quadraticCurveTo(25, 14.5, 19, 12.5, 0, 0); 
		ctx.moveTo(30, 16.5);
		ctx.quadraticCurveTo(25, 18.5, 19, 16.5, 0, 0);
		ctx.moveTo(30, 20.5);
		ctx.quadraticCurveTo(25, 22.5, 19, 20.5, 0, 0);
		ctx.stroke();
		ctx.fillStyle = midGray.toRgb(); 
		WP.Unit.UI.fillEllipse(ctx, 19.5, 9, 10, 1.5, black, 1);
		ctx.fillStyle = black.toRgb(); 
		WP.Unit.UI.fillEllipse(ctx, 22, 9.8, 1, 1, black, 1);
		var oilCanGradient2 = ctx.createLinearGradient(8, 13, 21, 13)
		oilCanGradient2.addColorStop(0, black.toRgb());
		oilCanGradient2.addColorStop(0.7, lightGray.toRgb());
		oilCanGradient2.addColorStop(1, black.toRgb());
		ctx.fillStyle = oilCanGradient2;
		ctx.strokeStyle = black.toRgb();
		ctx.lineWidth = 0.5;
		ctx.beginPath();
		ctx.moveTo(8, 13);
		ctx.lineTo(22, 13);
		ctx.lineTo(22, 30.5);
		ctx.quadraticCurveTo(15, 32.5, 8, 30.5, 0, 0);
		ctx.lineTo(8, 13);
		ctx.fill();
		ctx.moveTo(22, 17.5);
		ctx.quadraticCurveTo(15, 19.5, 8, 17.5, 0, 0); 
		ctx.moveTo(22, 21.5);
		ctx.quadraticCurveTo(15, 23.5, 8, 21.5, 0, 0);
		ctx.moveTo(22, 25.5);
		ctx.quadraticCurveTo(15, 27.5, 8, 25.5, 0, 0);
		ctx.stroke();
		ctx.fillStyle = midGray.toRgb(); 
		WP.Unit.UI.fillEllipse(ctx, 8.5, 13, 12, 2, black, 1);
		ctx.fillStyle = black.toRgb(); 
		WP.Unit.UI.fillEllipse(ctx, 12, 13.8, 1, 1, black, 1.5);
		ctx.font = "bold 14px helvetica"; 
		ctx.textAlign = "center";
		ctx.fillStyle = white.toRgb();
		ctx.fillText(unit.strength, 32, 35);
	},

	drawOilEffect: function (ctx, unit) {
		ctx.fillStyle = unit.owner.innerColor.toRgb();
		ctx.fillRect(5, 4, 32, 24);
		WP.Unit.UI.Text.writeAutoGenericText(ctx, unit, "oil", "bold 8px verdana", null, 14);
		WP.Unit.UI.Text.writeAutoGenericText(ctx, unit, "effect", "bold 8px verdana", null, 22);
		WP.Unit.UI.Text.writeAutoGenericText(ctx, unit, unit.name, "bold 8px verdana", 21, 36);
	},

	drawOilPlant: function (ctx, unit) {
		var owncol = unit.owner.foreColor;
		ctx.fillStyle = owncol.toRgb();
		ctx.fillRect(5, 23, 32, 3);
		ctx.fillRect(11, 19, 8, 4);
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.8, owncol, [8], [23], [8, 10], [22], [23], [22, 7], [26], [23], [26, 15], [28, 15], [33, 20], [36, 20], [36, 23]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1, owncol, [26.5], [15], [26.5, 9], [29.5], [17], [29.5, 13], [32.5], [20], [32.5, 14], [34.5], [20], [34.5, 17]);
		WP.Unit.UI.Text.writeAutoGenericText(ctx, unit, "Oil Plant", "bold 8px tahoma", 21, 37);
	},

	drawPartialSupply: function (ctx, unit) {
		WP.Unit.UI.drawWhiteBase(ctx, unit);
		var fc = unit.owner.foreColor
		var black = new WP.Color(30, 30, 30);
		var red = new WP.Color(225, 80, 30);
		var white = new WP.Color(250, 250, 250);
		unit.owner.foreColor = black
		WP.Unit.UI.makeShape(ctx, 0, 0, 1, black, [14.5], [24.5], [25.5, 24.5], [25.5, 31.5], [14.5, 31.5], [14.5, 24.5], [25.5, 31.5], [14.5], [31.5], [25.5, 24.5]);
		WP.Unit.UI.drawEllipse(ctx, 9, 21.5, 22, 13, red, 1.5);
		WP.Unit.UI.makeShape(ctx, 0, 20, 3, white, [15], [22], [18, 22], [10.5], [23], [10.5, 26], [15], [34], [18, 34], [10.5], [33], [10.5, 30]);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, "Partial", "bold 8px tahoma", null, 10, black);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, "Supply", "bold 8px tahoma", null, 17, black);
		unit.owner.foreColor = fc;
	},

	drawPort: function (ctx, unit) {
		WP.Unit.UI.drawWhiteBase(ctx, unit);
		var black = new WP.Color(30, 30, 30);
		var blue = new WP.Color(140, 200, 235);
		var white = new WP.Color(250, 250, 250);
		ctx.lineWidth = 1; 
		ctx.beginPath();
		ctx.fillStyle = blue.toRgb();
		ctx.arc(20.5, 20.5, 13, 0, 3.14, 0);
		ctx.fill();
		ctx.lineWidth = 1; 
		ctx.beginPath();
		ctx.fillStyle = white.toRgb();
		ctx.arc(13, 18.5, 4, 0, 3.14, 0);
		ctx.fill();
		ctx.arc(20.5, 18.5, 4, 0, 3.14, 0);
		ctx.fill();
		ctx.arc(28, 18.5, 4, 0, 3.14, 0);
		ctx.fill();
		WP.Unit.UI.drawEllipse(ctx, 19, 10.5, 3, 3, black, 1.2); 
		WP.Unit.UI.makeShape(ctx, 0, 20.5, 1, black, [20.5], [13], [20.5, 30], [20.5], [15.5], [14.5, 15.5], [20.5, 16], [20.5], [30], [13.5, 30, 13.5, 25], [16, 28]);
		WP.Unit.UI.drawEllipse(ctx, 7.5, 7.5, 26, 26, black, 1.3); 
	},

	drawRailhead: function (ctx, unit) {
		WP.Unit.UI.drawWhiteBase(ctx, unit);
		var black = new WP.Color(30, 30, 30);
		var red = new WP.Color(225, 80, 30);
		WP.Unit.UI.drawEllipse(ctx, 5, 5, 30, 30, red, 1.5); 
		ctx.fillStyle = black.toRgb();
		ctx.fillRect(12, 17, 17, 7);
		WP.Unit.UI.fillEllipse(ctx, 14, 23, 3, 3, black, 0.5); 
		WP.Unit.UI.fillEllipse(ctx, 18, 23, 3, 3, black, 0.5);
		WP.Unit.UI.fillEllipse(ctx, 22, 23, 3, 3, black, 0.5);
		WP.Unit.UI.fillEllipse(ctx, 26, 23, 3, 3, black, 0.5);
		WP.Unit.UI.fillEllipse(ctx, 25, 18, 5, 5, black, 0.5); 
		WP.Unit.UI.fillEllipse(ctx, 18, 16, 3, 3, black, 0.5); 
		WP.Unit.UI.fillEllipse(ctx, 10.5, 22, 3, 3, black, 0.5); 
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.001, black, [14], [18], [14, 16], [8, 16], [8, 18], [12, 18], [14], [19], [9, 19], [9, 23], [14, 23]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1, black, [30], [20.5], [32, 20.5], [28], [24], [30.5, 24], [31, 26], [27], [18.5], [27, 14.5], [27], [18.5], [27, 14.5], [23], [18.5], [23, 15.5], [16], [18.5], [16, 15.5], [9.5], [16], [9.5, 19]);
	},

	drawRocket: function (ctx, unit) {
		WP.Unit.UI.makeShape(ctx, 13, 20.5, 1, unit.owner.foreColor, [20.5], [5.5], [20.5, 35], [20.5], [6], [19, 10, 18.5, 20], [18.5, 28], [16.5, 30], [16.5, 35], [17.5, 35], [20.5, 33]);
	},

	drawSpyRing: function (ctx, unit) {
		ctx.fillStyle = unit.owner.innerColor.toRgb();
		WP.Unit.UI.fillEllipse(ctx, 10.5, 6, 20, 20, unit.owner.innerColor, 1);
		WP.Unit.UI.Text.writeAutoGenericText(ctx, unit, "spy", "bold 8px verdana", 21, 14);
		WP.Unit.UI.Text.writeAutoGenericText(ctx, unit, "ring", "bold 8px verdana", 21, 22);
		WP.Unit.UI.Text.writeAutoGenericText(ctx, unit, unit.name, "bold 8px verdana", 21, 36);
	},

	drawTurn: function (ctx, unit) {
		WP.Unit.UI.drawWhiteBase(ctx, unit);
		var black = new WP.Color(30, 30, 30);
		var orange = new WP.Color(229, 111, 50);
		var yellow = new WP.Color(220, 187, 82);
		var turnCircleGradient = ctx.createRadialGradient(20.5, 20.5, 0, 20.5, 20.5, 12);
		turnCircleGradient.addColorStop(0.5, yellow.toRgb());
		turnCircleGradient.addColorStop(1, orange.toRgb());
		ctx.fillStyle = turnCircleGradient;
		WP.Unit.UI.drawEllipse(ctx, 4, 4, 33, 33, orange, 1);
		ctx.fill();
		WP.Unit.UI.Text.writeGenericText(ctx, unit, "Turn", "bold 12px arial", 21, 24, black);
	}

}

WP.Unit.UI.Naval = {

	drawIowa: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.5, color, [2], [22.5], [38, 22.5], [38.5, 22.1], [33, 22.5], [32], [22.5], [25, 21], [15, 21], [9, 22.5], [26], [20.5], [20, 20.5], [23], [19.5], [20, 19.5], [22], [19.5], [22, 17.5], [17], [20.5], [17, 18]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.7, color, [14.5], [20.5], [14.5, 19], [21.5], [18], [21.5, 16], [16.5], [18], [16.5, 20]);
	},

	drawSDakota: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.5, color, [2], [22.5], [38, 22.5], [38.3, 22], [3, 22], [21], [21], [21, 15], [20], [21], [20, 16.5], [18], [22], [18, 18], [17], [22], [17, 18.5], [16], [22], [16, 19], [14], [22], [14, 21], [8, 22]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.5, color, [32], [22], [27, 20.5], [25.5, 20.5], [23.5, 18.5], [23, 18.5], [22, 20.5], [13.5, 22]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.7, color, [21], [15], [20.5, 12]);
	},

	drawNCarolina: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.5, color, [2], [22.5], [38, 22.5], [38.2, 21.7], [33, 22.5], [8], [22.5], [14, 21], [26, 21], [33, 22.5], [17], [20], [21, 20], [20], [20], [24, 20], [20], [19], [23, 19], [17.5], [21], [17.5, 17.5], [15.5], [21], [15.5, 17.5], [13], [21], [13, 19], [21], [18], [21, 16]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.7, color, [21], [16], [20, 15]);
	},

	drawColorado: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.5, color, [3], [22.5], [36, 22.5], [36.5, 22], [20, 22], [22.5], [16], [22.5, 14]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.5, color, [33], [22], [27, 20.5], [25, 20.5], [23, 17.5], [22.5, 17.5], [22, 20.5], [16, 22], [12], [22], [13, 21], [12, 21], [8, 22.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.8, color, [19.5], [22], [19.5, 18], [14], [22], [14.5, 14], [16.5], [22], [16.5, 18], [22.5], [18], [22.5, 14]);
	},

	drawPenn: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.5, color, [3], [22.5], [36.6, 22.5], [36.5, 22], [20, 22], [23.5], [16], [23.5, 14], [21], [22], [21, 18]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.5, color, [33], [22], [28, 20.5], [26, 20.5], [24, 17.5], [23.5, 17.5], [23, 20.5], [13.5, 22], [13], [22], [14, 21], [13, 21], [9, 22.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.5, color, [15], [22], [15.5, 13], [17.5], [22], [15.5, 13], [15.5], [17.5], [17.5, 17.5], [23.5], [18], [23.5, 14]);
	},

	drawNMexico: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.5, color, [3], [22.5], [36.5, 22.5], [36.8, 22], [20, 22], [23.5], [16], [23.5, 14], [21], [22], [21, 17]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.5, color, [33], [22], [28, 20.5], [26, 20.5], [25, 17.5], [23.5, 17.5], [23, 19.5], [14.5, 22], [13], [22], [14, 21], [13, 21], [9, 22.5], [16.5], [21], [16.5, 19.2], [17, 19], [17, 21]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.5, color, [17.5], [20], [17.5, 16], [23.5], [18], [23.5, 14]);
	},

	drawNYork: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.5, color, [3], [22.5], [36, 22.5], [36.5, 22], [20, 22], [23.5], [16], [23.5, 14], [19], [22], [19, 19]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.5, color, [33], [22], [28, 20.5], [26, 20.5], [24, 17.5], [23.5, 17.5], [23, 20.5], [22.5, 22], [16, 22], [12], [22], [13, 21], [12, 21], [8, 22.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.8, color, [14], [22], [14.5, 14], [20.5], [22], [20.5, 18], [23.5], [18], [23.5, 14]);
	},

	drawVirginia: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.5, color, [3], [22.5], [36, 22.5], [36.5, 22], [15, 22], [32], [22], [27, 20.5], [25.5, 20.5], [23.5, 18.5], [22, 20.5], [13.5, 22], [21], [21], [21, 16], [20], [21], [20, 16.5], [18], [22], [18, 18], [17], [22], [17, 18.5], [16], [22], [16, 19], [14], [22], [14, 21], [8, 22]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.7, color, [21], [16], [20.5, 13]);
	},

	drawAlaska: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.5, color, [3], [22.5], [35.5, 22.5], [36, 22], [15, 22], [32], [22], [27, 21], [25.5, 21], [23.5, 19.5], [23, 19.5], [22, 21], [13.5, 22], [21], [21], [21, 17], [20], [21], [20, 17.5], [18], [22], [18, 19], [17], [22], [17, 19.5], [16], [22], [16, 19.5], [14], [22], [14, 21], [9, 22]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.7, color, [21], [17], [20.5, 15]);
	},

	drawMidway: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.3, color, [3], [22], [37.7, 22], [38.2, 21], [3.8, 21], [26], [21], [24, 19], [24, 20], [22, 20], [22, 18], [19, 18], [19, 20], [17, 20], [15, 21]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.5, color, [20.5], [18], [20.5, 14]);
	},

	drawEssex: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.3, color, [3], [22], [37, 22], [37.8, 21], [2.5, 21], [29], [21], [24, 21, 21, 18], [20, 18], [20, 19], [17, 20], [15, 21]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.5, color, [20.5], [18], [20.5, 15]);
	},

	drawIndependence: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.3, color, [4], [22.5], [36, 22.5], [36, 22], [31.5, 21], [4.5, 21]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 1, color, [24.5], [21], [24.5, 16], [24.5, 18], [27.5, 21], [19], [21], [21, 20]);
	},

	drawYorktown: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.3, color, [3.5], [22.5], [36, 22.5], [36.5, 22], [3, 22], [3, 21.5], [3.8, 21], [37, 21], [15], [21], [16, 19], [21, 18], [22, 21]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.5, color, [16.5], [18], [16.5, 15], [20.5], [18], [20.5, 16]);
	},

	drawLexington: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.3, color, [4], [22.5], [36, 22.5], [36.5, 22], [3.5, 22], [3, 21.5], [36.8, 21.5], [19.5], [21], [20, 18.5], [22, 18.5], [24.5, 21], [14], [21], [16, 20], [16.5, 19], [17.5, 21]);
	},

	drawBogue: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.3, color, [6], [22.5], [34, 22.5], [34.5, 22], [5.5, 22], [6, 21], [34.5, 21], [25], [21], [25, 19], [24, 18.5], [24, 21]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.5, color, [23.5], [18.5], [23.5, 14]);
	},

	drawGato: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.3, color, [7.5], [33.5], [36.5, 33.5], [35.5, 34.5], [33.5, 35], [9, 35], [4.5, 34], [18.5], [33.5], [18.5, 32.5], [25, 32.5], [20.5], [31.5], [23.5, 31.5]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.7, color, [26.5], [33.5], [26.5, 31.8], [22.5], [32], [22.5, 29.5], [20.5], [32], [20.5, 29.5]);
	},

	drawLion: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.7, color, [2], [22.5], [38.5, 22.5], [30, 22.5], [32], [22.5], [29, 21.5], [24, 21.5], [24, 19.5], [23, 19.5], [22, 20], [20, 19.5], [20, 22.5], [18], [22.5], [14, 21], [8, 22.5], [16.5], [22.5], [16.5, 19]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.3, color, [16.5], [20], [18.5, 18.5], [13.5], [21.5], [13.5, 16], [20.5], [19], [20.5, 16]);
	},

	drawNelson: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.7, color, [3], [22], [38, 22], [32], [22], [30, 21.2], [27, 22], [26, 21.2], [22, 21.8], [19, 21], [17, 17.5], [16.5, 17.5], [16, 21], [7, 21], [5, 22], [12.5], [21], [12.5, 18]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 1, color, [38.2], [21.5], [3.5, 21.5], [8.5], [17], [8.5, 16], [8.5], [14], [8.5, 13]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.3, color, [8.5], [20], [8.5, 13]);
	},

	drawKGV: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.7, color, [3], [22.5], [37, 22.5], [37.2, 22], [30, 22.5], [32], [22.5], [29, 21.5], [24, 21], [24, 19], [23, 19], [22, 20], [20, 19], [20, 22.5], [18], [22.5], [14, 21], [8, 22.5], [16.5], [22.5], [16.5, 18.5]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.3, color, [16.5], [20], [18.5, 18.5], [13.5], [21.5], [13.5, 15], [20.5], [19], [20.5, 15]);
	},

	drawVanguard: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.7, color, [3], [22.5], [38, 22.5], [38.2, 22.2], [30, 22.5], [32], [22.5], [30, 21.5], [26, 21], [26, 19.5], [25, 19.5], [24, 20], [23, 19.5], [23, 22], [20, 22], [18, 20], [15, 21], [8, 22.5], [18.5], [22.5], [18.5, 18.5]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.3, color, [17.5], [21.5], [17.5, 15], [23.5], [19], [23.5, 15]);
	},

	drawRoyalOak: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.3, color, [3], [22.5], [37.5, 22.5], [37.3, 22], [12, 22], [9, 22.5], [32], [22], [31, 21.5], [23, 20], [23, 18], [21, 18], [19.5, 22], [14, 21], [13, 21], [7, 22.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.5, color, [15.5], [21], [16.5, 14], [20.5], [22], [20.5, 18], [23.5], [18], [23.5, 13.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.8, color, [16.5], [14], [16.5, 15], [16], [17], [16, 18], [23], [14.5], [24, 14.5], [23.5], [17.5], [24.3, 17.5]);
	},

	drawBarham: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.3, color, [3], [22.5], [37.5, 22.5], [37.3, 22], [12, 22], [9, 22.5], [33], [22], [31.5, 21], [22, 19], [22, 18], [20.5, 18], [19.5, 22], [14, 21], [13, 21], [7, 22.5], [24.5], [20], [25.5, 16.2], [26, 16.2], [27, 21]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.5, color, [15.5], [21], [16.5, 14], [20.5], [22], [20.5, 18]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.8, color, [16.5], [14], [16.5, 15], [16], [17], [16, 18]);
	},

	drawWarspite: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.3, color, [3], [22.5], [37.5, 22.5], [37.3, 22], [12, 22], [9, 22.5], [33], [22], [31.5, 21], [23, 19], [21, 21.5], [17, 21.5], [13, 21], [7, 22.5], [26], [20], [26, 18], [23, 18], [23, 20], [20, 20], [20, 22]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.5, color, [15.5], [21], [16.5, 14], [24.5], [18], [24.5, 15]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.8, color, [16.5], [14], [16.5, 15], [16], [17], [16, 18]);
	},

	drawReknown: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.3, color, [21.5], [20], [21.5, 18], [18.5], [20], [18.5, 18], [3], [22.5], [38, 22.5], [38.5, 21.7], [33], [22], [28, 21], [27, 20.5], [26, 20.5], [26, 19], [24.5, 18.5], [24.5, 20], [18, 21], [15, 22], [9], [22], [14.5, 21]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.4, color, [24.5], [18], [24.5, 15], [14.5], [21], [14.5, 16]);
	},

	drawArkRoyal: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.3, color, [5], [22], [36, 22], [4], [21], [37, 21], [19], [20], [24, 20], [20], [19], [23, 19]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.7, color, [5], [21], [3, 21], [20], [18], [22, 18], [22.5], [21], [22.5, 15]);
	},

	drawCourageous: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.3, color, [6], [22], [35, 22], [4], [21], [36, 21], [19], [20], [25, 20], [20], [19], [24, 19]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.7, color, [6], [22], [4, 22], [35], [22], [37, 22], [24], [19], [25, 19], [21], [18], [22, 18], [23.5], [19], [23.5, 16]);
	},

	drawRuler: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.3, color, [11], [22], [35, 22], [35.3, 21], [11, 21], [19], [20], [26, 20], [21], [19.5], [26, 19.5], [21], [18.5], [23, 18.5]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 1, color, [11], [22.6], [6, 22.5], [35], [20.5], [6, 20.5], [8.5], [22.5], [8.5, 20.5], [23.5], [19], [23.5, 16]);
	},

	drawTClass: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1, color, [4.5], [33.5], [37, 33.5], [36.5, 34.5], [35, 35], [33, 35], [32, 35.3], [11.5, 35.3], [5, 34.5], [6.5, 33.5], [19.5], [33.5], [19.5, 31.5], [22.5, 31.5], [22.5, 32.5], [24, 32.5], [24, 33.5], [16.5], [33.5], [16.5, 32.8], [22.5], [32], [22.5, 30.5], [20.5], [32], [20.5, 30.5]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.8, color, [20.5], [32], [20.5, 28.5], [36], [32.8], [32, 32.8], [31, 33]);
	},

	drawHClass: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.5, color, [2], [22.5], [38.5, 22.5], [39, 22.4], [25, 22.5], [30.5], [21.5], [32, 22.5], [26.8], [21.5], [29.3, 21.5], [27.5], [21.2], [30.5, 21.2], [28], [22.5], [25.5, 19.5], [19.5, 22.5], [23.5], [20.5], [23.5, 17], [21], [22], [20.5, 18.5], [18], [22], [17.5, 18.5], [10.5], [21.5], [8, 22.5], [11.5], [21.5], [18.5, 21.5], [14], [20.8], [11.5, 21.9], [16], [20.5], [14.5, 21.5], [18.2], [20.5], [16.5, 21.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.5, color, [23.5], [17], [23.5, 15.5], [22.5], [17.5], [24.5, 17.5]);
	},

	drawBismarck: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.5, color, [3], [22.5], [38, 22.5], [38.3, 22], [30, 22.5], [30.8], [21], [33.5, 21.8], [27.3], [21.2], [29.8, 21.2], [27.3], [21.2], [29.8, 21.2], [27.5], [20.7], [30.5, 20.7], [28], [22.5], [25.5, 19.5], [19.5, 22.5], [23.5], [20.5], [23.5, 17], [21], [22], [20.5, 18.5], [10.5], [21.5], [8, 22.5], [11.5], [21.5], [18.5, 21.5], [14], [20.5], [11.5, 21.5], [16], [20.5], [14.5, 21.5], [18.2], [20.5], [16.5, 21.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.5, color, [23.5], [17], [23.5, 15.5], [22.5], [17.5], [24.5, 17.5]);
	},

	drawScharnhorst: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.5, color, [2], [22.5], [38, 22.5], [38.8, 22], [30, 22.5], [11], [21.5], [26.5, 21.5], [29.8], [21.3], [32.5, 21.5], [26.5], [21], [29, 21], [26.5], [20.8], [29.5, 20.8], [26], [20.5], [22, 20.5], [26], [19.8], [24.5, 19.8], [22.5], [20.5], [22.5, 17], [18], [20.8], [20.5, 20.8], [19.5], [21], [19.5, 17.5], [10.5], [21.2], [8, 21.5], [11.5], [20.5], [13.5, 20.5], [15], [21.5], [15, 19.2]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.5, color, [21.5], [17.5], [23.5, 17.5], [22.5], [17], [22.5, 15.5]);
	},

	drawDeutschland: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.3, color, [4], [22.5], [37, 22.5], [37.5, 21.3], [9, 22.2], [17], [21.2], [27.5, 20.5], [14], [21.5], [27.5, 21.5], [14], [20.8], [16, 20.8], [10.5], [21.5], [13.5, 21.5], [10], [21.5], [13.5, 20.8], [28], [20.5], [31, 21.2], [23.5], [20.5], [23.5, 17], [22.5], [17.5], [24.5, 17.5], [22.5], [18.5], [24, 18.5], [20], [21.5], [20, 18], [19.5], [21.5], [19, 18]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.5, color, [23.5], [17], [23.5, 15.5]);
	},

	drawGZeppelin: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.3, color, [4.5], [22], [36, 22], [5], [21], [37, 21], [17], [21], [19, 18], [20.5, 18], [20.5, 19.5], [23, 19.5], [25, 21]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.7, color, [36], [22], [37, 22], [37], [21], [38, 21], [5], [21], [4, 21], [5], [22], [4, 22], [17], [20], [16, 20]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.3, color, [20.5], [18], [20.5, 15]);
	},

	drawType7: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1, color, [5.5], [33.5], [35.5, 33.5], [34.5, 34.5], [32.5, 34.5], [30.5, 35.1], [14, 35.1], [12, 34.5], [8.5, 34.5], [7.5, 33.5], [19.5], [33.5], [20.5, 32], [23, 32], [23, 33.5], [25.5], [33.5], [25.5, 32.7], [16.5], [33.5], [16.5, 32.8]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.5, color, [21.5], [32], [21.5, 29.5]);
	},

	drawType23: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1, color, [5], [17.5], [37.2, 17.5], [37, 18.5], [36.5, 18.8], [34.5, 19.1], [6, 19.1], [5.5, 18.5], [4.5, 18.5], [5, 17.5], [18], [17.5], [20, 15.5], [24.5, 15.5], [24.5, 17.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.7, color, [22.5], [16], [22.5, 13.5]);
	},

	drawVeneto: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.5, color, [3], [22.5], [37, 22.5], [37.3, 22], [12, 22], [11], [22], [15, 21], [16], [21], [29, 21], [34.5], [22], [29.5, 21], [27.5, 20.5], [24.5, 20.5], [24.5], [22], [23.5, 17], [23, 20.5], [19, 20.5], [17.5], [21], [17.5, 18.5], [19.5], [20], [19.5, 18.5], [21.5], [20], [21.5, 18.5]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.4, color, [22.5], [17], [22.5, 15]);
	},

	drawDuillio: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.5, color, [3], [22.5], [36.5, 22.5], [36.8, 22], [12, 22], [31], [22], [28, 21], [26, 21], [24], [22], [24, 17], [23.5, 17], [24.5, 19], [21.5, 21], [14, 21], [8, 22], [20.5], [21], [20.5, 18], [18.5], [21], [18.5, 18]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.4, color, [22.5], [17], [22.5, 14], [14.5], [21], [14.5, 17.5]);
	},

	drawBorgia: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.3, color, [4], [22.5], [37, 22.5], [37.2, 21.7], [20, 22.2], [9, 22.2], [29], [21], [34, 21.9], [22], [21.5], [23, 20], [28, 21.9], [20.5], [22], [20.5, 18], [16.5], [22], [16.5, 19], [15], [22], [14.5, 20.5], [10, 22], [9], [21.5], [7, 22]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.4, color, [20.8], [19], [21.5, 15], [16.8], [19], [17.5, 16]);
	},

	drawYamato: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.5, color, [2], [22.5], [38, 22.5], [38.3, 21.9], [30, 22.5], [14], [21], [23.5, 21], [22], [21], [22, 17], [19], [21], [18.5, 17.5]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 1, color, [24.5], [22], [24.5, 20], [12.5], [22], [12.5, 20.5], [14.5], [21], [14.5, 19.5], [25.5], [21.7], [27, 21.7], [25], [20.7], [27.5, 20.7], [28], [21], [31, 22], [11], [21], [8, 22], [23], [21], [23, 19], [21.5], [17], [21.5, 16]);
	},

	drawNagato: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.5, color, [3], [22.5], [38, 22.5], [39, 22], [14, 22], [12, 22.5], [29], [21], [16, 21], [35], [22], [32.5, 21.5], [29, 21], [14], [22.5], [13.5, 21], [12, 21], [7, 22.5], [26], [20], [26, 17], [23.5], [20], [23.5, 17], [19.5], [20], [19.5, 17.5], [16.5], [21], [16.5, 19.5]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 1, color, [27], [20], [27, 18.5], [28], [20], [28, 19]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.5, color, [16], [21], [17, 15], [25.5], [17], [25.5, 14]);
	},

	drawFuso: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.5, color, [3], [22.5], [38, 22.5], [38.2, 22], [14, 22], [10, 22.5], [33], [22], [30, 21], [29, 21], [26, 20], [25.5, 17], [25.5, 21], [21, 21], [19.5, 19], [19.5, 17], [19.5, 20.5], [14, 21], [14, 17.5], [13.5], [21], [8, 22]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.5, color, [14.5], [21], [14.5, 16], [26.5], [20], [26.5, 14.5], [26, 14], [26, 16]);
	},

	drawKongo: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.7, color, [3], [22.5], [38, 22.5], [38.2, 22], [23, 22], [19, 22.5], [33], [22], [30, 21], [29, 21], [29], [22], [29, 20.5], [27, 21], [25.5, 17], [24.5, 20], [22, 20], [21.5, 18.5], [21.5, 21], [16.5, 21], [16.5, 22], [14.5], [22], [14.5, 21.5], [12, 22]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1, color, [16.5], [22], [16.5, 18.5], [18.5], [22], [18.5, 18]);
	},

	drawShinano: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.7, color, [3.5], [22], [38, 22], [7], [21], [38.5, 21], [16], [21], [18, 19], [18.5, 17], [19, 17], [19, 18.5], [21, 18.5], [23, 21]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 1, color, [3.5], [22.5], [38, 22.5]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.5, color, [3], [20.5], [38, 20.5], [4.5], [22.5], [4.5, 20.5], [20.5], [18.5], [20.5, 14]);
	},

	drawTaiho: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.7, color, [4], [22], [38, 22], [10], [21], [38.5, 21], [4.5], [22], [4.5, 20.5], [18], [21], [20, 19.5], [20.5, 18], [21, 18], [21, 19], [22.5, 19], [24, 21]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1, color, [4], [22.5], [37.5, 22.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.5, color, [4], [20.5], [36.5, 20.5], [7.5], [22], [7.5, 20.5], [22.5], [18.5], [22.5, 15.5]);
	},

	drawSoryu: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.7, color, [7], [22], [35, 22], [7], [21], [35, 21], [19], [21], [20, 19], [21, 19], [22, 21]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1, color, [3], [22.5], [39, 22.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.5, color, [3], [20.5], [38, 20.5], [4.5], [22.5], [4.5, 20.5], [36.5], [22.5], [36.5, 20.5], [18.5], [20], [18.5, 16.5]);
	},

	drawKaga: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.7, color, [10], [22], [33, 22], [10], [21], [33, 21], [10], [20], [33, 20], [24.5], [20], [25.5, 18], [26, 18], [26.5, 20]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1, color, [3], [22.5], [38, 22.5], [7], [22.5], [10, 21.5], [33], [21.5], [38, 22.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.5, color, [3], [19.5], [38, 19.5], [4.5], [22.5], [4.5, 19.5], [7.5], [22.5], [7.5, 19.5], [37.5], [22.5], [37.5, 19.5], [34.5], [22.5], [34.5, 19.5]);
	},

	drawAkagi: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.7, color, [11], [22], [33, 22], [33, 20], [11, 20], [11, 22], [19.5], [20], [20.5, 18], [21, 18], [21.5, 20]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1, color, [3], [22.5], [38, 22.5], [3], [22.5], [11, 21.5], [33], [22], [38.5, 22]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.5, color, [3], [19.5], [37.5, 19.5], [4.5], [22.5], [4.5, 19.5], [6.5], [22.5], [6.5, 19.5], [8.5], [22.5], [8.5, 19.5], [37.5], [22.5], [37.5, 19.5], [35.5], [22.5], [35.5, 19.5], [18.5], [20], [18.5, 16.5]);
	},

	drawShokaku: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.7, color, [3], [22], [38.5, 22], [7], [21], [38, 21], [24], [21], [25, 19], [26, 19], [27, 21]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1, color, [3], [22.5], [38, 22.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.5, color, [3.5], [20.5], [38, 20.5], [4.5], [22.5], [4.5, 20.5]);
	},

	drawRyujo: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.7, color, [4], [22], [38, 22], [10], [21], [34, 21], [10], [20], [34, 20], [4.5], [22], [4.5, 20.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 1, color, [4], [22.5], [37.5, 22.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.5, color, [4], [19.5], [36.5, 19.5], [7.5], [22], [7.5, 20.5], [35.5], [22], [35.5, 20.5]);
	},


	drawSoyuz: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.7, color, [2], [22.5], [38.5, 22.5], [38.5, 22], [24, 22], [34], [22], [29, 21], [26.5], [22], [26.5, 18], [24.5], [22], [24.5, 17.5], [19.5], [22], [19.5, 17], [23], [21.5], [21, 21.5], [18], [21.5], [15, 21.5], [12], [21.5], [9, 21.5]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.3, color, [26.5], [18], [26.5, 15], [13.5], [22], [13.5, 16]);
	},

	drawGangut: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.7, color, [4], [22.5], [37, 22.5], [37.3, 22], [26, 21], [8, 22]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.5, color, [27], [22], [27, 17], [26], [22], [26, 17], [27], [21], [29, 21], [25], [21], [25, 19], [20], [22], [20, 17.5], [14], [22], [14, 18], [13], [22], [13, 19], [12], [22], [12, 20]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.7, color, [24], [19], [22.5, 17.5], [27.5], [17], [27.5, 15], [14.5], [18], [14.5, 16], [14], [18.5], [17, 18.5]);
	},

	drawJBart: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.4, color, [3], [22.5], [38, 22.5], [38.3, 22], [10, 22], [11], [22], [12, 21.5], [16, 21], [16.5, 18.5], [17, 18.5], [17.5, 22], [21, 22], [20.5, 17], [21, 17], [22, 20.5], [23, 20.5], [27, 22], [27], [22], [29, 21], [34, 22]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.4, color, [17.5], [18.5], [17.5, 16]);
	},

	drawDunkerque: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 0, 0, 1.4, color, [4], [22.5], [37.5, 22.5], [37.8, 22], [10, 22], [8, 22.5], [11], [22], [12, 21.5], [14, 21], [17.5, 21.5], [21, 22], [20.5, 17.5], [21, 17.5], [22, 20.5], [23, 20.5], [27, 22], [27], [22], [29, 21], [34, 22], [13.5], [22], [13.5, 18.5], [17.5], [22], [17.5, 18.5]);
	},

	drawBretagne: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.3, color, [3], [22.5], [38, 22.5], [38, 22], [8, 22], [6, 22.5], [9], [22], [10.5, 21.5], [16, 21], [25, 20.5], [25, 17.5], [25.5, 17.5], [25.5, 18.5], [27, 18.5], [27.5, 20.5], [31, 20.5], [35, 22], [19.5], [21], [19.5, 17.5], [26.5], [14], [26.5, 15]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.4, color, [15.5], [21], [15.5, 15], [26.5], [18.5], [26.5, 13.5]);
	},

	drawYavuz: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1.5, color, [3], [22.5], [38, 22.5], [38, 22], [8, 22], [6, 22.5], [9], [22], [12.5, 21], [14, 21], [17, 22], [21, 22], [24, 22], [25, 18.5], [25.5, 18.5], [25.5, 20], [35, 22], [19.5], [22], [19.5, 18.5]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.4, color, [26.5], [18.5], [26.5, 14.5]);
	},

	drawCA: function (ctx, unit, x, y, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1, color, [x + 3], [y + 12.5], [x + 28.5, y + 12.5], [x + 29, y + 11.5], [x + 6, y + 12.5], [x + 25], [y + 11.5], [x + 23, y + 10.9], [x + 20, y + 10.5], [x + 19.5, y + 11.5], [x + 22.5], [y + 10.5], [x + 21, y + 9.5], [x + 20, y + 9.5], [x + 19.5, y + 11.5], [x + 16], [y + 12.5], [x + 16, y + 9.5], [x + 16.9], [y + 12.5], [x + 12.5, y + 10.5], [x + 7, y + 12.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.4, color, [x + 19.5], [y + 11.5], [x + 19.5, y + 6], [x + 12.5], [y + 11.5], [x + 12.5, y + 7]);
	},

	drawDD: function (ctx, unit, x, y, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1, color, [x + 3], [y + 22.5], [x + 24, y + 22.5], [x + 24.5, y + 21.5], [x + 6, y + 22.5], [x + 22], [y + 21.5], [x + 16, y + 20.2], [x + 14, y + 22.5], [x + 17], [y + 21.5], [x + 16, y + 19.5], [x + 16.5, y + 21.5], [x + 17.5], [y + 21.5], [x + 17.5, y + 19], [x + 12], [y + 22], [x + 12, y + 19.5]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.8, color, [x + 10], [y + 21.9], [x + 7, y + 21.9]);
		WP.Unit.UI.makeShape(ctx, 0, 0, 0.4, color, [x + 16.5], [y + 21], [x + 16.5, y + 16.8]);
	},

	drawDE: function (ctx, unit, color) {
		WP.Unit.UI.makeShape(ctx, 1, 0, 1, color, [5], [20.5], [34.7, 20.5], [35.5], [19.5], [15, 19.5], [29], [18.5], [22.5, 18.5], [23.5], [19.5], [23.5, 16], [24.5, 16], [26.5, 18.5], [21.5], [19.5], [21.5, 16], [17.5], [19.5], [17.5, 16.5], [20.5], [18.2], [22.5, 18.2], [9], [19.8], [13.5, 19.8], [10], [19.2], [11.5, 19.2], [30], [18.8], [32.5, 18.8], [27.5], [18.9], [27.5, 17.5]);
		WP.Unit.UI.makeShape(ctx, 1, 0, 0.5, color, [23.5], [16], [22.8, 12], [35.5], [19.5], [36, 18]);
	},


	drawAdvSub: function (ctx, unit) {
		WP.Unit.UI.drawColorRect(ctx, 3, 3, 36, 20, "purple");
		WP.Unit.UI.Text.writeBottomMiddleStrength(ctx, unit, 0, 1);
		var color = new WP.Color(255, 255, 255);
		WP.Unit.UI.Text.writeDoubleGenericText(ctx, unit, "AdvSub", 'bold 8px verdana', 21, 11, color);
		WP.Unit.UI.Naval.drawType23(ctx, unit, color);
	},

	drawAsw: function (ctx, unit) {
		switch (unit.owner.name.toLowerCase()) {
			case "britain": case "america": case "us": case "united states": case "unitedstates": WP.Unit.UI.drawSharedAlliedBase(ctx, unit); break;
			default: break;
		}
		WP.Unit.UI.drawColorRect(ctx, 3, 3, 36, 20, "blue");
		WP.Unit.UI.Text.writeBottomMiddleStrength(ctx, unit, 0, 1);
		var color = new WP.Color(255, 255, 255);
		WP.Unit.UI.Text.writeDoubleGenericText(ctx, unit, "ASW", 'bold 8px verdana', 21, 11, color);
		WP.Unit.UI.Naval.drawDE(ctx, unit, color);
	},

	drawBattleship: function (ctx, unit) {
		var owner = unit.owner.name.toLowerCase()
		var bbcode = WP.Unit.UI.Naval.getBBCode(unit);
		var black = new WP.Color(40, 40, 40);
        var color
		WP.Unit.UI.Text.writeShipType(ctx, unit, bbcode);
		if (unit.slow) { WP.Unit.UI.drawNavalColorBox(ctx, "orange"); color = black; }
		else { color = unit.owner.foreColor; }
		if (unit.sunk) { WP.Unit.UI.drawSunk(ctx, unit); color = black; }
		switch (owner) {
			case "america": case "unitedstates": case "united states": case "us": WP.Unit.UI.Naval.selectUsBB(ctx, unit, color); break;
			case "britain": WP.Unit.UI.Naval.selectGbBB(ctx, unit, color); break;
			case "france": case "vichy": case "free french": WP.Unit.UI.Naval.selectFrBB(ctx, unit, color); break;
			case "germany": WP.Unit.UI.Naval.selectGeBB(ctx, unit, color); break;
			case "italy": WP.Unit.UI.Naval.selectItBB(ctx, unit, color); break;
			case "japan": WP.Unit.UI.Naval.selectJaBB(ctx, unit, color); break;
			case "russia": WP.Unit.UI.Naval.selectRuBB(ctx, unit, color); break;
			case "turkey": WP.Unit.UI.Naval.drawYavuz(ctx, unit, color); break;
			default: WP.Unit.UI.Naval.selectItBB(ctx, unit, color); break;
		}
	},

	getBBCode: function (unit) {
		var bbcode;
		var stren = unit.strength;
		var owner = unit.owner.name.toLowerCase();
		if (((owner == "britain") || (owner == "japan")) && !(unit.slow) && ((stren == 3) || (stren == 2))) { bbcode = "BC"; }
		else if ((owner == "germany") && (stren == 3)) { bbcode = "BC"; }
		else if (((owner == "italy") || (owner == "turkey") || (owner == "us")) && (stren == 2)) { bbcode = "BC"; }
		else if ((owner == "germany") && (stren == 2)) { bbcode = "PB"; }
		else { bbcode = "BB"; }
		return bbcode;
	},

	selectUsBB: function (ctx, unit, color) {
		var name = unit.name;
		switch (unit.strength) {
			case 5: WP.Unit.UI.Naval.drawIowa(ctx, unit, color); break;
			case 4: switch (name) {
					case "Alabama": case "Indiana": case "Mass": case "Mass.": case "S.Dakota": WP.Unit.UI.Naval.drawSDakota(ctx, unit, color); break;
					default: WP.Unit.UI.Naval.drawNCarolina(ctx, unit, color); break;
				}; break;
			case 3: switch (name) {
					case "Texas": case "New York": WP.Unit.UI.Naval.drawNYork(ctx, unit, color); break;
					case "Maryland": case "Colorado": case "Tennessee": WP.Unit.UI.Naval.drawColorado(ctx, unit, color); break;
					case "Pennslvnia": case "Arizona": case "Oklahoma": WP.Unit.UI.Naval.drawPenn(ctx, unit, color); break;
					case "New Mexico": case "Idaho": case "Mississippi": WP.Unit.UI.Naval.drawNMexico(ctx, unit, color); break;
					default: WP.Unit.UI.Naval.drawVirginia(ctx, unit, color); break;
				}; break;
			default: WP.Unit.UI.Naval.drawAlaska(ctx, unit, color); break;
		}
	},

	selectGbBB: function (ctx, unit, color) {
		var name = unit.name
		var slow = unit.slow
		switch (unit.strength) {
			case 5: WP.Unit.UI.Naval.drawLion(ctx, unit, color); break;
			case 4: switch (name) {
					case "Nelson": case "Rodney": WP.Unit.UI.Naval.drawNelson(ctx, unit, color); break;
					case "Vanguard": WP.Unit.UI.Naval.drawVanguard(ctx, unit, color); break;
					default: WP.Unit.UI.Naval.drawKGV(ctx, unit, color); break;
				}; break;
			case 3: switch (name) {
					case "Revenge": case "Royal Oak": case "R.Sovereign": case "Resolution": WP.Unit.UI.Naval.drawRoyalOak(ctx, unit, color); break;
					case "Malaya": case "Barham": WP.Unit.UI.Naval.drawBarham(ctx, unit, color); break;
					case "Warspite": case "Valiant": case "Q.Elizabeth": case "Ramilles": WP.Unit.UI.Naval.drawWarspite(ctx, unit, color); break;
					default: WP.Unit.UI.Naval.drawReknown(ctx, unit, color); break;
				}; break;
			default: WP.Unit.UI.Naval.drawReknown(ctx, unit, color); break;
		}
	},

	selectFrBB: function (ctx, unit, color) {
		var slow = unit.slow
		switch (unit.strength) {
			case 4: WP.Unit.UI.Naval.drawJBart(ctx, unit, color); break;
			case 3: switch (slow) {
					case slow == 1: WP.Unit.UI.Naval.drawBretagne(ctx, unit, color); break;
					default: WP.Unit.UI.Naval.drawDunkerque(ctx, unit, color); break;
				}; break;
			default: WP.Unit.UI.Naval.drawDunkerque(ctx, unit, color); break;
		}
	},

	selectGeBB: function (ctx, unit, color) {
		switch (unit.strength) {
			case 5: WP.Unit.UI.Naval.drawHClass(ctx, unit, color); break;
			case 4: WP.Unit.UI.Naval.drawBismarck(ctx, unit, color); break;
			case 3: WP.Unit.UI.Naval.drawScharnhorst(ctx, unit, color); break;
			default: WP.Unit.UI.Naval.drawDeutschland(ctx, unit, color); break;
		}
	},

	selectItBB: function (ctx, unit, color) {
		switch (unit.strength) {
			case 4: WP.Unit.UI.Naval.drawVeneto(ctx, unit, color); break;
			case 3: WP.Unit.UI.Naval.drawDuillio(ctx, unit, color); break;
			default: WP.Unit.UI.Naval.drawBorgia(ctx, unit, color); break;
		}
	},

	selectJaBB: function (ctx, unit, color) {
		var name = unit.name
		switch (unit.strength) {
			case 5: WP.Unit.UI.Naval.drawYamato(ctx, unit, color); break;
			case 4: WP.Unit.UI.Naval.drawNagato(ctx, unit, color); break;
			case 3: switch (name) {
					case "Kongo": case "Kirishima": WP.Unit.UI.Naval.drawKongo(ctx, unit, color); break;
					default: WP.Unit.UI.Naval.drawFuso(ctx, unit, color); break;
				}; break;
			default: WP.Unit.UI.Naval.drawFuso(ctx, unit, color); break;
		}
	},

	selectRuBB: function (ctx, unit, color) {
		var slow = unit.slow
		switch (unit.strength) {
			case 2: if (slow) { WP.Unit.UI.Naval.drawGangut(ctx, unit, color); } break;
			default: WP.Unit.UI.Naval.drawSoyuz(ctx, unit, color); break;
		}
	},

	drawCruiser: function (ctx, unit) {
		WP.Unit.UI.Text.writeShipType(ctx, unit, "CA");
		WP.Unit.UI.Text.writeGenericText(ctx, unit, unit.name, "bold 7px verdana", 31, 8);
		if (unit.sunk) {
			WP.Unit.UI.drawSunk(ctx, unit);
			var color = new WP.Color(40, 40, 40);
			WP.Unit.UI.Naval.drawCA(ctx, unit, 0, 7, color);
			WP.Unit.UI.Naval.drawCA(ctx, unit, 6, 10, color);
		}
		else {
			var color = unit.owner.foreColor
			var owner = unit.owner.name.toLowerCase()
			if ((owner == "germany") || (owner == "japan")) {
				WP.Unit.UI.Naval.drawCA(ctx, unit, 0, 0, color);
				WP.Unit.UI.Naval.drawCA(ctx, unit, 4, 10, color);
			}
			WP.Unit.UI.Naval.drawCA(ctx, unit, 0, 0, color);
			WP.Unit.UI.Naval.drawCA(ctx, unit, 4, 10, color);
		}
	},

	drawCarrier: function (ctx, unit) {
        var color
		var CVCode = WP.Unit.UI.Naval.getCVCode(unit);
		var black = new WP.Color(40, 40, 40);
		WP.Unit.UI.Text.writeShipType(ctx, unit, CVCode);
		if (unit.sunk) { WP.Unit.UI.drawSunk(ctx, unit); color = black; }
		else {
			WP.Unit.UI.drawNavalColorBox(ctx, "yellow");
			color = black;
		}
		switch (unit.owner.name.toLowerCase()) {
			case "america": case "unitedstates": case "united states": case "us": { WP.Unit.UI.Naval.selectUsCV(ctx, unit, color); break; }
			case "britain": { WP.Unit.UI.Naval.selectGbCV(ctx, unit, color); break; }
			case "germany": { WP.Unit.UI.Naval.drawGZeppelin(ctx, unit, color); break; }
			case "italy": { WP.Unit.UI.Naval.drawIndependence(ctx, unit, color); break; }
			case "japan": { WP.Unit.UI.Naval.selectJaCV(ctx, unit, color); break; }
			default: { WP.Unit.UI.Naval.selectUsCV(ctx, unit, color); break; }
		}
	},

	getCVCode: function (unit) {
		var CVCode;
		switch (unit.strength) {
			case 4: { CVCode = "CVB"; break; }
			case 3: { CVCode = "CV"; break; }
			case 2: { CVCode = "CVL"; break; }
			default: { CVCode = "CV"; break; }
		}
		return CVCode;
	},

	selectUsCV: function (ctx, unit, color) {
		var name = unit.name
		switch (unit.strength) {
			case 4: WP.Unit.UI.Naval.drawMidway(ctx, unit, color); break;
			case 3: switch (name) {
					case "Lexington": case "Saratoga": WP.Unit.UI.Naval.drawLexington(ctx, unit, color); break;
					case "Yorktown": case "Enterprise": case "Hornet": WP.Unit.UI.Naval.drawYorktown(ctx, unit, color); break;
					default: WP.Unit.UI.Naval.drawEssex(ctx, unit, color); break;
				}; break;
			case 2: WP.Unit.UI.Naval.drawIndependence(ctx, unit, color); break;
			default: WP.Unit.UI.Naval.drawIndependence(ctx, unit, color); break;
		}
	},

	selectGbCV: function (ctx, unit, color) {
		switch (unit.name) {
			case "Ark Royal": WP.Unit.UI.Naval.drawArkRoyal(ctx, unit, color); break;
			default: WP.Unit.UI.Naval.drawCourageous(ctx, unit, color); break;
		}
	},

	selectJaCV: function (ctx, unit, color) {
		var name = unit.name
		switch (unit.strength) {
			case 4: WP.Unit.UI.Naval.drawShinano(ctx, unit, color); break;
			case 3: switch (name) {
					case "Akagi": WP.Unit.UI.Naval.drawAkagi(ctx, unit, color); break;
					case "Kaga": WP.Unit.UI.Naval.drawKaga(ctx, unit, color); break;
					case "Taiho": WP.Unit.UI.Naval.drawTaiho(ctx, unit, color); break;
					case "Shokaku": case "Zuikaku": WP.Unit.UI.Naval.drawShokaku(ctx, unit, color); break;
					default: WP.Unit.UI.Naval.drawSoryu(ctx, unit, color); break;
				}; break;
			case 2: switch (name) {
					case "Hiyo": case "Junyo": WP.Unit.UI.Naval.drawTaiho(ctx, unit, color); break;
					default: WP.Unit.UI.Naval.drawRyujo(ctx, unit, color); break;
				}; break;
			default: WP.Unit.UI.Naval.drawRyujo(ctx, unit, color); break;
		}
	},

	drawCve: function (ctx, unit) {
		if (unit.sunk) { WP.Unit.UI.drawSunk(ctx, unit); }
		else { WP.Unit.UI.drawNavalColorBox(ctx, "purple"); }
		var color = new WP.Color(30, 30, 30);
		WP.Unit.UI.Text.writeShipType(ctx, unit, "CVE");
		if (unit.owner.name.toLowerCase() == "britain") { WP.Unit.UI.Naval.drawRuler(ctx, unit, color); }
		else { WP.Unit.UI.Naval.drawBogue(ctx, unit, color); }
	},

	drawDestroyer: function (ctx, unit) {
		var color = unit.owner.foreColor
		var owner = unit.owner.name.toLowerCase()
		if (unit.sunk) {
			WP.Unit.UI.drawSunk(ctx, unit);
			color = new WP.Color(30, 30, 30);
			WP.Unit.UI.Naval.drawDD(ctx, unit, 0, -2, color);
			WP.Unit.UI.Naval.drawDD(ctx, unit, 6, 0, color);
			WP.Unit.UI.Naval.drawDD(ctx, unit, 14, -3, color);
		}
		else {
			WP.Unit.UI.Naval.drawDD(ctx, unit, 0, 2, color);
			WP.Unit.UI.Naval.drawDD(ctx, unit, 2, -12, color);
			WP.Unit.UI.Naval.drawDD(ctx, unit, 14, -5, color);
			if ((owner == "germany") || (owner == "japan")) {
				WP.Unit.UI.Naval.drawDD(ctx, unit, 0, 2, color);
				WP.Unit.UI.Naval.drawDD(ctx, unit, 2, -12, color);
				WP.Unit.UI.Naval.drawDD(ctx, unit, 14, -5, color);
			}
		}
		WP.Unit.UI.Text.writeGenericText(ctx, unit, unit.name, "bold 7px verdana", 31, 8);
		WP.Unit.UI.Text.writeShipType(ctx, unit, "DD");
	},

	drawSub: function (ctx, unit) {
		var text = "Sub";
		var owner = unit.owner.name.toLowerCase()
		WP.Unit.UI.drawColorRect(ctx, 2, 19, 37, 19, "blue");
		var color = new WP.Color(255, 255, 255);
		if (owner == "germany") { text = "U-Boat"; }
		WP.Unit.UI.Text.writeDoubleGenericText(ctx, unit, text, 'bold 8px verdana', 20, 27, color);
		switch (owner) {
			case "america": case "us": case "united states": case "unitedstates": WP.Unit.UI.Naval.drawGato(ctx, unit, color); break;
			case "britain": WP.Unit.UI.Naval.drawTClass(ctx, unit, color); break;
			default: WP.Unit.UI.Naval.drawType7(ctx, unit, color); break;
		}
		WP.Unit.UI.Text.writeTopMiddleStrength(ctx, unit);
	},

	drawTaskForce: function (ctx, unit) {
		ctx.drawImage(unit.owner.flagImage, 6.5, 4);
		WP.Unit.UI.drawFlagOutline(ctx);
		WP.Unit.UI.Text.writeGenericText(ctx, unit, "TF" + unit.name, "bold 15px arial", 21, 37);
	},

	drawTransport: function (ctx, unit) {
		switch (unit.owner.name.toLowerCase()) {
			case "america": case "us": case "united states": case "unitedstates": case "britain": WP.Unit.UI.drawSharedAlliedBase(ctx, unit); break;
			default: break;
		}
		WP.Unit.UI.Text.writeAutoGenericText(ctx, unit, "Transport", "bold 7px verdana", 21, 10);
		WP.Unit.UI.Text.writeBottomMiddleStrength(ctx, unit);
		WP.Unit.UI.makeShape(ctx, 1, 0, 1, unit.owner.foreColor, [5], [22.5], [36, 22.5], [37, 18.5], [30, 19], [28, 20], [17, 20], [16.5, 16], [11.5, 16], [11.5, 18], [8.5, 18], [8.5, 20], [4.5, 19.5], [5, 22], [14], [16], [13.5, 13]);
	}
}

WP.Unit.prototype.toString = function () {
	return this.type + ", name: " + this.name + ", strength: " + this.strength + ", movement: " + this.movement + ", id: " + this.id;
}

WP.Unit.UI.Text = {
	writeDesignation: function (ctx, unit) {
		var owner = unit.owner.name.toLowerCase()
		if (!(unit.name == null)) {
			ctx.save();
			ctx.font = '8px verdana';
			ctx.textAlign = "right";
			ctx.fillStyle = unit.owner.foreColor.toRgb();
			ctx.rotate(4.71);
			ctx.fillText(unit.name, -3, 38, 25);
			ctx.restore();
		}
	},

	writeStrengthAndMovement: function (ctx, unit) {
		var useMove;
		if (game.currentMap == game.maps[1] && unit.location == 2) {
			switch (unit.type) {
				case "airtransport": case "at": case "air trans":
				case "aaf":
				case "armor": case "arm": useMove = 3; break;
				case "mechanized": case "mech":
				case "chindit":
				case "airborne":
				case "marine":
				case "commando":
				case "partisan": case "px": case "pw": case "pc":
				case "alliedpartisan": case "axispartisan": case "communistpartisan": case "compartisan":
				case "infantry": case "i": useMove = 2; break;
				default: useMove = unit.movement;
			}
		}
		else useMove = unit.movement;
		ctx.font = "bold 16px arial";
		ctx.textAlign = "center";
		ctx.fillStyle = unit.owner.foreColor.toRgb();
		var sp = 11;
		var dp = 18;
		var mp = 26;

		if (unit.strength > 9) {
			sp += 1;
			dp += 5;
			mp += 5;
		}

		ctx.fillText(unit.strength, sp, 35);
		ctx.fillText("-", dp, 35);
		ctx.fillText(useMove, mp, 35);
	},

	writeBottomLeftStrength: function (ctx, unit) {
		ctx.font = 'bold 14px arial';
		ctx.textAlign = "center";
		ctx.fillStyle = unit.owner.foreColor.toRgb();
		ctx.fillText(unit.strength, 10, 39, 37);
	},

	writeBottomMiddleStrength: function (ctx, unit, x, y) {
		if (x == null) { x = 0 }
		if (y == null) { y = 0 }
		WP.Unit.UI.Text.writeMiddleStrength(ctx, unit, 38 + x, y);
	},

	writeTopMiddleStrength: function (ctx, unit, x, y) {
		if (x == null) { x = 0 }
		if (y == null) { y = 0 }
		WP.Unit.UI.Text.writeMiddleStrength(ctx, unit, 16);
	},

	writeMiddleStrength: function (ctx, unit, x, y) {
		if (x == null) { x = 0 }
		if (y == null) { y = 0 }
		ctx.font = "bold 16px arial";
		ctx.textAlign = "center";
		ctx.fillStyle = unit.owner.foreColor.toRgb();
		ctx.fillText(unit.strength, 20 + y, x);
	},

	writeTopText: function (ctx, unit, text) {
		ctx.font = '10px arial';
		ctx.textAlign = "center";
		ctx.fillStyle = unit.owner.foreColor.toRgb();
		ctx.fillText(text, 20, 10, 37);
	},

	writeGenericText: function (ctx, unit, text, font, xMod, yMod, color) {
		if (xMod == null) { xMod = 21 }
		if (yMod == null) { yMod = 22 }
		if (color == null) { color = unit.owner.foreColor }
		ctx.font = font;
		ctx.textAlign = "center";
		ctx.fillStyle = color.toRgb();
		ctx.fillText(text, xMod, yMod, 40);
	},

	writeDoubleGenericText: function (ctx, unit, text, font, xMod, yMod, color) {
		WP.Unit.UI.Text.writeGenericText(ctx, unit, text, font, xMod, yMod, color);
	},

	writeAutoGenericText: function (ctx, unit, text, font, xMod, yMod, color) {
		WP.Unit.UI.Text.writeGenericText(ctx, unit, text, font, xMod, yMod, color);
	},

	writeShipType: function (ctx, unit, text) {
		var owner = unit.owner.name.toLowerCase();
		if (unit.name.length <= 8) { ctx.font = 'italic bold 8px tahoma'; }
		else { ctx.font = 'italic bold 7px tahoma'; }
		ctx.textAlign = "center";
		ctx.fillStyle = unit.owner.foreColor.toRgb();
		if (!(unit.type == "dd") && !(unit.type == "destroyer") && !(unit.type == "cruiser") && !(unit.type == "Cruiser")) {
			ctx.fillText(unit.name, 20, 10, 37);
		}

		var color = unit.owner.foreColor;

		ctx.font = 'bold 14px helvetica';
		ctx.textAlign = "left";
		ctx.fillStyle = color.toRgb();
		ctx.fillText(unit.strength, 24, 38, 37);

		WP.Unit.UI.Text.writeShipCode(ctx, text, color);
	},

	writeShipCode: function (ctx, text, color) {
		switch (text) {
			case "DD":
				WP.Unit.UI.Text.drawD(ctx, color, 10, 34);
				WP.Unit.UI.Text.drawD(ctx, color, 17, 34);
				break;
			case "CA":
				WP.Unit.UI.Text.drawC(ctx, color, 10, 34);
				WP.Unit.UI.Text.drawA(ctx, color, 17, 34);
				break;
			case "BB":
				WP.Unit.UI.Text.drawB(ctx, color, 10, 34);
				WP.Unit.UI.Text.drawB(ctx, color, 17, 34);
				break;
			case "BC":
				WP.Unit.UI.Text.drawB(ctx, color, 10, 34);
				WP.Unit.UI.Text.drawC(ctx, color, 17, 34);
				break;
			case "PB":
				WP.Unit.UI.Text.drawP(ctx, color, 10, 34);
				WP.Unit.UI.Text.drawB(ctx, color, 17, 34);
				break;
			case "CV":
				WP.Unit.UI.Text.drawC(ctx, color, 10, 34);
				WP.Unit.UI.Text.drawV(ctx, color, 17, 34);
				break;
			case "CVB":
				WP.Unit.UI.Text.drawC(ctx, color, 4, 34);
				WP.Unit.UI.Text.drawV(ctx, color, 10, 34);
				WP.Unit.UI.Text.drawB(ctx, color, 18, 34);
				break;
			case "CVE":
				WP.Unit.UI.Text.drawC(ctx, color, 4, 34);
				WP.Unit.UI.Text.drawV(ctx, color, 10, 34);
				WP.Unit.UI.Text.drawE(ctx, color, 18, 34);
				break;
			case "CVL":
				WP.Unit.UI.Text.drawC(ctx, color, 4, 34);
				WP.Unit.UI.Text.drawV(ctx, color, 10, 34);
				WP.Unit.UI.Text.drawL(ctx, color, 18, 34);
				break;
			default:
				ctx.font = 'bold 9px verdana';
				ctx.textAlign = "right";
				ctx.fillStyle = color.toRgb();
				ctx.fillText(text, 23, 38, 37);
				break;
		}

	},

	drawA: function (ctx, color, x, y) { WP.Unit.UI.makeShape(ctx, 0, 0, 1.3, color, [x + 0], [y + 3.5], [x + 2.5, y - 3.2], [x + 3.5, y - 3.2], [x + 6, y + 3.5], [x + 1], [y + 1.8], [x + 5, y + 1.8]); },
	drawB: function (ctx, color, x, y) { WP.Unit.UI.makeShape(ctx, 0, 0, 1.3, color, [x + 0], [y - 0.5], [x + 0, y - 3.2], [x + 2.8, y - 3.2], [x + 5, y - 2.5, x + 2.8, y - 0.5], [x + 0, y - 0.5], [x + 0], [y - 0.5], [x + 0, y + 3.2], [x + 2.8, y + 3.2], [x + 5.5, y + 1.5, x + 2.8, y - 0.5]); },
	drawC: function (ctx, color, x, y) { WP.Unit.UI.makeShape(ctx, 0, 0, 1.3, color, [x + 0], [y - 0], [x + 0, y - 1.5], [x + 1.5, y - 5.2, x + 4.8, y - 1.5], [x + 0], [y + 0], [x + 0, y + 1.5], [x + 1.5, y + 5.2, x + 4.8, y + 1.5]); },
	drawD: function (ctx, color, x, y) { WP.Unit.UI.makeShape(ctx, 0, 0, 1.3, color, [x + 0], [y + 0], [x + 0, y - 3.2], [x + 2.5, y - 3.2], [x + 4, y - 3, x + 4.5, y + 0], [x + 0], [y + 0], [x + 0, y + 3.2], [x + 2.5, y + 3.2], [x + 4, y + 3, x + 4.5, y + 0]); },
	drawE: function (ctx, color, x, y) { WP.Unit.UI.makeShape(ctx, 0, 0, 1.3, color, [x + 0], [y - 0.5], [x + 0, y - 3.2], [x + 4.8, y - 3.2], [x + 0], [y - 0.5], [x + 3.8, y - 0.5], [x + 0], [y - 0.5], [x + 0, y + 3.2], [x + 4.8, y + 3.2]); },
	drawL: function (ctx, color, x, y) { WP.Unit.UI.makeShape(ctx, 0, 0, 1.3, color, [x + 0], [y - 0.5], [x + 0, y - 3.7], [x + 0], [y - 0.5], [x + 0, y + 3.2], [x + 4.8, y + 3.2]); },
	drawP: function (ctx, color, x, y) { WP.Unit.UI.makeShape(ctx, 0, 0, 1.3, color, [x + 0], [y - 0.5], [x + 0, y - 3.2], [x + 2.8, y - 3.2], [x + 5, y - 2.5, x + 2.8, y - 0.5], [x + 0, y - 0.5], [x + 0], [y - 0.5], [x + 0, y + 3.2]); },
	drawV: function (ctx, color, x, y) { WP.Unit.UI.makeShape(ctx, 0, 0, 1.3, color, [x + 2.5], [y + 3.5], [x + 0.5, y - 3.5], [x + 3.5], [y + 3.5], [x + 5.5, y - 3.5]); }

}

'use strict';


WP.Forcepool = class {
    constructor () {
        this.unitHolder = null;
    }

    removeUnitFrom () {}

    handleCountrySelected (id) {
        var cty = game.getCountry(id)
        $("#fpCountryFlag").attr("src", WP.Country.UI.getFlagUrl(cty));
        $('#fpGroupings').empty();
        $('#fpGroupings').append($("<option />")
			             .attr("value", "0")
			             .text("Unbuilt"))

                cty.forcepoolGroupings.forEach(group => {
        $('#fpGroupings')
			.append($("<option />")
			.attr("value", group.id)
			.text(group.name));
        })
    }
    onMouseDown (e) {
        var point = getPoint('forcepoolCanvas', e)
        var stack = forcepool.unitHolder.findStackFor(point.x, point.y);
        if (stack) {
            game.setSelectedUnit(stack.getTopUnit());
            forcepool.unitHolder.drawStack(stack);
        }
        else {
            game.setSelectedUnit(null);
        }
    }
    draw () {
       var id = $('#fpGroupings').val()
	   var cty = game.getCountry($('#fpCountry').val())
	   var units = []
       cty.units.forEach(u => {
            if (u.location == 1 && u.fpg == id) {
                units.push(u)
            }
        })
        var holder = WP.UnitHolder.unitHolderBuilder(forcepoolCtx, $("#fpDetails"));
        holder.units = units;
        holder.stackSimilar = $('#fpStackCheckbox').is(':checked');
        holder.draw();
        forcepool.unitHolder = holder;
    }


        }

WP.Forcepool.Mouse = {}









WP.Forcepool.UI = {
	addCountryToDropdown: function(cty) {
		$('#fpCountry').append($("<option />").attr("value", cty.id).text(cty.name));
	},

	fillCountryList: function() {
		$('#fpCountry').empty();
		var majors = game.getMajorPowers();
        majors.forEach(m => WP.Forcepool.UI.addCountryToDropdown(m))

                game.countries.forEach(cty => {
           if (!cty.isMajorPower && cty.units.length > 0) {
		        WP.Forcepool.UI.addCountryToDropdown(cty)
           }
        })

        		forcepool.handleCountrySelected($('#fpCountry').val());
	},

	handleMenuButton: function() {
		$("#forcepoolDialog").dialog('open');
		$("#forcepoolDialog").dialog("option", "width", 540);
		$("#forcepoolDialog").dialog("option", "height", 340);
		$("#forcepoolDialog").dialog("option", "resizable", false);

		WP.Forcepool.UI.fillCountryList();
		forcepool.draw();
	}
};



'use strict';


WP.Game = class {
    constructor () {
        this.name = 'not set'
        this.mapIndex = 0
        this.zoomLevel = 1
        this.type = null
        this.countries = null
        this.maps = null
        this.currentMap = null
        this.selectedUnit = null
        this.gameType = null
        this.shipyards = null
        this.taskforces = null
        this.selectedTaskforce = null
        this.state = 0;
        this.newspaper = "";
        this.codebreakingResults = null;
        this.hexControlDialogIsOpen = false;
        this.currentYear = 2011;
        this.currentSeason = "Season";
        this.currentPhaseId = null;
        this.currentCoalition = null;
        this.currentPhase = null;
        this.showUnitTexture = true;
        this.noSwastikas = true;
    }
    static gameBuilder () {
        game = new WP.Game()
        game.name = "new"
        game.countries = []
        game.shipyards = []
        game.maps = new Array(2)
        game.maps[0] = new WP.Map("euro", 0)
        game.maps[0].createHexes(0)
        game.maps[1] = new WP.Map("pac", 1)
        game.maps[1].createHexes(1)
        game.currentMap = game.maps[0]
        return game
    }
    addCountry (country) {
        if (!this.countries) this.countries = [];
        this.countries.push(country);       
    }
    addCodebreakingResult (result) {
        if (!this.codebreakingResults) this.codebreakingResults = [];
        this.codebreakingResults.push(result);
    }
    addShipyard (shipyard) {
        if (!this.shipyards) this.shipyards = [];
        this.shipyards.push(shipyard);       
    }
    addTaskforce (taskforce) {
        if (!this.taskforces) this.taskforces = [];
        this.taskforces.push(taskforce);        
    }
    addUnitToHex (unit, hex, stack) {
        var hexDetails = hex.split('/');
        var map = this.maps[hexDetails[0]];
        var addHex = map.getHex(hexDetails[1]);
        addHex.addUnit(unit, stack)
    }
    getAllHighlightedUnits () {
        var units = []
        var i = -1;

        for (var ci = 0; ci < this.countries.length; ci++) {
            var ctry = this.countries[ci];
            for (var ui = 0; ui < ctry.units.length; ui++) {
                var unit = ctry.units.length[ui];
                if (!unit) continue;
                if (unit.highlighted)
                units[++i] = unit;
            }
        }  
        return units;
    }
    getCountry (id) {
        var res = null
        this.countries.forEach(cty => {
            if(cty.id == id) { res = cty }
        })
        if (res == null) {
         console.log("Game.getCountry(id): Unknown country: " + id);           
        }

        return res;
    }
    getCurrentMapId () {
        var mapId = 0;
        if (game.currentMap == game.maps[1]) mapId = 1;
        return mapId;       
    }
    getCountryFromName (name) {
        var res = null
        this.countries.forEach(cty => {
            if (cty.name == name) { res = cty }
        })
        if (res == null){
            console.log("Game.getCountryFromName: Unknown country: " + name);
        }
        return res;
    }
    setCurrentDate (currentPhaseId, year, season) {
        if (!phase) phase = new WP.Phase();
        phase.initPhases();
        phase.processLoadedPhase(currentPhaseId, year, season);
        phase.refreshPhase();  
    }
    getShipyards (id) {
        var res = null
        this.shipyards.forEach(sy => {
            if (sy.id == id) { res = sy }
        })
        alert("Game.getShipyards: Unknown shipyard: " + id);
        return res;      
    }
    getShipyardFromName (name) {
        var res = null
        this.shipyards.forEach(sy => {
            if (sy.name == name) { res = sy }
        })
        alert("Game.getShipyardFromName: Unknown shipyard: " + name);
        return res        
    }
    getShipyardFromUnit (unitId) {
        var res = null
        this.shipyards.forEach(sy => {
            sy.shipyardUnits.forEach(syu => {
                if (syu.id == unitId) { res = sy }
            })
        })
        if (res == null) {
         alert("Game.getShipyard from unit: Unknown shipyard with: " + unitId);           
        }
        return res;      
    }
    getTaskforceFromUnit (unitId) {
        var res = null
        this.taskforces.forEach(tf => {
            tf.taskforceUnits.forEach(tfu => {
                if (tfu.id == unitId) { res = tf }
            })
        })
        if (res == null) {
         alert("Game.getTaskforce from unit: Unknown taskforce with: " + unitId);           
        }
        return res;   
    }

    getUnitForShipyard (id, x, y) {
        var res = null
        this.countries.forEach(cty => {
            cty.units.forEach(cu => {
                if (cu.id == id) {
                    cu.holderX = x
                    cu.holderY = y
                    res = cu
                }
            })
        })
        return res       
    }
    getTaskforces (id) {
        var res = null
        this.taskforces.forEach(tf => {
            if (tf.id == id) { res = tf }
        })
        if (res == null){
          alert("Game.getTaskforces: Unknown taskforce: " + id);          
        }
        return res;        
    }
    getTaskforceFromOwner (owner) {
        var res = null
        this.taskforces.forEach(tf => {
            if (tf.owner == owner) { res = tf }
        })
        if (res == null) {
         alert("Game.getTaskforce: Unknown taskforce: " + owner);           
        }
        return res;
    }
    getUnitForTaskforce (id, x, y) {
        var res = null
        this.countries.forEach(cty => {
            cty.units.forEach(cu => {
                if (cu.id == id) {
                    cu.holderX = x
                    cu.holderY = y
                    res = cu
                }
            })
        })
        if (res == null) {
           alert("Game.getUnit forTaskforce: Unknown unit: " + id);           
        }
        return res        
    }
    getUnitFromCountryForGridDialog (id, x, y) {
        var res = null
        this.countries.forEach(cty => {
            cty.units.forEach(cu => {
                if (cu.id == id) {
                    cu.holderX = x
                    cu.holderY = y
                    res = cu
                }
            })
        })
        return res    
    }
    getMajorPowers () {
        var majors = []
        this.countries.forEach(cty => {
            if (cty.isMajorPower) { majors.push(cty) }
        })
        return majors;      
    }
    handleSelectUnselectOnBoard (unit) {
        if (unit && unit.hex) {
            unit.hex.draw();
        }        
    }
    handleSelectUnselectInDialog (unit, dialog) {
        if (!dialog) return;
        if (!dialog.unitHolder) return;
        var stack = dialog.unitHolder.findStackContaining(unit);
        if (stack) {
            dialog.unitHolder.drawStack(stack);
        }    
    }
    setInfoBarButtons () {
        $("#infoBarTopLeftWebsiteDiv").hide();
        $("#infoBarTopLeftGameDiv").show();        
    }
    setSelectedTaskforce (taskforce) {
        if (taskforce == this.selectedTaskforce) return;
        this.selectedTaskforce = taskforce;     
    }
    setSelectedUnit (unit) {
        if (unit == this.selectedUnit) return;

        var oldUnit = this.selectedUnit;
        this.selectedUnit = unit;

        this.handleSelectUnselectOnBoard(oldUnit);
        this.handleSelectUnselectInDialog(oldUnit, forcepool);
        this.handleSelectUnselectInDialog(oldUnit, shipsAtSea);
        this.handleSelectUnselectInDialog(oldUnit, shipyard);
        this.handleSelectUnselectInDialog(oldUnit, taskforce);
        this.handleSelectUnselectInDialog(oldUnit, unitCounter);

        this.handleSelectUnselectOnBoard(unit);
        this.handleSelectUnselectInDialog(unit, forcepool);
        this.handleSelectUnselectInDialog(unit, shipsAtSea);
        this.handleSelectUnselectInDialog(unit, shipyard);
        this.handleSelectUnselectInDialog(unit, taskforce);
        this.handleSelectUnselectInDialog(unit, unitCounter);       
    }
    switchTheaters () {
        WP.Misc.Ui.closeAllDialogs();
        game.selectedUnit = null;
        game.state = 0;
        if (game.currentMap == game.maps[0]) game.currentMap = game.maps[1];
        else game.currentMap = game.maps[0];
        onWindowResize();        
    }
    refreshCurrentTheater () {
        WP.Misc.Ui.closeAllDialogs();
        game.selectedUnit = null;
        game.state = 0;
        onWindowResize();
    }
    toggleShowUnitTexture (showTexture) {
        if (showTexture) { game.showUnitTexture = true; }
        else { game.showUnitTexture = false; }
        game.refreshCurrentTheater();       
    }
    toggleNoSwastikas(noSwastikas) {
        if (noSwastikas) { game.noSwastikas = true }
        else { game.noSwastikas = false }
        game.refreshCurrentTheater();
    }

    }


'use strict';

WP.GameSettings = class {
    constructor () {
    }

        update () {
        var showUnitTexture = $('#gsUnitTexture').is(':checked');
	    game.toggleShowUnitTexture(showUnitTexture);
        var noSwastikas = $('#gsNoSwastikas').is(':checked')
        game.toggleNoSwastikas(noSwastikas) 
    }


        }

WP.GameSettings.UI = {

	handleMenuButton: function () {
        console.log('gamesettings-handlemenubutton')
		$("#gameSettings").dialog('open');
		$("#gameSettings").dialog("option", "width", 530);
		$("#gameSettings").dialog("option", "resizable", false);
		gameSettings.update();
	}
}




'use strict';


WP.Hex = class {


        constructor (id, map, x, y) {
        this.id = id;
        this.map = map;
        this.letter = "A";
        this.number = 0;
        this.size = 36.45; 
        this.width = 0;
        this.owner = null;
        this.cityName = null;
        this.isPort = null;
        this.isCapital = null;
        this.isBeach = null;
        this.isTerrain = null;
        this.isIsland = null;
        this.units = new Array();
        this.coordinate = new Point(x, y);
        this.pixelPoint = new Point(x, y);
        this.unitStartPoint = new Point(x, y);
        this.background = null;
        this.largeBackground = null;
        this.setZoom = WP.Hex.UI.setHexZoom;

        this.toString = function () {
            return this.letter + this.number.toString();
        }

        WP.Hex.setAttributes(this);
    }
    static setAttributes(hex) {
        hex.letter = Convert.toAscii(hex.coordinate.y)
        hex.number = hex.coordinate.x + 16
        hex.number -= Math.floor(hex.coordinate.y / 2)
    }
    addUnit (unit) {
        if (!unit) return;
        this.units.push(unit)
        unit.location = 2;
        unit.hex = this;
    }
    addOrCombineUnit (unit) {
        for (var i = 0; i < this.units.length; i++) {
            if (unit.canCombineWith(this.units[i])) {
                this.units[i].strength += unit.strength;
                unit.owner.removeUnit(unit);
                return;
            }
        }
        this.addUnit(unit)
    }
    combineAllUnits (unit) {
        var combined = this.combineUnit(unit)
        while (combined) {
            combined = this.combineUnit(unit)
        }
    }
    combineUnit (unit) {
        for (var i = 0; i < this.units.length; i++) {
            if (unit.canCombineWith(this.units[i])) {
                unit.strength += this.units[i].strength;
                unit.owner.removeUnit(this.units[i]);
                this.removeUnit(this.units[i]);
                return true;
            }
        }
	return false;
    }
    getTopUnit () {
        if (!this.units || this.units.length < 1) { return null }
        return this.units[this.units.length - 1]
    }
    removeUnit (unit) {
        this.units = this.units.filter(un => un != unit)
        unit.hex = null
    }
    rotateUnits () {
        var unit = this.units.shift()
        this.addUnit(unit)
    }
    getOwner () {
        var owner = this.owner
        return owner
    }
    write (text) {
    	mapCtx.fillText(text, this.pixelPoint.x + 16, this.pixelPoint.y + 30);     
    }
    clear () {
        mapCtx.clearRect(this.unitStartPoint.x - 10, this.unitStartPoint.y - 9, this.width, (this.size * 1.6) - 1);
    }
    draw () {
        if (game.hexControlDialogIsOpen) { this.drawFlagsOnHexes(); return;  }

        if (this.units.length > 0) {
            mapCtx.drawUnits(this.units, this.unitStartPoint.x, this.unitStartPoint.y);
        }
    }
    drawFlagsOnHexes () {
        if (this.owner)
	   mapCtx.drawImage(this.owner.flagImage, this.unitStartPoint.x + 7, this.unitStartPoint.y + 7);
    }
    getBackground () {
        return null;
        if (!this.background)
            this.background = backgroundCtx.getImageDataSafely(this.unitStartPoint.x - 10, this.unitStartPoint.y - 9, this.width, (this.size * 1.6));

        return this.background;
    }
    getLargeBackground () {
        if (!this.largeBackground) {
		try {
			var x = this.unitStartPoint.x - 17;
			var y = this.unitStartPoint.y - 18;
			var w = this.width + 20;
			var h = (this.size * 1.6) + 30;

			this.largeBackground = backgroundCtx.getImageDataSafely(x, y, w, h);
		}
		catch (err) {
			return null;
		}
	}
	return this.largeBackground;
    }

     }

WP.Hex.UI = {
	setHexZoom: function() {
		this.width = this.size * 1.768; 
		var yModifier = this.size / 1.975; 

		var dY = (this.coordinate.y * adjust(this.size + yModifier) + adjust(5));
		var dX = (this.coordinate.x * adjust(this.width) + adjust(1));

		if (this.coordinate.y % 2 != 0) {
			dX += (adjust(this.width / 2));
		}

		dX = Math.floor(dX);
		dY = Math.floor(dY);
		this.pixelPoint = new Point(dX, dY);
		WP.Hex.UI.setUnitStartPoint(this);
	},

	setUnitStartPoint: function(hex) {
		var dX = Math.floor(hex.pixelPoint.x + adjust(15));
		var dY = Math.floor(hex.pixelPoint.y + adjust(15));
		hex.unitStartPoint = new Point(dX, dY);
	}
};













WP.Hex.UI.Borders = {

	drawBorders: function (hex) {
		mapCtx.beginPath();
		var point = WP.Hex.Borders.UI.getBorder(hex);
		mapCtx.moveTo(point[0][0], point[0][1]);
		for (var i = 1; i < 6; i++) {
			mapCtx.lineTo(point[i][0], point[i][1]);
		}
		mapCtx.lineTo(point[0][0], point[0][1]);
		mapCtx.lineWidth = 2;
		mapCtx.strokeStyle = "#ACACB8"; 
		mapCtx.stroke();
	},

	getBorder: function (hex) {
		var result = [];
		var delta_theta = 2.0 * Math.PI / 6;
		var theta = 0;
		var radius = adjust(hex.size);

		var modX = hex.pixelPoint.x + hex.size;
		var modY = hex.pixelPoint.y + hex.size;
		for (var i = 0; i < 6; i++) {
			var x = (radius * Math.sin(theta)) + modX;
			var y = (radius * Math.cos(theta)) + modY;
			result.push([x, y]);
			theta += delta_theta
		}
		return result;
	}
}

'use strict';

WP.HexControl = class {
    constructor () {
        this.selectedCountry = null
    }

        handleCountrySelected (id) {
        var cty = game.getCountry(id);
        $("#hcCountryFlag").attr("src", WP.Country.UI.getFlagUrl(cty));
        hexControl.selectedCountry = cty;
    }

        handleHexClick (hex) {
        if (hex && hex.owner) {
            hex.owner = hexControl.slectedCountry
            hex.draw()
        }
    }

        addFlags () {
        game.hexControlDialogIsOpen = true;
        onWindowResize();       
    }

        showUnits () {
        game.hexControlDialogIsOpen = false;
        hexControl.selectedUnit = null;
        onWindowResize();      
    }
}



WP.HexControl.Mouse = {}


WP.HexControl.UI = {
	addCountryToDropdown: function (cty) {
		$('#hcCountry').append($("<option />").attr("value", cty.id).text(cty.name));
	},

	fillCountryList: function () {
		$('#hcCountry').empty();
		var majors = game.getMajorPowers();

                majors.forEach(m => WP.HexControl.UI.addCountryToDropdown(m))

                game.countries.forEach(cty => {if (!cty.isMajorPower) { WP.HexControl.UI.addCountryToDropdown(cty) }})

        		hexControl.handleCountrySelected($('#hcCountry').val());
	},

	handleMenuButton: function () {
		$("#hexControl").dialog('open');
		$("#hexControl").dialog("option", "width", 530);
		$("#hexControl").dialog("option", "resizable", false);
		WP.HexControl.UI.fillCountryList();
		hexControl.addFlags();
	}
}


'use strict';

WP.HexInfo = class {
    constructor(){
        this.hex = null
    }

        drawUnits() {
        if (this.hex && this.hex.units) {
            var holder = WP.UnitHolder.unitHolderBuilder(hexInfoCtx, $("#hexInfoDiv"));
            holder.units = this.hex.units;
            holder.draw();
	   }
    }


                refreshHeader () {
        var flag = "/content/flags/ocean.bmp";
        var owner = "Ocean";
        var cty = null;
        var hexId = null;
        var cityName = null;
        var port = null;
        var beachIsland = null;
        var capital = null;
        var terrain = null;

        if (this.hex) {
            cty = this.hex.owner;
            hexId = this.hex.letter + this.hex.number;
            if (this.hex.cityName) { cityName = this.hex.cityName; }
            if (this.hex.isCapital) { capital = "Capital"; }
            if (this.hex.isPort) { port = "Port"; }
            if (this.hex.isBeach) { beachIsland = "Beach"; }
            if (this.hex.isIsland) { beachIsland = "Island"; }
            switch (this.hex.isTerrain) {
                case 1: terrain = "Forest"; break;
                case 2: terrain = "Marsh"; break;
                case 6: terrain = "Jungle"; break;
                case 7: terrain = "Mountain"; break;
                case 8: terrain = "Jungle/Mountn"; break;
                default: break;
            }

            var background = this.hex.getLargeBackground();
            if (background) hexInfoBackgroundCtx.putImageData(background, 0, 0);
        }

        if (cty) {
            flag = WP.Country.UI.getFlagUrl(cty);
            owner = cty.name;
        }

        $("#hexInfoFlag").attr("src", flag);
        $("#hexInfoOwner").html(owner);
        $("#hexInfoHexId").html(hexId);
        $("#hexInfoCityName").html(cityName);
        $("#hexInfoCapital").html(capital);
        $("#hexInfoPort").html(port);
        $("#hexInfoBeachIsland").html(beachIsland);
        $("#hexInfoTerrain").html(terrain);
    }


    updateFor(hex, force) {
        if (this.hex != hex || force) {
            this.hex = hex;
            this.drawUnits();
            this.refreshHeader();
        }
    }
}










WP.CommonLoader = {
	readCodebreaking: function (codebreakingNode, country) {
		var codes = new WP.Codebreaking();
		WP.CommonLoader.readCodebreakingCard("asw", codebreakingNode, codes);
		WP.CommonLoader.readCodebreakingCard("sub", codebreakingNode, codes);
		WP.CommonLoader.readCodebreakingCard("strat", codebreakingNode, codes);
		WP.CommonLoader.readCodebreakingCard("tac", codebreakingNode, codes);
		WP.CommonLoader.readCodebreakingCard("blank", codebreakingNode, codes);
		WP.CommonLoader.readCodebreakingCard("wild", codebreakingNode, codes);
		country.codebreaking = codes;
	},

	readCodebreakingCard: function (type, codebreakingNode, codes) {
		var len = 0;
		try { len = parseInt(codebreakingNode.attr(type)); } catch (e) { }
		for (var i = 0; i < len; i++) { codes.addCard(type); }
	}
}
'use strict';

WP.FileLoader = class {
    constructor(file) {
        this.file = file
        this.unitIndex = 0
    }

        static startGame (type, file) {
        game = WP.Game.gameBuilder()
        var initLoader = new WP.InitLoader()
        var fileLoader = new WP.FileLoader(file)
        initLoader.init(fileLoader)
    }

        load () {
        var loader = this;
        $.ajax({
            type: "GET",
            url: loader.file,
            dataType: "xml",
            success: function (xml) {
                loader.processGameDetails(xml);
                loader.processCountries(xml);
                loader.processCodebreakingRecords(xml);
                loader.processMaps(xml);
                loader.processShipyards(xml);
                loader.processTaskforces(xml);
                loader.processPostLoad();
            }
        }); 
    }

        processCodebreakingRecords (xml) {
        var loader = this;
        $(xml).find('codebreaking_history').each(function() {
            loader.readCodebreakingHistory($(this));
        });
    }

        processCountries (xml) {
        var loader = this
        $(xml).find('country').each(function () {
            loader.readCountry($(this))
        })
    }

        processMaps (xml) {
       var loader = this;
	   $(xml).find('map').each(function () {
		  loader.readMap($(this));
	   });
    }

        processGameDetails (xml) {
        var loader = this;
        $(xml).find('game').each(function () {
            loader.readGameDetails($(this));
        });
    }

        processShipyards (xml) {
        var loader = this;
	    $(xml).find('shipyard').each(function() {
		  loader.readShipyard($(this));
	   });
    }

        processTaskforces (xml) {
        var loader = this;
        $(xml).find('taskforce').each(function() {
        loader.readTaskforce($(this));
        });
    }

        processPostLoad () {
        onWindowResize();
    }

        readGameDetails (gameNode) {
        var currentPhaseId = null;
        var year = parseInt(gameNode.attr('starting-year'));
        var season = gameNode.attr('starting-season');
        if (gameNode.attr('current-phase-id')){
            currentPhaseId = parseInt(gameNode.attr('current-phase-id'));
        }
        game.setCurrentDate(currentPhaseId, year, season);
    }

        readCodebreakingDraw (drawNode) {
        var cbr = new WP.CodebreakingResult();
        cbr.readFrom(drawNode.attr('value'));
        game.addCodebreakingResult(cbr);
    }

        readCodebreakingHistory (historyNode) {
        var loader = this;
        historyNode.find('codebreaking').each(function() {
            loader.readCodebreakingDraw($(this));
        });
    }

        readCountry (countryNode) {
        var loader = this;
        var id = parseInt(countryNode.attr('id'));
        var country = game.getCountry(id);

        var coalition = countryNode.attr('coalition');
        var ally = parseInt(countryNode.attr('ally'));

        country.coalition = coalition;
        country.ally = ally;

        countryNode.find('codebreaking').each(function() {
        	WP.CommonLoader.readCodebreaking($(this), country);
        });

        countryNode.find('unit').each(function() {
            loader.readUnit($(this), country);
        });

        countryNode.find('g').each(function() {
            loader.readForcepoolGrouping($(this), country);
        });
    }

        readForcepoolGrouping (groupingNode, country) {
        var id = parseInt(groupingNode.attr('i'));
        var name = groupingNode.attr('name');
        var grouping = WP.Country.forcepoolGroupingBuilder(id, name);
        country.addForcepoolGrouping(grouping);
    }

        readShipyard (shipyardNode) {
     	var name = shipyardNode.attr('name');
        var shipyard = game.getShipyardFromName(name);
        var rate = shipyardNode.attr('rate');
        shipyard.rate = rate;
        var loader = this;
        shipyardNode.find('unit').each(function() {
            loader.readShipyardUnit($(this), shipyard);
        });   
    }

        readShipyardUnit (unitNode, shipyard) {
        var id = parseInt(unitNode.attr('id'));
        var x = parseInt(unitNode.attr('x'));
        var y = parseInt(unitNode.attr('y'));
        var shipyardUnit = WP.ShipyardUnit.shipyardUnitBuilder(id, x, y);
        shipyard.addShipyardUnit(shipyardUnit);
    }

        readTaskforce (taskforceNode) {
        var owner = taskforceNode.attr('owner');
        var taskforce = game.getTaskforceFromOwner(owner);
        var loader = this;
        taskforceNode.find('unit').each(function() {
            loader.readTaskforceUnit($(this), taskforce);
        });
    }

        readTaskforceUnit (unitNode, taskforce) {
        var id = parseInt(unitNode.attr('id'));
        var x = parseInt(unitNode.attr('x'));
        var y = parseInt(unitNode.attr('y'));
        var taskforceUnit = WP.TaskforceUnit.taskforceUnitBuilder(id, x, y);
        taskforce.addTaskforceUnit(taskforceUnit);
    }

        readHexes (map, hexList) {
        var hexes = hexList.split('/');
        for (var i = 0; i < hexes.length; i++) {
            if (hexes[i]) {
                var hexDetails = hexes[i].split('^');
                var hexId = parseInt(hexDetails[0].replace("i", ""));
                var hex = map.getHex(hexId);
                var countryId = parseInt(hexDetails[1].replace("o", ""));
                var owner = game.getCountry(countryId);
                hex.owner = owner;
            }
        }
    }   

            readMap (mapNode) {
        var loader = this;
        var id = parseInt(mapNode.attr('id'));
        var current = parseInt(mapNode.attr('current'));
        if (current == 1) game.switchTheaters();
        var map = game.maps[id];
        mapNode.find('hexes').each(function () {
            var hexes = $(this).text();
            loader.readHexes(map, hexes);
        }); 
    }

        readUnit (unitNode, country) {
        var id = parseInt(unitNode.attr('id'));
        var fpg = parseInt(unitNode.attr('fpg'));
        var type = unitNode.attr('type');
        var name = unitNode.attr('name');
        var strength = parseInt(unitNode.attr('strength'));
        var moves = parseInt(unitNode.attr('moves'));
        var location = parseInt(unitNode.attr('loc'));
        var slow = parseInt(unitNode.attr('slow'));
        var sunk = parseInt(unitNode.attr('sunk'));
        var damaged = parseInt(unitNode.attr('damaged'));
        var inverted = parseInt(unitNode.attr('inverted'));
        var exploiting = parseInt(unitNode.attr('exploiting'));
        var isolated = parseInt(unitNode.attr('isolated'));
        var unit = WP.Unit.unitBuilder(id, fpg, type, name, strength, moves, location, slow, sunk, damaged, inverted, exploiting, isolated);
        country.addUnit(unit);
        if (location == 2) {
            var stack = parseInt(unitNode.attr('stack'));
            var hex = unitNode.attr('hex');
            game.addUnitToHex(unit, hex, stack);
        }
    }

    }

































'use strict';

WP.InitLoader = class {
    constructor () {

            }

        init (fileLoader) {
        var loader = this

                $.ajax({
            type: "GET",
            url: "content/Initialize/initialize.xml",
            dataType: "xml",
            success: function(xml) {
                if (game.countries.length > 0) { return }

                loader.processCountries(xml)
                loader.processMaps(xml)
                loader.processShipyards(xml)
                loader.processTaskforces(xml)
                fileLoader.load()
            }
        })
    }

        postCountryLoadProcessing () {
        game.countries.forEach(country => {
            if (country.colonyOf != null && country.colonyOf > -1) {
                var owner = game.getCountry(country.colonyOf);
                owner.addColony(country);
            }
            if (country.partOf != null && country.partOf > -1) {
                var owner = game.getCountry(country.partOf);
                country.partOf = owner;
            }
            if (country.ally != null && country.ally > -1) {
                var ally = game.getCountry(country.ally);
                country.ally = ally;
            }
            WP.Country.UI.loadFlag(country);
        })
    }

        processCountries (xml) {
        var loader = this;
        var countryIndex = 0;
        $(xml).find('country').each(function () {
            loader.readCountry($(this), countryIndex);
            countryIndex++;
        });
        loader.postCountryLoadProcessing();
    }

        processMaps (xml) {
        var loader = this
        $(xml).find('map').each(function () {
		    loader.readMap($(this));
	    });       
    }

        processShipyards (xml) {
        var loader = this
        var shipyardIndex = 0;
        $(xml).find('shipyard').each(function () {
            loader.readShipyard($(this), shipyardIndex);
            shipyardIndex++;
        });
    }

        processTaskforces (xml) {
        var loader = this;
        var taskforceIndex = 0;
        $(xml).find('taskforce').each(function () {
            loader.readTaskforce($(this), taskforceIndex);
            taskforceIndex++;
        });        
    }

        readCountry (countryNode, country) {
        var id = countryNode.attr('id');
        var name = countryNode.attr('name');
        var country = WP.Country.countryBuilder(id, name);
        game.addCountry(country);

        var colonyOf = countryNode.attr('colonyOf');
        if (colonyOf) country.colonyOf = parseInt(colonyOf);
        var partOf = countryNode.attr('partOf');
        if (partOf) country.partOf = parseInt(partOf);
        var alliedWith = countryNode.attr('alliedWith');
        if (alliedWith) country.ally = parseInt(alliedWith);
        if (countryNode.attr('isOrganization') == "1") country.isOrganization = true;
        if (countryNode.attr('pacific') == "1") country.pacific = true;
        if (countryNode.attr('majorpower')) country.isMajorPower = true;

        countryNode.find('codebreaking').each(function () {
            WP.CommonLoader.readCodebreaking($(this), country);
        });
    }

        readShipyard (shipyardNode, shipyardIndex) {  
        var owner = shipyardNode.attr('owner');    
        var name = shipyardNode.attr('name');
        var rate = shipyardNode.attr('rate');
        var id = shipyardIndex;
        var shipyard = WP.Shipyard.shipyardBuilder(id, name, owner, rate);
        game.addShipyard(shipyard);
    }

        readTaskforce (taskforceNode, taskforceIndex) {
        var owner = taskforceNode.attr('owner');
        var size = taskforceNode.attr('size');
        var id = taskforceIndex;
        var taskforce = WP.Taskforce.taskforceBuilder(id, owner, size);
        game.addTaskforce(taskforce);       
    }

        readHex (hexNode, map, hexId) {
        var hex = map.getHex(hexId);
        var cityName = hexNode.attr('city');
        var ports = hexNode.attr('ports');
        var capital = hexNode.attr('capital');
        var beach = hexNode.attr('beach');
        var terrain = parseInt(hexNode.attr('terrain'));
        var island = hexNode.attr('island');
        if (hex) {
            var ownerId = hexNode.attr('owner');
            if (ownerId) {
                var country = game.getCountry(ownerId);
                hex.owner = country;
                if (cityName) { hex.cityName = cityName; }
                if (ports) { hex.isPort = ports; }
                if (capital) { hex.isCapital = capital; }
                if (beach) { hex.isBeach = beach; }
                if (terrain) { hex.isTerrain = terrain; }
                if (island) { hex.isIsland = island; }
            }
        }
    }

        readMap (mapNode) {
        var loader = this;
        var id = parseInt(mapNode.attr('id'));
        var map = game.maps[id];
        var hexId = 1;
        mapNode.find('hex').each(function () {
            loader.readHex($(this), map, hexId);
            hexId++;
        });        
    }

    }



'use strict';

WP.Map = class {
    constructor (theater, id) {
        this.theater = theater
        this.width = 0
        this.height = 0
        this.currentX = 0
        this.currentY = 0
        this.id = id
        this.dragging = false
        this.hexes = null
        this.currentHex = null

        this.getHex = function (id) {
            return this.hexes[id]
        }
    }

        createHexes (id) {
        this.hexes = []
        var i = 1;
        for (var x = 0; x < 51; x++) {
            for (var y = 0; y < 40; y++) {
                if ((id == 0) && (x == 50 && (y % 2 > 0))){ i++; continue; }
                this.hexes[i] = new WP.Hex(i, this, x, y);
                i++;
            }
        }
    }

        placeUnitFrom (dialog, unit, hex) {
        game.selectedUnit == null
        var stack = dialog.unitHolder.findStackContaining(unit)

        if (unit.type.toLowerCase() == "cruiser") {
            if (!ctrlPressed() && unit.strength > 2) {
                unit = unit.breakdownAndCreate(2);
            }
            else if (ctrlPressed() && unit.strength > 6) {
                unit = unit.breakdownAndCreate(6);
            }
            else {
                stack.removeUnit(unit);
            }
        }
        else if (unit.factorable && !ctrlPressed() && unit.strength > 1) {
            unit = unit.breakdownAndCreate(1);
        }
        else if (unit.factorable && ctrlPressed() && unit.strength > 5) {
            unit = unit.breakdownAndCreate(5);
        }
        else {
            stack.removeUnit(unit);
        }

                hex.addOrCombineUnit(unit);
        hex.clear();
        hex.draw();
        dialog.removeUnitFrom(dialog, unit) 

                game.setSelectedUnit(stack.getTopUnit());
        dialog.draw();
    }

        displayCoordinates () {
        var coord = "&nbsp;(" + this.currentX + ", " + this.currentY + ")";
        if (this.currentHex) coord += ": " + this.currentHex.toString();

        var mapDiv = $("#mapDiv");
        var hexReport = "";
        if (this.currentHex) { hexReport = " id: " + this.currentHex.id + " x: " + this.currentHex.coordinate.x + " y: " + this.currentHex.coordinate.y; }
        coord += " map[" + mapDiv.width() + ", " + mapDiv.height() + "]" + hexReport;
        $("#mousePosition").html(coord);
    }

        displayMapUnitsInHexInfo (force) {
        if (this.currentHex) {
		if (!window.hexInfo) window.hexInfo = new WP.HexInfo();
            hexInfo.updateFor(this.currentHex, force);
        }
    }

        getHexAt (point) {
        for (var x = 0; x < this.hexes.length; x++) {
            var hex = this.hexes[x];
            if (!hex || !hex.pixelPoint) continue;
            if (point.x > hex.pixelPoint.x) {
                if (point.x < hex.pixelPoint.x + hex.width) {
                    if (point.y > hex.pixelPoint.y + (hex.size / 4)) {
                        if (point.y < hex.pixelPoint.y + (hex.size * 1.6)) {
                            return hex;
                        }
                    }
                }
            }
        }
        return null;
    }

        handleHexClick () {
        if (game.hexControlDialogIsOpen) { hexControl.handleHexClick(this.currentHex); return; }
        var unit = game.selectedUnit;
        if (unit && unit.location == 1 && this.currentHex) {
            this.placeUnitFrom(forcepool, unit, this.currentHex);
        }
        if (unit && unit.location == 3 && this.currentHex) {
            this.placeUnitFrom(shipyard, unit, this.currentHex);
        }
        if (unit && unit.location == 4 && this.currentHex) {
            this.placeUnitFrom(taskforce, unit, this.currentHex);
        }
        else {
            this.selectUnit();
            if (game.selectedUnit) {
                this.dragging = true;
            }
        }

    }

        moveUnitTo (unit, hex) {
        if (unit.hex == hex) return;

        if (unit.hex) {
                var oldHex = unit.hex;
                oldHex.removeUnit(game.selectedUnit);
                oldHex.clear();
                oldHex.draw();
             }
            hex.addUnit(unit);
            hex.clear();
            hex.draw();
    }

        onDoubleClick () {
       	var unit = game.selectedUnit;
        if (unit && unit.location == 1 && map.currentHex) {
            return;
        }
        game.setSelectedUnit(null);
        var map = game.currentMap;
        if (map.currentHex) {
            if (map.currentHex.units && map.currentHex.units.length > 1) {
                map.currentHex.rotateUnits();
                map.currentHex.draw();
                hexInfo.units = null;
                map.displayMapUnitsInHexInfo(true);
            }
        }
    }

        onMouseMove (e) {
        var map = game.currentMap;
        map.setCurrentHex(e);
        map.displayMapUnitsInHexInfo(false);
        map.displayCoordinates();

        if (game.selectedUnit && map.dragging && map.currentHex) {
            if (map.currentHex != game.selectedUnit.hex) {
                map.moveUnitTo(game.selectedUnit, map.currentHex);
            }
        }
    }

        onMouseDown () {
        var map = game.currentMap;
        if (game.state == 0) {
            map.handleHexClick();
        }
        else if (game.state == 1) {
            attrition.handleHexClick();
        }        
    }

        onMouseUp () {
        var map = game.currentMap;
    	map.dragging = false;
    }

        setCurrentHex (e) {
        var point = getPoint('mapCanvas', e);
        point.x += $("#mapDiv").scrollLeft();
        point.y += $("#mapDiv").scrollTop();

        this.currentX = point.x;
        this.currentY = point.y;
        this.currentHex = this.getHexAt(point);       
    }

        selectUnit () {
        var unit = null;
        if (this.currentHex) { unit = this.currentHex.getTopUnit(); }
        game.setSelectedUnit(unit);
    }

        drawBackground () {
        var mapImage = new Image()
        var map = this

        mapImage.onload = function() {
            var mapDiv = $("#mapDiv")
            var menuDiv = $("#menuDiv")

            map.width = mapImage.width
            map.height = mapImage.height

            WP.Canvas.resizeCanvas(mapCanvas, map)
            WP.Canvas.resizeCanvas(backgroundCanvas, map)

            backgroundCtx.drawImage(mapImage, 0, 0, map.width, map.height)

            if(WP.Misc.Ui.isiPad() || WP.Misc.Ui.isiPod()) {
                    mapCtx.drawImage(mapImage, 0, 0, mapDiv.width(), mapDiv.height(), 0, 0, mapDiv.width(), mapDiv.height())
            } else {
            $('#mapBackgroundDiv').css("background-image", "url(" + url + ")")
        }

        map.drawHexes()
        mapNav.refresh()

        var mapBackgroundDiv = $("#mapBackgroundDiv")
        mapBackgroundDiv.height(mapImage.height)
        mapBackgroundDiv.width(mapImage.width)

        mapDiv.show()

        scrollDivRight(getCookie("rightscroll"))
        scrollDivDown(getCookie("downscroll"))
        }
        var url = "/content/maps/WP" + this.theater + (game.zoomLevel *10) + ".jpg"
        mapImage.src = url
    }

        drawHexes () {
       this.hexes.forEach(h => h.draw())
    }

        draw () {
        this.setZoom()
        this.drawBackground()  
    }

        setZoom () {
        this.hexes.forEach(h => h.setZoom())
    }

        redrawHexesContainingUnits (units) {
        this.hexes.forEach(h =>{
            h.units.forEach(hu => {
                if (units.some(un => un == hu)){
                    h.clear()
                    h.draw()
                }
            })
        })
    }

    }























WP.Map.Mouse = {};

WP.Map.Mouse.Util = {
	getRelativePosition: function (obj, x, y) {
		var curtop;
		var curleft = curtop = 0;

		if (obj.offsetParent) {
			do {
				curleft += obj.offsetLeft;
				curtop += obj.offsetTop;
			} while (obj = obj.offsetParent);
		}

		if (document.body.scrollLeft > 0)
			var scrollLeft = document.body.scrollLeft;
		else
			scrollLeft = document.documentElement.scrollLeft;

		if (document.body.scrollTop > 0)
			var scrollTop = document.body.scrollTop;
		else
			scrollTop = document.documentElement.scrollTop;

		return [(x - curleft + scrollLeft), (y - curtop + scrollTop)];
	}
}





















WP.Map.UI = {}















'use strict';

WP.Navigator = class {
    constructor () {
        this.dragging = false
    }

        static getBaseMapTemplate (navWidth, navHeight) {
        var templateMap = navigatorCtx.getImageDataSafely(0, 0, navWidth, navHeight);
        var baseMap = new Array(templateMap.data.length);
        for (var id = 0; id < baseMap.length; id++) {
            baseMap[id] = templateMap.data[id];
        }
        return baseMap;
    }

        static drawControlColors (navWidth, navHeight) {
        var map = game.currentMap;
        var xMod = map.width / navWidth;
        var yMod = map.height / navHeight;

        navigatorCtx.lineWidth = 0;

                for (var x = 0; x < game.currentMap.hexes.length; x++) {
            var hex = game.currentMap.hexes[x];
            if (!hex) continue;
            if (!hex.owner) continue;

            navigatorCtx.fillStyle = hex.owner.backColor.toRgb();
            var dx = (hex.pixelPoint.x / (xMod * 1)) - .5;
            var dy = (hex.pixelPoint.y / (yMod * 1)) - .5;

            if (dx < navWidth - 4 && dy < navHeight - 3.5)
            navigatorCtx.fillRect(dx, dy, 4, 3.5);
        }
        navigatorCtx.fill();
    }

        static overlayOceanForDefinedCoastlines (baseMap, navWidth, navHeight) {
        var output = navigatorCtx.getImageDataSafely(0, 0, navWidth, navHeight);

        var coloredMap = output.data;
        for (var i = 0, n = baseMap.length; i < n; i += 4) {
            if (baseMap[i] == 51 && baseMap[i + 1] == 102 && baseMap[i + 2] == 153) {
            coloredMap[i] = 51;
            coloredMap[i + 1] = 102;
            coloredMap[i + 2] = 153;
            }
        }
        navigatorCtx.putImageData(output, 0, 0);
    }


                    static paintMap () {
        var navWidth = $("#navigatorCanvas").width();
        var navHeight = $("#navigatorCanvas").height();

        var baseMap = WP.Navigator.getBaseMapTemplate(navWidth, navHeight);
        WP.Navigator.drawControlColors(navWidth, navHeight);
        WP.Navigator.overlayOceanForDefinedCoastlines(baseMap, navWidth, navHeight);

        $("#navigatorDiv").width(navWidth - 4);
        $("#navigatorDiv").height(navHeight - 1);
    }

        refresh () {
        var mapImage = new Image()

                mapImage.onload = function () {
            WP.Canvas.resizeCanvas(navigatorCanvas, mapImage)
            navigatorCtx.drawImage(mapImage, 0, 0)
            WP.Navigator.paintMap()
        }
        var url = "/content/maps/small" + game.currentMap.theater + ".bmp"
        mapImage.src = url
    }

        onMouseDown (e) {
        if (typeof e == 'undefined') e = navigatorCanvas.event;

        var point = getPoint('navigatorCanvas', e);

        var navWidth = $("#navigatorCanvas").width();
        var navHeight = $("#navigatorCanvas").height();

        var map = game.currentMap;
        var xMod = map.width / navWidth;
        var yMod = map.height / navHeight;

        var right = point.x * xMod;
        var down = point.y * yMod;

        var centerXMod = $("#mapDiv").width() / 2;
        var centerYMod = $("#mapDiv").height() / 2;

        right -= centerXMod;
        down -= centerYMod;

        scrollDivRight(right);
        scrollDivDown(down);
        this.dragging = true;
    }

        onMouseMove (e) {
        if (this.dragging)
		mapNav.onMouseDown(e);
    }

        onMouseUp (e) {
       if (typeof e == 'undefined') e = navigatorCanvas.event;
	   this.dragging = false;
    }

    }


function pointIsInHex(point, hexPoint, size) {
 if (point.x < hexPoint.x) return false;
 if (point.x > hexPoint.x + size) return false;
 if (point.y < hexPoint.y) return false;
 if (point.y > hexPoint.y + size) return false;
 return true;
}














'use strict';

WP.NewUnit = class {
    constructor () {
        this.unitHolder = null
        this.readyUnit = null
    }

        handleCountrySelected (id) {
        var cty = game.getCountry(id);
        $("#nuCountryFlag").attr("src", WP.Country.UI.getFlagUrl(cty));
        $('#nuGroupings').empty();
        $('#nuGroupings')
            .append($("<option />")
                    .attr("value", "0")
                    .text("Unbuilt"));
        for (var i = 0; i < cty.forcepoolGroupings.length; i++) {
            var group = cty.forcepoolGroupings[i];
            $('#nuGroupings')
                .append($("<option />")
                        .attr("value", group.id)
                        .text(group.name));
        }
    }

        addNewUnit () {
        newUnit.readyUnit.owner.addUnit(newUnit.readyUnit)
        newUnit.readyUnit = null
    }

        addNewForcepoolGroup (id) {
        var cty = game.getCountry(id);
        var name = $('#nuFpg').val();
        var groupings = cty.forcepoolGroupings;
        id = groupings.length;
        for (var i = 0; i < groupings.length; i++) {
            if (groupings[i].id == id) id += 1;
        }
        var fpg = WP.Country.Util.forcepoolGroupingBuilder(id, name);
        cty.addForcepoolGrouping(fpg);
    }

        draw () {
        var cty = game.getCountry($('#nuCountry').val());
        var fpg = $('#nuGroupings').val();
        var units = new Array();
        var slow = $('#nuSlow').is(':checked');
        var type = $('#nuType').val();
        var name = $('#nuName').val();
        var strength = parseInt($('#nuStrength').val());
        var movement = parseInt($('#nuMove').val());
        var unit = newUnit.getNewUnit(cty, fpg, type, name, strength, movement, slow);
        units.push(unit)
        newUnit.readyUnit = unit;
        var holder = WP.UnitHolder.unitHolderBuilder(newUnitCtx, $("#nuDetails"));
        holder.units = units;
        holder.draw();
        newUnit.unitHolder = holder;
   }

        getNewUnit (cty, fpg, type, name, strength, movement, slow) {
        var id = newUnit.getNewId();
        var location = 1;
        if ((slow) && (type == "battleship")) { slow = true; }
        else { slow = false; }
        if ((type == "cruiser") && (strength % 2 > 0)) { strength += 1 }
        var unit = WP.Unit.unitBuilder(id, fpg, type, name, strength, movement, location, slow);
        unit.owner = cty;
        return unit;
    }

        getNewId () {
        var countries = game.countries
        var newID = 0
        for (var i = 0; i < countries.length; i++) {
            for (var j = 0; j < countries[i].units.length; j++) {
                if (countries[i].units[j].id > newID) { newID = countries[i].units[j].id; }
            }
        }
        newID += 1;
        return newID;
    }
}




WP.NewUnit.Mouse = { };


WP.NewUnit.UI = {
	addCountryToDropdown: function (cty) {
		$('#nuCountry').append($("<option />").attr("value", cty.id).text(cty.name));
	},

	addTypeGroupToDropdown: function (type) {
		$('#nuTypeGroup').append($("<option />").attr("value", type[1]).text(type[0]));
	},

	addTypeToDropdown: function (nuUnit, id) {
		$('#nuType').append($("<option />").attr("value", nuUnit[0]).text(nuUnit[0]));
	},

	fillCountryList: function () {
		$('#nuCountry').empty();
		var majors = game.getMajorPowers();
		for (var i = 0; i < majors.length; i++) {
			WP.NewUnit.UI.addCountryToDropdown(majors[i]);
		}
		for (var j = 0; j < game.countries.length; j++) {
			var cty = game.countries[j];
			if (!cty.isMajorPower) {
				WP.NewUnit.UI.addCountryToDropdown(cty);
			}
		}
		newUnit.handleCountrySelected($('#nuCountry').val());
	},

	fillTypeGroupList: function () {
		$('#nuTypeGroup').empty();
		var types = [["air", 0], ["naval", 1], ["ground", 2], ["additional", 3]];
		for (var i = 0; i < types.length; i++) {
			WP.NewUnit.UI.addTypeGroupToDropdown(types[i]);
		}
		$("#nuTypeGroup").prop("selectedIndex", 0);
	},

	fillTypeList: function () {
		$('#nuType').empty();
		var unitList = [[["aaf"], ["nas"], ["enas"], ["air trans"], ["bomber"], ["pac bomber"], ["interceptor"], ["avg"], ["jet"], ["jetsquadron"], ["kamikaze"], ["airbase"]],
			[["battleship"], ["carrier"], ["cruiser"], ["destroyer"], ["asw"], ["sub"], ["transport"], ["cve"], ["adv sub"], ["taskforce"]],
			[["infantry"], ["mechanized"], ["armor"], ["airborne"], ["marine"], ["commando"], ["chindit"], ["rocket"], ["flak"], ["partisan"], ["axispartisan"], ["compartisan"], ["alliedpartisan"], ["replacement"]],
			[["IC"], ["oilplant"], ["airbase"], ["fortress"], ["beachdefense"], ["exploit"], ["breakthrough"], ["turn"], ["firestorm"], ["atomic attack"], ["partialsupply"], ["grant"], ["oil"], ["spyring"], ["railhead"], ["port"], ["bridgehead"]]];
		var unitGroup = $('#nuTypeGroup').val();
		var unitTypeList = unitList[unitGroup];
		for (var i = 0; i < unitTypeList.length; i++) {
			WP.NewUnit.UI.addTypeToDropdown(unitTypeList[i]);
		}
		$("#nuType").prop("selectedIndex", 0);
	},

	handleMenuButton: function () {
		$("#newUnit").dialog('open');
		$("#newUnit").dialog("option", "width", 500);
		$("#newUnit").dialog("option", "resizable", false);
		$("#newUnit").dialog('open');
		WP.NewUnit.UI.fillCountryList();
		WP.NewUnit.UI.fillTypeGroupList();
		WP.NewUnit.UI.fillTypeList();
		newUnit.draw();
	}
};



'use strict';

WP.Phase = class {
    constructor () {
        this.phaseList = [[1, "Air Staging"],
            [10, "Counter Air" ],
            [20, "Naval Basing" ],
            [30, "Patrol Resolution" ],
            [35, "Basing Interception" ],
            [40, "Sea Supply" ],
            [50, "Supply Combat" ],
            [60, "Air Supply" ],
            [70, "Air & Sea Transport" ],
            [90, "Ground Movement" ],
            [100, "Air & Naval Missions" ],
            [110, "Magic Interceptions" ],
            [120, "Combat-Phase Counter Air"],
            [130, "Port Strikes"],
            [140, "Air & Naval Interceptions"],
            [160, "DAS Interceptions"],
            [165, "Raiders & Strat Warfare"],
            [170, "Airdrops"],
            [180, "Ground Combat"],
            [190, "Exploitation Movement" ],
            [200, "Exploitation Air Support" ],
            [210, "Exploitation DAS"],
            [220, "Exploitation Airdrops" ],
            [230, "Exploitation Combat"],
            [240, "Attrition Combat" ],
            [250, "Post Combat Adjustments" ],
            [260, "Unit Construction" ],
            [270, "Tactical Redeployments" ],
            [280, "SRs for NR" ],
            [290, "Naval Redeployments" ],
            [300, "NR Resolution" ],
            [310, "Strategic Redeployments" ],
            [320, "TR After NR and SR" ],
            [330, "End"]
        ]

                this.seasons = ["Spring", "Summer", "Fall", "Winter"];
        this.coalitions = ["Axis", "Allies"];
        this.phases = [];
    }

        refreshPhase () {
        $("#phCurrentYear").html(game.currentYear);
        var season = phase.seasons[game.currentSeason];
        $("#phCurrentSeason").html(season);
        var coaName = phase.coalitions[game.currentCoalition];
        $("#phCurrentCoalition").html(coaName);
        var phaseName = phase.getPhaseName();
        $("#phCurrentPhase").html(phaseName);
        $("#phCurrentPhaseId").html(game.currentPhaseId);        
    }

        processLoadedPhase (currentPhaseId, year, season) {
        if (currentPhaseId == null) { currentPhaseId = phase.getPhaseId(year, season); }
        phase.setPhaseData(currentPhaseId);        
    }

        setPhaseData (currentPhaseId) {
        phase.phases.forEach(phaseData => {
            if (phaseData[0] == currentPhaseId) {
                game.currentPhaseId = phaseData[0];
                game.currentYear = phaseData[1];
                game.currentPhase = phaseData[2];
                game.currentSeason = phaseData[3];
                game.currentCoalition = phaseData[4];               
            }
        })
    }

        getPhaseId (year, season) {
        var seasonNum = phase.getSeasonNum(season);
        for (var i = 0; i < phase.phases.length; i++) {
            var phaseData = phase.phases[i];
            if (phaseData[1] == year) {
                if (phaseData[3] == seasonNum) {
                    return phaseData[0];
                    break;
                }
            }
        }       
    }

        getSeasonNum (name) {
       for (var i = 0; i < phase.seasons.length; i++) {
		  if (phase.seasons[i] == name) { return i; }
	   }
    }

        getPhaseName () {
        for (var i = 0; i < phase.phaseList.length; i++){
            if (phase.phaseList[i][0] == game.currentPhase){return phase.phaseList[i][1]}
        }       
    }

        handleClick (idChange) {
        game.currentPhaseId += idChange;
        phase.setPhaseData(game.currentPhaseId);
        phase.refreshPhase();       
    }

        initPhases () {
        var i = 1;
        for (var year = 1939; year < 1947; year++) {
            for (var season = 0; season < 4; season++) {
                if (year == 1939 && (season == 0 || season == 1)) continue;
                for (var coa = 0; coa < 2; coa++) {
                    for (var p = 0; p < phase.phaseList.length; p++) {
                        var phaseValue = phase.phaseList[p][0];
                        var newPhase = new Array(i, year, phaseValue, season, coa);
                        phase.phases.push(newPhase);
                        i++;
                    }
                }
            }
        }        
    }

    }














'use strict';

WP.ResearchDisplay = class {
    constructor () {
        this.currentCategory = "";
        this.airGen = [0, 0, 0, 0, 0, 0, 0, 1];
        this.airDrm = [2, 2, 1, 1, 2, 1, 2, 1];
        this.airRange = [0, 0, 0, 0, 0, 0, 0, 1];
        this.airDefense = [0, 0, 0, 0, 0, 0, 0, 1];
        this.bombers = [1, 1, 0, 0, 0, 0, 0, 1];
        this.jets = [0, 0, 0, 0, 0, 0, 0, 1];
        this.airTraining = [4, 2, 0, 0, 1, 1, 3, 0];
        this.navGen = [0, 0, 0, 0, 0, 0, 0, 1];
        this.navDrm = [2, 2, 1, 0, 3, 1, 3, 1];
        this.torps = [0, 0, 0, 0, 0, 0, 1, 1];
        this.asw = [0, 0, 0, 0, 0, 0, 0, 1];
        this.harborAttacks = [0, 0, 0, 0, 0, 0, 0, 0];
        this.milGen = [0, 0, 0, 0, 0, 0, 0, 1];
        this.ctl = [1, 1, 1, 1, 2, 1, 2, 1];
        this.armor = [0, 0, 0, 0, 0, 0, 0, 0];
        this.winterPrep = [0, 0, 0, 6, 0, 0, 0, 1];
        this.rockets = [0, 0, 0, 0, 0, 0, 0, 1];
        this.producedICs = [0, 0, 0, 0, 0, 0, 0, 0];
        this.atoGen = [0, 0, 0, 0, 0, 0, 0, 1];
        this.radar = [0, 0, 0, 0, 0, 0, 0, 1];
        this.atomBombs = [0, 0, 0, 0, 0, 0, 0, 0];
        this.intelGen = [0, 0, 0, 0, 0, 0, 0, 1];
        this.spies = [0, 0, 0, 0, 0, 0, 0, 0];
        this.coverts = [0, 0, 0, 0, 0, 0, 0, 0];
        this.coints = [0, 0, 0, 0, 0, 0, 0, 0];
        this.occPol = [0, 0, 0, 0, 0, 0, 0, 0];
    }

        handleResearchCategorySelected (category) {
        var projectList = researchDisplay.getProjectList(category);
        researchDisplay.currentCategory = category;
        researchDisplay.createProjectTable(projectList);
    }

        getProjectList (category) {
        var projectList = [];
        switch (category) {
            case "Air": projectList = ["Air general", "Air DRM", "Air Range", "Air defense", "Bombers", "Jets", "Naval Air Training"]; break;
            case "Naval": projectList = ["Naval general", "Naval DRM", "Torpedoes", "ASW", "Harbor attacks"]; break;
            case "Military": projectList = ["Military general", "CTL", "Heavy armor", "Winter Prep", "Rockets"]; break;
            case "Intel": projectList = ["Intel general", "Spies used", "Covert ops", "Counter intels", "Occupation policies"]; break;
            case "Atomic": projectList = ["Atomic general", "Radar results", "Atom bombs"]; break;
        }
        return projectList;
    }

        createProjectTable (projectList) {
        $('.rdGroup').remove();
        var htmlToAppend = '';
        for (var i = 0; i < projectList.length; i++) {
            var project = projectList[i];
            var rdProjElem = '<tr id="rd' + i + '" class="rdGroup"><td id="rdProj' + i + '">' + project + '</td>';
            htmlToAppend += rdProjElem;
            var results = researchDisplay.getResearchResults(project);
            for (var j = 0; j < 7; j++) {
                var rdResearchElem = '<td><input id="rd~' + j + '^' + i + '" type="number" value="' + results[j] + '" onchange="researchDisplay.update(id, value)" style="width:35px"></td>';
                htmlToAppend += rdResearchElem;
            }
        }
        htmlToAppend += '</tr>';
        $('#rdMain tr:last').after(htmlToAppend);        
    }

        update (id, value) {
        var projectList = researchDisplay.getProjectList(researchDisplay.currentCategory);
        var preData = id.split('~');
        var ctyData = preData[1].split('^');
        var project = projectList[ctyData[1]];
        var results = researchDisplay.getResearchResults(project);
        if (researchDisplay.validateResult(value) == false) { return; }
        researchDisplay.handleResearchResults(results, value, ctyData[0]); 
    }

        handleResearchResults (proj, value, id) {
        if (proj[7] == 1) {
            var difference = value - proj[id];
            if ((id == 0) || (id == 1) || (id == 2)) {
                proj[0] += difference;
                proj[1] += difference;
                proj[2] += difference;
            } else if ((id == 4) || (id == 5)) {
                proj[4] += difference;
                proj[5] += difference;
            } else { proj[id] = value; }
        }
        else { proj[id] = value; }

	   researchDisplay.handleResearchCategorySelected(researchDisplay.currentCategory);
    }

        getResearchResults (project) {
        var results = [];
        switch (project) {
            case "Air general": results = researchDisplay.airGen; break;
            case "Air DRM": results = researchDisplay.airDrm; break;
            case "Air Range": results = researchDisplay.airRange; break;
            case "Air defense": results = researchDisplay.airDefense; break;
            case "Bombers": results = researchDisplay.bombers; break;
            case "Jets": results = researchDisplay.jets; break;
            case "Naval Air Training": results = researchDisplay.airTraining; break;
            case "Naval general": results = researchDisplay.navGen; break;
            case "Naval DRM": results = researchDisplay.navDrm; break;
            case "Torpedoes": results = researchDisplay.torps; break;
            case "ASW": results = researchDisplay.asw; break;
            case "Harbor attacks": results = researchDisplay.harborAttacks; break;
            case "Military general": results = researchDisplay.milGen; break;
            case "CTL": results = researchDisplay.ctl; break;
            case "Heavy armor": results = researchDisplay.armor; break;
            case "Winter Prep": results = researchDisplay.winterPrep; break;
            case "Rockets": results = researchDisplay.rockets; break;
            case "Intel general": results = researchDisplay.intelGen; break;
            case "Spies used": results = researchDisplay.spies; break;
            case "Covert ops": results = researchDisplay.coverts; break;
            case "Counter intels": results = researchDisplay.coints; break;
            case "Occupation policies": results = researchDisplay.occPol; break;
            case "Atomic general": results = researchDisplay.atoGen; break;
            case "Radar results": results = researchDisplay.radar; break;
            case "Atom bombs": results = researchDisplay.atomBombs; break;
        }
        return results;
    }

        validateResult (value) {
        var checkOK = "0123456789";
        var checkStr = value;
        var allValid = true;
        var decPoints = 0;
        var allNum = "";
        for (var i = 0; i < checkStr.length; i++) {
            var ch = checkStr.charAt(i);
            for (var j = 0; j < checkOK.length; j++)
                if (ch == checkOK.charAt(j))
                    break;
            if (j == checkOK.length) {
                allValid = false;
                break;
            }
            if (ch != ",")
                allNum += ch;
        }
        if (!allValid) {
            return (false);
        }        
    }

    }



WP.ResearchDisplay.UI = {

	handleMenuButton: function () {
		$("#researchDisplay").dialog('open');
		$("#researchDisplay").dialog("option", "width", 500);
		$("#researchDisplay").dialog("option", "resizable", false);
		researchDisplay.handleResearchCategorySelected("Air");

	}
};









WP.ShipsAtSea = class {
    constructor () {
        this.unitHolder = null
    }

        handleCountrySelected (id) {
       var cty = game.getCountry(id);
	   $("#sasCountryFlag").attr("src", WP.Country.UI.getFlagUrl(cty));
     }

          onMouseDown (e) {
        var point = getPoint('shipsAtSeaCanvas', e);
        var stack = shipsAtSea.unitHolder.findStackFor(point.x, point.y);
        if (stack) {
            game.setSelectedUnit(stack.getTopUnit());
            shipsAtSea.unitHolder.drawStack(stack);
        }
        else {
            game.setSelectedUnit(null);
        }
     }

          draw () {
        var cty = game.getCountry($('#sasCountry').val());
        var units = new Array();
        var showOnlyTFs = false;
        showOnlyTFs = $('#sasTFCheckbox').is(':checked');
        for (var i = 0; i < cty.units.length; i++) {
            var unit = cty.units[i];
            if (showOnlyTFs) {
                if (unit.location == 4 && unit.canSink()) {
                    units[units.length] = unit;
                }
            }
            else {
                if ((unit.location == 4 || unit.location == 2) && unit.canSink()) {
                    units[units.length] = unit;
                }
            }
        }
        var holder = WP.UnitHolder.unitHolderBuilder(shipsAtSeaCtx, $("#sasDetails"));
        holder.units = units;
        holder.stackSimilar = $('#sasStackCheckbox').is(':checked');
        holder.draw();
        shipsAtSea.unitHolder = holder;         
    }
}





WP.ShipsAtSea.Mouse = {}


WP.ShipsAtSea.UI = {
	addCountryToDropdown: function (cty) {
		$('#sasCountry').append($("<option />").attr("value", cty.id).text(cty.name));
	},

	fillCountryList: function () {
		$('#sasCountry').empty();
		var majors = game.getMajorPowers();
		for (var i = 0; i < majors.length; i++) {
			WP.ShipsAtSea.UI.addCountryToDropdown(majors[i]);
		}
		shipsAtSea.handleCountrySelected($('#sasCountry').val());
	},

	handleMenuButton: function () {
		$("#shipsAtSea").dialog('open');
		$("#shipsAtSea").dialog("option", "width", 530);
		$("#shipsAtSea").dialog("option", "resizable", false);
		WP.ShipsAtSea.UI.fillCountryList();
		shipsAtSea.draw();
	}
}

WP.Shipyard = class {
    constructor () {
     	this.id = null;
        this.name = null;
        this.owner = null;
        this.rate = null;
        this.unitHolder = null;
        this.shipyardUnits = [];
        this.currentSquareX = null;
        this.currentSquareY = null;
        this.dragging = false;   
    }
    static shipyardBuilder (id, name, owner, rate) {
        var shipyard = new WP.Shipyard();
		shipyard.id = id;
		shipyard.name = name;
		shipyard.owner = owner;
		shipyard.rate = rate;
		return shipyard;
    }
    addShipyardUnit (shipyardUnit) {
        this.shipyardUnits.push(shipyardUnit)
    }
    removeUnitFrom (shipyard, unit) {
        shipyard = game.getShipyardFromUnit(unit.id);
        var j = 0;
        while (j < shipyard.shipyardUnits.length) {
            if (shipyard.shipyardUnits[j].id == unit.id) {
                shipyard.shipyardUnits.splice(j, 1);
            }
            else {
                j++;
            }
	    }
    }
    updateShipyardUnitAddress (unit) {
        var shipyard = game.getShipyardFromUnit(unit.id);
        for (var i = 0; i < shipyard.shipyardUnits.length; i++) {
            if (shipyard.shipyardUnits[i].id == unit.id) {
                shipyard.shipyardUnits[i].x = unit.holderX;
                shipyard.shipyardUnits[i].y = unit.holderY;
            }
        }
    }
    handleShipyardSelected (id) {
        var shipyard = game.getShipyards(id);
        var ctyName = shipyard.owner;
        var cty = game.getCountryFromName(ctyName);
        var rate = shipyard.rate;
        var capacity;
        if (((shipyard.name == "Atlantic") || (shipyard.name == "Pacific")) && (rate <= 5)) { capacity = 10; }
        else { capacity = rate * 2; }
        $("#syCountryFlag").attr("src", WP.Country.UI.getFlagUrl(cty));
        $("#syRate").html(rate);
        $("#syCapacity").html(capacity);
        shipyard.draw();
    }
    changeRateUp (id) {
        var shipyard = game.getShipyards(id);
        shipyard.rate++;
        shipyard.handleShipyardSelected(id);
    }
    changeRateDown (id) {
        var shipyard = game.getShipyards(id);
        shipyard.rate--;
        shipyard.handleShipyardSelected(id);        
    }
    onMouseDown (e) {
        var point = getPoint('shipyardCanvas', e);
        var stack = shipyard.unitHolder.findStackFor(point.x, point.y);
        if (stack) {
            game.setSelectedUnit(stack.getTopUnit());
            shipyard.unitHolder.drawStack(stack);
            shipyard.dragging = true;
        }
        else {
            game.setSelectedUnit(null);
        }
    }
    onDoubleClick () {
        var unit = game.selectedUnit;
        var stack = shipyard.unitHolder.findStackContaining(unit);
        if (!stack) { return; }
        game.setSelectedUnit(null);
        if (stack.units.length > 1) {
            stack.rotateUnits();
            shipyard.unitHolder.drawStack(stack);
        }        
    }
    onMouseMove (e) {
        shipyard.setCurrentSquare(e);
        if (game.selectedUnit  && shipyard.dragging == true) {
            var unit = game.selectedUnit;
            if ((shipyard.currentSquareX != unit.holderX) || (shipyard.currentSquareY != unit.holderY)) {
                shipyard.moveUnit(unit);
            }
        }
    }
    onMouseUp () {
        shipyard.dragging = false
    }
    setCurrentSquare (e) {
        var point = getPoint('shipyardCanvas', e);
        this.currentSquareX = Math.floor((point.x - 10) / 66);
        this.currentSquareY = Math.floor((point.y - 30) / 66);
        if (this.currentSquareY < 0) this.currentSquareY = 0;
        if (this.currentSquareX < 0) this.currentSquareX = 0;
        if ((this.currentSquareX < 1) && (this.currentSquareY < 5)) this.currentSquareX = 1;        
    }
    moveUnit (unit) {
        var stack = shipyard.unitHolder.findStackContaining(unit);
        stack.removeUnit(unit);
        unit.holderX = shipyard.currentSquareX;
        unit.holderY = shipyard.currentSquareY;
        shipyard.updateShipyardUnitAddress(unit);
        shipyard.unitHolder.drawShipyard();
    }
    draw () {
        var syd = game.getShipyards($('#syYard').val());
        var cty = game.getCountryFromName(syd.owner);
        var units = []
      	var holder = WP.UnitHolder.unitHolderBuilder(shipyardCtx, $("#syDetails"));

            syd.shipyardUnits.forEach(syUnit => {
            var unit = game.getUnitForShipyard(syUnit.id, syUnit.x, syUnit.y)
            units.push(unit)
        })

                holder.units = units;
        holder.drawShipyard();
        shipyard.unitHolder = holder;
    }
}























WP.Shipyard.UI = {
	addYardToDropdown: function (yrd) {
		if (!(yrd.name == "Captured Shipyard")){$('#syYard').append($("<option />").attr("value", yrd.id).text(yrd.name)); }
	},

	fillShipyardList: function () {
		$('#syYard').empty();
		var shipyards = game.shipyards;
		for (var i = 0; i < shipyards.length; i++) {
			WP.Shipyard.UI.addYardToDropdown(shipyards[i]);
		}
		$("#syYard").prop("selectedIndex", 11);
		shipyard.handleShipyardSelected($('#syYard').val());
	},

	handleMenuButton: function () {

		$("#shipyard").dialog('open');
		$("#shipyard").dialog("option", "width", 367);
		$("#shipyard").dialog("option", "resizable", false);
		WP.Shipyard.UI.fillShipyardList();
	}
}

WP.Shipyard.Mouse = {}





'use strict';

WP.ShipyardUnit = class {
    constructor () {
        this.id = null;
        this.x = null;
        this.y = null;
    }

        static shipyardUnitBuilder (id, x, y) {
        var shipyardUnit = new WP.ShipyardUnit();
		shipyardUnit.id = id;
		shipyardUnit.x = x;
		shipyardUnit.y = y;
		return shipyardUnit;
    }
}













'use strict';

WP.Tables = class {
    constructor () {}
}

WP.Tables.UI = {

	handleDialogClose: function () {
		game.state = 0;
	},

	handleMenuButton: function () {
		if (game.state == 2) {
			WP.Misc.Ui.closeAllDialogs();
			return;
		}
		WP.Misc.Ui.closeAllDialogs();
		$("#tables").dialog('open');
		$("#tables").dialog("option", "width", 720);
		tables = new WP.Tables;
	}
}
'use strict';


WP.Taskforce = class {
    constructor () {
        this.id = null;
        this.owner = null;
        this.size = null;
        this.taskforceUnits = new Array();
        this.unitHolder = null;
        this.currentSquareX = null;
        this.currentSquareY = null;
        this.dragging = false;       
    }


        static taskforceBuilder (id, owner, size) {
        var taskforce = new WP.Taskforce()
        taskforce.id = id
        taskforce.owner = owner;
		taskforce.size = size;
		return taskforce;
    }


    addTaskforceUnit (taskforceUnit) {
        this.taskforceUnits.push(taskforceUnit)
    }
    removeUnitFrom (taskforce, unit) {
        var taskforce = game.selectedTaskforce;
        var j = 0;
        while (j < taskforce.taskforceUnits.length) {
            if (taskforce.taskforceUnits[j].id == unit.id) {
                taskforce.taskforceUnits.splice(j, 1);
            }
            else {
                j++;
            }
        }
    }
    updateTaskforceUnitAddress (unit) {
        var taskforce = game.selectedTaskforce;
        for (var i = 0; i < taskforce.taskforceUnits.length; i++) {
            if (taskforce.taskforceUnits[i].id == unit.id) {
                taskforce.taskforceUnits[i].x = unit.holderX;
                taskforce.taskforceUnits[i].y = unit.holderY;
            }
        }        
    }
    draw () {
        var tf = game.selectedTaskforce;
        var units = new Array();
        for (var i = 0; i < tf.taskforceUnits.length; i++) {
            var taskforceUnit = tf.taskforceUnits[i];
            var unit = game.getUnitForTaskforce(taskforceUnit.id, taskforceUnit.x, taskforceUnit.y);
            units.push(unit);
        }
        var holder = WP.UnitHolder.unitHolderBuilder(taskforceCtx, $("#tfDetails"));
        holder.units = units;
        holder.drawTaskforce();
        taskforce.unitHolder = holder;        
    }
    handleTaskforceSelected (owner) {
        var taskforce = game.getTaskforceFromOwner(owner);
        var cty = game.getCountryFromName(owner);
        game.setSelectedTaskforce(taskforce);
        $("#tfCountryFlag").attr("src", WP.Country.UI.getFlagUrl(cty));
        taskforce.draw();
    }
    onMouseDown (e) {
        var point = getPoint('taskforceCanvas', e);
        var stack = taskforce.unitHolder.findStackFor(point.x, point.y);
        if (stack) {
            game.setSelectedUnit(stack.getTopUnit());
            taskforce.unitHolder.drawStack(stack);
            taskforce.dragging = true;
        }
        else {
            game.setSelectedUnit(null);
        }       
    }


        onDoubleClick () {
        var unit = game.selectedUnit;
        var stack = taskforce.unitHolder.findStackContaining(unit);
        if (!stack) { return; }
        game.setSelectedUnit(null);
        if (stack.units.length > 1) {
            stack.rotateUnits();
            taskforce.unitHolder.drawStack(stack);
        }        
    }
    onMouseMove (e) {
        taskforce.setCurrentSquare(e);
        if (game.selectedUnit && taskforce.dragging == true) {
            var unit = game.selectedUnit;
            if ((taskforce.currentSquareX != unit.holderX) || (taskforce.currentSquareY != unit.holderY)) {
                taskforce.moveUnit(unit);
            }
        }        
    }
    onMouseUp () {
        taskforce.dragging = false
    }
    setCurrentSquare (e) {
        var point = getPoint('taskforceCanvas', e);
        this.currentSquareX = Math.floor((point.x - 4) / 58);
        this.currentSquareY = Math.floor((point.y - 7) / 58);
        if (this.currentSquareY < 0) this.currentSquareY = 0;
        if (this.currentSquareX < 0) this.currentSquareX = 0;       
    }
    moveUnit (unit) {
        var stack = taskforce.unitHolder.findStackContaining(unit);
        stack.removeUnit(unit);
        unit.holderX = taskforce.currentSquareX;
        unit.holderY = taskforce.currentSquareY;
        taskforce.updateTaskforceUnitAddress(unit);
        taskforce.unitHolder.drawTaskforce();        
    }
}


WP.Taskforce.UI = {

	handleMenuButton: function () {
		$("#taskforce").dialog('open');
		$("#taskforce").dialog("option", "width", 498);
		$("#taskforce").dialog("option", "resizable", false);
		taskforce.handleTaskforceSelected("Britain");
		taskforce.draw();
	}
}

WP.Taskforce.Mouse = {}



'use strict'

WP.TaskforceUnit = class {
    constructor (){
        this.id = null;
        this.x = null;
        this.y = null;
    }

        static taskforceUnitBuilder (id, x, y) {
		var taskforceUnit = new WP.TaskforceUnit();
		taskforceUnit.id = id;
		taskforceUnit.x = x;
		taskforceUnit.y = y;
		return taskforceUnit;        
    }
}













'use strict';

WP.UnitCounter = class {
    constructor () {
	   this.unitHolder = null;      
    }

        handleCountrySelected (id) {
        var cty = game.getCountry(id)
    	$("#ucCountryFlag").attr("src", WP.Country.UI.getFlagUrl(cty));
    }

        onMouseDown (e) {
        var point = getPoint('unitCounterCanvas', e);
        var stack = unitCounter.unitHolder.findStackFor(point.x, point.y);
        if (stack) {
            game.setSelectedUnit(stack.getTopUnit());
            unitCounter.unitHolder.drawStack(stack);
        }
        else {
            game.setSelectedUnit(null);
        }        
    }

        draw () {
        var cty = game.getCountry($("#ucCountry").val())
        var units = []
        var drawUnbuilt = $("#ucShowUnbuiltCheckbox").is(':checked')

                for (var i = 0; i < cty.units.length; i++){
            var unit = cty.units[i]
            if (!drawUnbuilt){
                if (unit.location != 1) { units.push(unit) }
            } else {
                units.push(unit)
            }
        }
        var holder = WP.UnitHolder.unitHolderBuilder(unitCounterCtx, $("#ucDetails"));
        holder.units = units;
        holder.stackSimilar = $("#ucStackCheckbox").is(':checked')
        holder.draw();
        unitCounter.unitHolder = holder;        
    }

    }

WP.UnitCounter.Mouse = {}



WP.UnitCounter.UI = {
	addCountryToDropdown: function (cty) {
		$('#ucCountry').append($("<option />").attr("value", cty.id).text(cty.name));
	},

	fillCountryList: function () {
		$('#ucCountry').empty();
		var majors = game.getMajorPowers();
		for (var i = 0; i < majors.length; i++) {
			WP.UnitCounter.UI.addCountryToDropdown(majors[i]);
		}
		for (var i = 0; i < game.countries.length; i++) {
			var cty = game.countries[i];
			if (!cty.isMajorPower && cty.units.length > 0) {
				WP.UnitCounter.UI.addCountryToDropdown(cty);
			}
		}
		unitCounter.handleCountrySelected($('#ucCountry').val());
	},

	handleMenuButton: function () {
		$("#unitCounter").dialog('open');
		$("#unitCounter").dialog("option", "width", 530);
		WP.UnitCounter.UI.fillCountryList();
		unitCounter.draw();
	}
}


'use strict';

WP.UnitHolder = class {
    constructor(){
        this.ctx = null;
        this.units = null;
        this.stacks = []
        this.stackSimilar = false;
    }

        static needsDraw(holder) {
        holder.stacks = []
        holder.ctx.clearRect(0, 0, holder.ctx.canvas.width, holder.ctx.canvas.height);
		if (holder.units && holder.units.length > 0) { 
            return true; 
         }
		return false;
    }

        static unitHolderBuilder (ctx, div) {
        var holder = new WP.UnitHolder();
		ctx.canvas.width = div.width() - 5;
		ctx.canvas.height = div.height() - 5;
		holder.ctx = ctx;
		return holder;
    }

        drawSingle () {
        var these = this
        these.units.forEach(function(u){
            var newStack = new WP.UnitStack()
            newStack.units[0] = u
            these.stacks.push(newStack)
        })
        these.drawAllStacks();
    }

        drawStacked () {
        for (var i = this.units.length - 1; i > -1; i--) {
            var matchingStack = this.units[i].findStackThatMatches(this.stacks);
            if (matchingStack < 0) {
                this.stacks.push(new WP.UnitStack())
                matchingStack = this.stacks.length - 1;
            }

            var stackToAdd = this.stacks[matchingStack];
            stackToAdd.units.push(this.units[i])
        }
        this.drawAllStacks();
    }

        draw () {
        if (WP.UnitHolder.needsDraw(this)) {
            if (this.stackSimilar) {
                this.drawStacked();
            } else {
                this.drawSingle();
            }
        }  
    }

        drawShipyard() {
       if (WP.UnitHolder.needsDraw(this)) {
		for (var i = this.units.length - 1; i > -1; i--) {
			var matchingStack = this.units[i].findStackWithSameAddress(this.stacks);
			if (matchingStack < 0) {
				this.stacks[this.stacks.length] = new WP.UnitStack();
				matchingStack = this.stacks.length - 1;
			}

			var stackToAdd = this.stacks[matchingStack];
			stackToAdd.units.push(this.units[i]);
		}
		this.drawShipyardStacks();
	}
    }

        drawShipyardStacks(){

            var x;
	var y;

	for (var s = 0; s < this.stacks.length; s++) {
		var unit_x = this.stacks[s].units[0].holderX;
		var unit_y = this.stacks[s].units[0].holderY;
		x = 10 + (unit_x * 66);
		y = 30 + (unit_y * 66);
		this.ctx.drawUnits(this.stacks[s].units, x, y);
		this.stacks[s].x = x;
		this.stacks[s].y = y;
	}
    }

        drawTaskforce () {
	if (WP.UnitHolder.needsDraw(this)) {
		for (var i = this.units.length - 1; i > -1; i--) {
			var matchingStack = this.units[i].findStackWithSameAddress(this.stacks);
			if (matchingStack < 0) {
				this.stacks[this.stacks.length] = new WP.UnitStack();
				matchingStack = this.stacks.length - 1;
			}

			var stackToAdd = this.stacks[matchingStack];
			stackToAdd.units.push(this.units[i]);
		}
		this.drawTaskforceStacks();
	}
}

    drawTaskforceStacks () {
        var x;
        var y;

        for (var s = 0; s < this.stacks.length; s++) {
            var unit_x = this.stacks[s].units[0].holderX;
            var unit_y = this.stacks[s].units[0].holderY;
            x = 4 + (unit_x * 58);
            y = 7 + (unit_y * 58);
            this.ctx.drawUnits(this.stacks[s].units, x, y);
            this.stacks[s].x = x;
            this.stacks[s].y = y;
        }
    }

    drawAllStacks () {
        var md = 12;
        var x = md - 3;
        var y = md - 3;
        var size = this.stacks[0].units[0].size;

        for (var s = 0; s < this.stacks.length; s++) {
            if (x > this.ctx.canvas.width - size) {
                x = md - 3;
                y += size + md;
            }

            this.ctx.drawUnits(this.stacks[s].units, x, y);
            this.stacks[s].x = x;
            this.stacks[s].y = y;
            x += size + md + 2;
        }
    }

    drawStack (stack) {
        if (stack) this.ctx.drawUnits(stack.units, stack.x, stack.y);
    }


    findStackContaining (unit) {
        for (var i = 0; i < this.stacks.length; i++) {
            var stack = this.stacks[i];
            if (stack.units) {
                for (var x = 0; x < stack.units.length; x++) {
                    if (stack.units[x] == unit)
                        return stack;
                }
            }
        }
        return null;
    }

        findStackFor (x, y) {
        var res = null
        this.stacks.forEach(stack => {
            if (stack.x < x && stack.x + 53 > x) {
                if (stack.y < y && stack.y + 53 > y) {
                    res = stack
                }
            }
        })        
        return res;
    }

    }

























'use strict';

WP.UnitStack = class {
    constructor() {
        this.x = 0
        this.y = 0
        this.units = []
    }
    getTopUnit () {
        if (!this.units) { return null } 
        return this.units[this.units.length - 1]
    }
    removeUnit (unit) {
        this.units = this.units.filter(u => u != unit)
    }
    addUnit (unit) {
        if (!unit) return;
        this.units.push(unit);
        unit.stack = this;
    }
    rotateUnits () {
        var unit = this.units.shift();
        this.addUnit(unit);
    }
}
